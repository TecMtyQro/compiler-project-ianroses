Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    CLASS
    SINGLE_COM
    CONTINUE
    RETHROW
    ASSERT
    RETURN
    WITH
    CASE
    MULTI_COM
    FINALLY
    SWITCH
    EXTENDS
    S_RBRACKET
    IN
    SUPER
    NEW
    S_LBRACKET
    TRY
    NULL
    OP_LOGIC_NOT
    DEFAULT
    ERROR
    THIS
    FINAL
    IS
    CATCH
    ENUM
    THROW

Grammar

Rule 0     S' -> root
Rule 1     root -> import_main
Rule 2     import_main -> import_list main
Rule 3     import_list -> empty
Rule 4     import_list -> import_statement
Rule 5     import_list -> import_list import_statement
Rule 6     import_statement -> import_expression semicolon
Rule 7     main -> VOID MAIN S_LPAREN S_RPAREN S_LCURLY_BRACE statement_list S_RCURLY_BRACE
Rule 8     statement_list -> empty
Rule 9     statement_list -> statement
Rule 10    statement_list -> statement_list statement
Rule 11    statement -> expression_statement
Rule 12    statement -> selection_statement
Rule 13    statement -> iteration_statement
Rule 14    expression_statement -> declaration_expression semicolon
Rule 15    expression_statement -> empty semicolon
Rule 16    expression_statement -> input_expression semicolon
Rule 17    expression_statement -> output_expression semicolon
Rule 18    import_expression -> IMPORT LIT_STRING
Rule 19    declaration_expression -> assignment_expression
Rule 20    declaration_expression -> type_specifier declaration_expression
Rule 21    declaration_expression -> CONST type_specifier declaration_expression
Rule 22    selection_statement -> IF conditional_expression block_statement_list
Rule 23    selection_statement -> selection_statement ELSE IF conditional_expression block_statement_list
Rule 24    selection_statement -> selection_statement ELSE block_statement_list
Rule 25    iteration_statement -> WHILE conditional_expression block_statement_list
Rule 26    iteration_statement -> DO block_statement_list WHILE conditional_expression
Rule 27    iteration_statement -> FOR S_LPAREN declaration_expression S_SEMI_COL logical_expression S_SEMI_COL ID OP_ARITH_INCREMENT S_RPAREN block_statement_list
Rule 28    iteration_statement -> FOR S_LPAREN declaration_expression logical_expression ID OP_ARITH_DECREMENT S_RPAREN block_statement_list
Rule 29    block_statement_list -> S_LCURLY_BRACE statement_list S_RCURLY_BRACE
Rule 30    conditional_expression -> S_LPAREN logical_expression S_RPAREN
Rule 31    assignment_expression -> variable_expression
Rule 32    assignment_expression -> assignment_expression OP_ASSIGN_SIMPLE logical_expression
Rule 33    assignment_expression -> assignment_expression OP_ASSIGN_MULT logical_expression
Rule 34    assignment_expression -> assignment_expression OP_ASSIGN_DIV logical_expression
Rule 35    assignment_expression -> assignment_expression OP_ASSIGN_ADD logical_expression
Rule 36    assignment_expression -> assignment_expression OP_ASSIGN_SUBTRACT logical_expression
Rule 37    assignment_expression -> assignment_expression OP_ASSIGN_SIMPLE input_expression
Rule 38    assignment_expression -> assignment_expression OP_ASSIGN_MULT input_expression
Rule 39    assignment_expression -> assignment_expression OP_ASSIGN_DIV input_expression
Rule 40    assignment_expression -> assignment_expression OP_ASSIGN_ADD input_expression
Rule 41    assignment_expression -> assignment_expression OP_ASSIGN_SUBTRACT input_expression
Rule 42    logical_expression -> equality_expression
Rule 43    logical_expression -> logical_expression logical_operators equality_expression
Rule 44    equality_expression -> relational_expression
Rule 45    equality_expression -> equality_expression equality_operators relational_expression
Rule 46    relational_expression -> math_expression
Rule 47    relational_expression -> relational_expression relational_operators math_expression
Rule 48    math_expression -> primary_expression
Rule 49    math_expression -> math_expression math_operators primary_expression
Rule 50    input_expression -> ID OP_DOT ID S_LPAREN S_RPAREN
Rule 51    output_expression -> ID conditional_expression
Rule 52    type_specifier -> INT
Rule 53    type_specifier -> BOOLEAN
Rule 54    type_specifier -> STRING
Rule 55    type_specifier -> DOUBLE
Rule 56    logical_operators -> OP_LOGIC_AND
Rule 57    logical_operators -> OP_LOGIC_OR
Rule 58    equality_operators -> OP_EQUALITY_EQUAL
Rule 59    equality_operators -> OP_EQUALITY_NOT_EQUAL
Rule 60    relational_operators -> OP_EQUALITY_LESSER_THAN
Rule 61    relational_operators -> OP_EQUALITY_GREATER_THAN
Rule 62    relational_operators -> OP_EQUALITY_LESSER_OR_EQUAL_THAN
Rule 63    relational_operators -> OP_EQUALITY_GREATER_OR_EQUAL_THAN
Rule 64    math_operators -> OP_ARITH_ADD
Rule 65    math_operators -> OP_ARITH_SUBTRACT
Rule 66    math_operators -> OP_ARITH_MULTIPLY
Rule 67    math_operators -> OP_ARITH_DIVIDE
Rule 68    math_operators -> OP_ARITH_INTEGER_DIVIDE
Rule 69    math_operators -> OP_ARITH_MODULE
Rule 70    math_operators -> OP_ARITH_INCREMENT
Rule 71    math_operators -> OP_ARITH_DECREMENT
Rule 72    primary_expression -> variable_expression
Rule 73    primary_expression -> boolean_expression
Rule 74    primary_expression -> LIT_INT
Rule 75    primary_expression -> LIT_REAL
Rule 76    primary_expression -> LIT_STRING
Rule 77    variable_expression -> ID
Rule 78    variable_expression -> CONST
Rule 79    boolean_expression -> TRUE
Rule 80    boolean_expression -> FALSE
Rule 81    semicolon -> S_SEMI_COL
Rule 82    empty -> <empty>

Terminals, with rules where they appear

ASSERT               : 
BOOLEAN              : 53
BREAK                : 
CASE                 : 
CATCH                : 
CLASS                : 
CONST                : 21 78
CONTINUE             : 
DEFAULT              : 
DO                   : 26
DOUBLE               : 55
ELSE                 : 23 24
ENUM                 : 
ERROR                : 
EXTENDS              : 
FALSE                : 80
FINAL                : 
FINALLY              : 
FOR                  : 27 28
ID                   : 27 28 50 50 51 77
IF                   : 22 23
IMPORT               : 18
IN                   : 
INT                  : 52
IS                   : 
LIT_INT              : 74
LIT_REAL             : 75
LIT_STRING           : 18 76
MAIN                 : 7
MULTI_COM            : 
NEW                  : 
NULL                 : 
OP_ARITH_ADD         : 64
OP_ARITH_DECREMENT   : 28 71
OP_ARITH_DIVIDE      : 67
OP_ARITH_INCREMENT   : 27 70
OP_ARITH_INTEGER_DIVIDE : 68
OP_ARITH_MODULE      : 69
OP_ARITH_MULTIPLY    : 66
OP_ARITH_SUBTRACT    : 65
OP_ASSIGN_ADD        : 35 40
OP_ASSIGN_DIV        : 34 39
OP_ASSIGN_MULT       : 33 38
OP_ASSIGN_SIMPLE     : 32 37
OP_ASSIGN_SUBTRACT   : 36 41
OP_DOT               : 50
OP_EQUALITY_EQUAL    : 58
OP_EQUALITY_GREATER_OR_EQUAL_THAN : 63
OP_EQUALITY_GREATER_THAN : 61
OP_EQUALITY_LESSER_OR_EQUAL_THAN : 62
OP_EQUALITY_LESSER_THAN : 60
OP_EQUALITY_NOT_EQUAL : 59
OP_LOGIC_AND         : 56
OP_LOGIC_NOT         : 
OP_LOGIC_OR          : 57
RETHROW              : 
RETURN               : 
SINGLE_COM           : 
STRING               : 54
SUPER                : 
SWITCH               : 
S_LBRACKET           : 
S_LCURLY_BRACE       : 7 29
S_LPAREN             : 7 27 28 30 50
S_RBRACKET           : 
S_RCURLY_BRACE       : 7 29
S_RPAREN             : 7 27 28 30 50
S_SEMI_COL           : 27 27 81
THIS                 : 
THROW                : 
TRUE                 : 79
TRY                  : 
VOID                 : 7
WHILE                : 25 26
WITH                 : 
error                : 

Nonterminals, with rules where they appear

assignment_expression : 19 32 33 34 35 36 37 38 39 40 41
block_statement_list : 22 23 24 25 26 27 28
boolean_expression   : 73
conditional_expression : 22 23 25 26 51
declaration_expression : 14 20 21 27 28
empty                : 3 8 15
equality_expression  : 42 43 45
equality_operators   : 45
expression_statement : 11
import_expression    : 6
import_list          : 2 5
import_main          : 1
import_statement     : 4 5
input_expression     : 16 37 38 39 40 41
iteration_statement  : 13
logical_expression   : 27 28 30 32 33 34 35 36 43
logical_operators    : 43
main                 : 2
math_expression      : 46 47 49
math_operators       : 49
output_expression    : 17
primary_expression   : 48 49
relational_expression : 44 45 47
relational_operators : 47
root                 : 0
selection_statement  : 12 23 24
semicolon            : 6 14 15 16 17
statement            : 9 10
statement_list       : 7 10 29
type_specifier       : 20 21
variable_expression  : 31 72

Parsing method: LALR

state 0

    (0) S' -> . root
    (1) root -> . import_main
    (2) import_main -> . import_list main
    (3) import_list -> . empty
    (4) import_list -> . import_statement
    (5) import_list -> . import_list import_statement
    (82) empty -> .
    (6) import_statement -> . import_expression semicolon
    (18) import_expression -> . IMPORT LIT_STRING

  ! shift/reduce conflict for IMPORT resolved as shift
    VOID            reduce using rule 82 (empty -> .)
    IMPORT          shift and go to state 7

  ! IMPORT          [ reduce using rule 82 (empty -> .) ]

    import_main                    shift and go to state 1
    root                           shift and go to state 2
    import_statement               shift and go to state 3
    empty                          shift and go to state 4
    import_expression              shift and go to state 5
    import_list                    shift and go to state 6

state 1

    (1) root -> import_main .

    $end            reduce using rule 1 (root -> import_main .)


state 2

    (0) S' -> root .



state 3

    (4) import_list -> import_statement .

    VOID            reduce using rule 4 (import_list -> import_statement .)
    IMPORT          reduce using rule 4 (import_list -> import_statement .)


state 4

    (3) import_list -> empty .

    VOID            reduce using rule 3 (import_list -> empty .)
    IMPORT          reduce using rule 3 (import_list -> empty .)


state 5

    (6) import_statement -> import_expression . semicolon
    (81) semicolon -> . S_SEMI_COL

    S_SEMI_COL      shift and go to state 8

    semicolon                      shift and go to state 9

state 6

    (2) import_main -> import_list . main
    (5) import_list -> import_list . import_statement
    (7) main -> . VOID MAIN S_LPAREN S_RPAREN S_LCURLY_BRACE statement_list S_RCURLY_BRACE
    (6) import_statement -> . import_expression semicolon
    (18) import_expression -> . IMPORT LIT_STRING

    VOID            shift and go to state 12
    IMPORT          shift and go to state 7

    import_statement               shift and go to state 10
    import_expression              shift and go to state 5
    main                           shift and go to state 11

state 7

    (18) import_expression -> IMPORT . LIT_STRING

    LIT_STRING      shift and go to state 13


state 8

    (81) semicolon -> S_SEMI_COL .

    S_RCURLY_BRACE  reduce using rule 81 (semicolon -> S_SEMI_COL .)
    IF              reduce using rule 81 (semicolon -> S_SEMI_COL .)
    WHILE           reduce using rule 81 (semicolon -> S_SEMI_COL .)
    DO              reduce using rule 81 (semicolon -> S_SEMI_COL .)
    FOR             reduce using rule 81 (semicolon -> S_SEMI_COL .)
    CONST           reduce using rule 81 (semicolon -> S_SEMI_COL .)
    ID              reduce using rule 81 (semicolon -> S_SEMI_COL .)
    INT             reduce using rule 81 (semicolon -> S_SEMI_COL .)
    BOOLEAN         reduce using rule 81 (semicolon -> S_SEMI_COL .)
    STRING          reduce using rule 81 (semicolon -> S_SEMI_COL .)
    DOUBLE          reduce using rule 81 (semicolon -> S_SEMI_COL .)
    S_SEMI_COL      reduce using rule 81 (semicolon -> S_SEMI_COL .)
    VOID            reduce using rule 81 (semicolon -> S_SEMI_COL .)
    IMPORT          reduce using rule 81 (semicolon -> S_SEMI_COL .)


state 9

    (6) import_statement -> import_expression semicolon .

    VOID            reduce using rule 6 (import_statement -> import_expression semicolon .)
    IMPORT          reduce using rule 6 (import_statement -> import_expression semicolon .)


state 10

    (5) import_list -> import_list import_statement .

    VOID            reduce using rule 5 (import_list -> import_list import_statement .)
    IMPORT          reduce using rule 5 (import_list -> import_list import_statement .)


state 11

    (2) import_main -> import_list main .

    $end            reduce using rule 2 (import_main -> import_list main .)


state 12

    (7) main -> VOID . MAIN S_LPAREN S_RPAREN S_LCURLY_BRACE statement_list S_RCURLY_BRACE

    MAIN            shift and go to state 14


state 13

    (18) import_expression -> IMPORT LIT_STRING .

    S_SEMI_COL      reduce using rule 18 (import_expression -> IMPORT LIT_STRING .)


state 14

    (7) main -> VOID MAIN . S_LPAREN S_RPAREN S_LCURLY_BRACE statement_list S_RCURLY_BRACE

    S_LPAREN        shift and go to state 15


state 15

    (7) main -> VOID MAIN S_LPAREN . S_RPAREN S_LCURLY_BRACE statement_list S_RCURLY_BRACE

    S_RPAREN        shift and go to state 16


state 16

    (7) main -> VOID MAIN S_LPAREN S_RPAREN . S_LCURLY_BRACE statement_list S_RCURLY_BRACE

    S_LCURLY_BRACE  shift and go to state 17


state 17

    (7) main -> VOID MAIN S_LPAREN S_RPAREN S_LCURLY_BRACE . statement_list S_RCURLY_BRACE
    (8) statement_list -> . empty
    (9) statement_list -> . statement
    (10) statement_list -> . statement_list statement
    (82) empty -> .
    (11) statement -> . expression_statement
    (12) statement -> . selection_statement
    (13) statement -> . iteration_statement
    (14) expression_statement -> . declaration_expression semicolon
    (15) expression_statement -> . empty semicolon
    (16) expression_statement -> . input_expression semicolon
    (17) expression_statement -> . output_expression semicolon
    (22) selection_statement -> . IF conditional_expression block_statement_list
    (23) selection_statement -> . selection_statement ELSE IF conditional_expression block_statement_list
    (24) selection_statement -> . selection_statement ELSE block_statement_list
    (25) iteration_statement -> . WHILE conditional_expression block_statement_list
    (26) iteration_statement -> . DO block_statement_list WHILE conditional_expression
    (27) iteration_statement -> . FOR S_LPAREN declaration_expression S_SEMI_COL logical_expression S_SEMI_COL ID OP_ARITH_INCREMENT S_RPAREN block_statement_list
    (28) iteration_statement -> . FOR S_LPAREN declaration_expression logical_expression ID OP_ARITH_DECREMENT S_RPAREN block_statement_list
    (19) declaration_expression -> . assignment_expression
    (20) declaration_expression -> . type_specifier declaration_expression
    (21) declaration_expression -> . CONST type_specifier declaration_expression
    (50) input_expression -> . ID OP_DOT ID S_LPAREN S_RPAREN
    (51) output_expression -> . ID conditional_expression
    (31) assignment_expression -> . variable_expression
    (32) assignment_expression -> . assignment_expression OP_ASSIGN_SIMPLE logical_expression
    (33) assignment_expression -> . assignment_expression OP_ASSIGN_MULT logical_expression
    (34) assignment_expression -> . assignment_expression OP_ASSIGN_DIV logical_expression
    (35) assignment_expression -> . assignment_expression OP_ASSIGN_ADD logical_expression
    (36) assignment_expression -> . assignment_expression OP_ASSIGN_SUBTRACT logical_expression
    (37) assignment_expression -> . assignment_expression OP_ASSIGN_SIMPLE input_expression
    (38) assignment_expression -> . assignment_expression OP_ASSIGN_MULT input_expression
    (39) assignment_expression -> . assignment_expression OP_ASSIGN_DIV input_expression
    (40) assignment_expression -> . assignment_expression OP_ASSIGN_ADD input_expression
    (41) assignment_expression -> . assignment_expression OP_ASSIGN_SUBTRACT input_expression
    (52) type_specifier -> . INT
    (53) type_specifier -> . BOOLEAN
    (54) type_specifier -> . STRING
    (55) type_specifier -> . DOUBLE
    (77) variable_expression -> . ID
    (78) variable_expression -> . CONST

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    S_SEMI_COL      reduce using rule 82 (empty -> .)
    S_RCURLY_BRACE  reduce using rule 82 (empty -> .)
    IF              shift and go to state 34
    WHILE           shift and go to state 39
    DO              shift and go to state 25
    FOR             shift and go to state 20
    CONST           shift and go to state 22
    ID              shift and go to state 32
    INT             shift and go to state 33
    BOOLEAN         shift and go to state 18
    STRING          shift and go to state 31
    DOUBLE          shift and go to state 24

  ! IF              [ reduce using rule 82 (empty -> .) ]
  ! WHILE           [ reduce using rule 82 (empty -> .) ]
  ! DO              [ reduce using rule 82 (empty -> .) ]
  ! FOR             [ reduce using rule 82 (empty -> .) ]
  ! CONST           [ reduce using rule 82 (empty -> .) ]
  ! ID              [ reduce using rule 82 (empty -> .) ]
  ! INT             [ reduce using rule 82 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 82 (empty -> .) ]
  ! STRING          [ reduce using rule 82 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 82 (empty -> .) ]

    type_specifier                 shift and go to state 36
    selection_statement            shift and go to state 19
    variable_expression            shift and go to state 21
    assignment_expression          shift and go to state 28
    statement_list                 shift and go to state 23
    expression_statement           shift and go to state 26
    iteration_statement            shift and go to state 27
    empty                          shift and go to state 38
    statement                      shift and go to state 29
    input_expression               shift and go to state 37
    output_expression              shift and go to state 30
    declaration_expression         shift and go to state 35

state 18

    (53) type_specifier -> BOOLEAN .

    CONST           reduce using rule 53 (type_specifier -> BOOLEAN .)
    INT             reduce using rule 53 (type_specifier -> BOOLEAN .)
    BOOLEAN         reduce using rule 53 (type_specifier -> BOOLEAN .)
    STRING          reduce using rule 53 (type_specifier -> BOOLEAN .)
    DOUBLE          reduce using rule 53 (type_specifier -> BOOLEAN .)
    ID              reduce using rule 53 (type_specifier -> BOOLEAN .)


state 19

    (12) statement -> selection_statement .
    (23) selection_statement -> selection_statement . ELSE IF conditional_expression block_statement_list
    (24) selection_statement -> selection_statement . ELSE block_statement_list

    S_RCURLY_BRACE  reduce using rule 12 (statement -> selection_statement .)
    IF              reduce using rule 12 (statement -> selection_statement .)
    WHILE           reduce using rule 12 (statement -> selection_statement .)
    DO              reduce using rule 12 (statement -> selection_statement .)
    FOR             reduce using rule 12 (statement -> selection_statement .)
    CONST           reduce using rule 12 (statement -> selection_statement .)
    ID              reduce using rule 12 (statement -> selection_statement .)
    INT             reduce using rule 12 (statement -> selection_statement .)
    BOOLEAN         reduce using rule 12 (statement -> selection_statement .)
    STRING          reduce using rule 12 (statement -> selection_statement .)
    DOUBLE          reduce using rule 12 (statement -> selection_statement .)
    S_SEMI_COL      reduce using rule 12 (statement -> selection_statement .)
    ELSE            shift and go to state 40


state 20

    (27) iteration_statement -> FOR . S_LPAREN declaration_expression S_SEMI_COL logical_expression S_SEMI_COL ID OP_ARITH_INCREMENT S_RPAREN block_statement_list
    (28) iteration_statement -> FOR . S_LPAREN declaration_expression logical_expression ID OP_ARITH_DECREMENT S_RPAREN block_statement_list

    S_LPAREN        shift and go to state 41


state 21

    (31) assignment_expression -> variable_expression .

    OP_ASSIGN_SIMPLE reduce using rule 31 (assignment_expression -> variable_expression .)
    OP_ASSIGN_MULT  reduce using rule 31 (assignment_expression -> variable_expression .)
    OP_ASSIGN_DIV   reduce using rule 31 (assignment_expression -> variable_expression .)
    OP_ASSIGN_ADD   reduce using rule 31 (assignment_expression -> variable_expression .)
    OP_ASSIGN_SUBTRACT reduce using rule 31 (assignment_expression -> variable_expression .)
    S_SEMI_COL      reduce using rule 31 (assignment_expression -> variable_expression .)
    LIT_INT         reduce using rule 31 (assignment_expression -> variable_expression .)
    LIT_REAL        reduce using rule 31 (assignment_expression -> variable_expression .)
    LIT_STRING      reduce using rule 31 (assignment_expression -> variable_expression .)
    ID              reduce using rule 31 (assignment_expression -> variable_expression .)
    CONST           reduce using rule 31 (assignment_expression -> variable_expression .)
    TRUE            reduce using rule 31 (assignment_expression -> variable_expression .)
    FALSE           reduce using rule 31 (assignment_expression -> variable_expression .)


state 22

    (21) declaration_expression -> CONST . type_specifier declaration_expression
    (78) variable_expression -> CONST .
    (52) type_specifier -> . INT
    (53) type_specifier -> . BOOLEAN
    (54) type_specifier -> . STRING
    (55) type_specifier -> . DOUBLE

    OP_ASSIGN_SIMPLE reduce using rule 78 (variable_expression -> CONST .)
    OP_ASSIGN_MULT  reduce using rule 78 (variable_expression -> CONST .)
    OP_ASSIGN_DIV   reduce using rule 78 (variable_expression -> CONST .)
    OP_ASSIGN_ADD   reduce using rule 78 (variable_expression -> CONST .)
    OP_ASSIGN_SUBTRACT reduce using rule 78 (variable_expression -> CONST .)
    S_SEMI_COL      reduce using rule 78 (variable_expression -> CONST .)
    LIT_INT         reduce using rule 78 (variable_expression -> CONST .)
    LIT_REAL        reduce using rule 78 (variable_expression -> CONST .)
    LIT_STRING      reduce using rule 78 (variable_expression -> CONST .)
    ID              reduce using rule 78 (variable_expression -> CONST .)
    CONST           reduce using rule 78 (variable_expression -> CONST .)
    TRUE            reduce using rule 78 (variable_expression -> CONST .)
    FALSE           reduce using rule 78 (variable_expression -> CONST .)
    INT             shift and go to state 33
    BOOLEAN         shift and go to state 18
    STRING          shift and go to state 31
    DOUBLE          shift and go to state 24

    type_specifier                 shift and go to state 42

state 23

    (7) main -> VOID MAIN S_LPAREN S_RPAREN S_LCURLY_BRACE statement_list . S_RCURLY_BRACE
    (10) statement_list -> statement_list . statement
    (11) statement -> . expression_statement
    (12) statement -> . selection_statement
    (13) statement -> . iteration_statement
    (14) expression_statement -> . declaration_expression semicolon
    (15) expression_statement -> . empty semicolon
    (16) expression_statement -> . input_expression semicolon
    (17) expression_statement -> . output_expression semicolon
    (22) selection_statement -> . IF conditional_expression block_statement_list
    (23) selection_statement -> . selection_statement ELSE IF conditional_expression block_statement_list
    (24) selection_statement -> . selection_statement ELSE block_statement_list
    (25) iteration_statement -> . WHILE conditional_expression block_statement_list
    (26) iteration_statement -> . DO block_statement_list WHILE conditional_expression
    (27) iteration_statement -> . FOR S_LPAREN declaration_expression S_SEMI_COL logical_expression S_SEMI_COL ID OP_ARITH_INCREMENT S_RPAREN block_statement_list
    (28) iteration_statement -> . FOR S_LPAREN declaration_expression logical_expression ID OP_ARITH_DECREMENT S_RPAREN block_statement_list
    (19) declaration_expression -> . assignment_expression
    (20) declaration_expression -> . type_specifier declaration_expression
    (21) declaration_expression -> . CONST type_specifier declaration_expression
    (82) empty -> .
    (50) input_expression -> . ID OP_DOT ID S_LPAREN S_RPAREN
    (51) output_expression -> . ID conditional_expression
    (31) assignment_expression -> . variable_expression
    (32) assignment_expression -> . assignment_expression OP_ASSIGN_SIMPLE logical_expression
    (33) assignment_expression -> . assignment_expression OP_ASSIGN_MULT logical_expression
    (34) assignment_expression -> . assignment_expression OP_ASSIGN_DIV logical_expression
    (35) assignment_expression -> . assignment_expression OP_ASSIGN_ADD logical_expression
    (36) assignment_expression -> . assignment_expression OP_ASSIGN_SUBTRACT logical_expression
    (37) assignment_expression -> . assignment_expression OP_ASSIGN_SIMPLE input_expression
    (38) assignment_expression -> . assignment_expression OP_ASSIGN_MULT input_expression
    (39) assignment_expression -> . assignment_expression OP_ASSIGN_DIV input_expression
    (40) assignment_expression -> . assignment_expression OP_ASSIGN_ADD input_expression
    (41) assignment_expression -> . assignment_expression OP_ASSIGN_SUBTRACT input_expression
    (52) type_specifier -> . INT
    (53) type_specifier -> . BOOLEAN
    (54) type_specifier -> . STRING
    (55) type_specifier -> . DOUBLE
    (77) variable_expression -> . ID
    (78) variable_expression -> . CONST

    S_RCURLY_BRACE  shift and go to state 43
    IF              shift and go to state 34
    WHILE           shift and go to state 39
    DO              shift and go to state 25
    FOR             shift and go to state 20
    CONST           shift and go to state 22
    S_SEMI_COL      reduce using rule 82 (empty -> .)
    ID              shift and go to state 32
    INT             shift and go to state 33
    BOOLEAN         shift and go to state 18
    STRING          shift and go to state 31
    DOUBLE          shift and go to state 24

    type_specifier                 shift and go to state 36
    selection_statement            shift and go to state 19
    variable_expression            shift and go to state 21
    assignment_expression          shift and go to state 28
    expression_statement           shift and go to state 26
    iteration_statement            shift and go to state 27
    empty                          shift and go to state 45
    statement                      shift and go to state 44
    input_expression               shift and go to state 37
    output_expression              shift and go to state 30
    declaration_expression         shift and go to state 35

state 24

    (55) type_specifier -> DOUBLE .

    CONST           reduce using rule 55 (type_specifier -> DOUBLE .)
    INT             reduce using rule 55 (type_specifier -> DOUBLE .)
    BOOLEAN         reduce using rule 55 (type_specifier -> DOUBLE .)
    STRING          reduce using rule 55 (type_specifier -> DOUBLE .)
    DOUBLE          reduce using rule 55 (type_specifier -> DOUBLE .)
    ID              reduce using rule 55 (type_specifier -> DOUBLE .)


state 25

    (26) iteration_statement -> DO . block_statement_list WHILE conditional_expression
    (29) block_statement_list -> . S_LCURLY_BRACE statement_list S_RCURLY_BRACE

    S_LCURLY_BRACE  shift and go to state 47

    block_statement_list           shift and go to state 46

state 26

    (11) statement -> expression_statement .

    S_RCURLY_BRACE  reduce using rule 11 (statement -> expression_statement .)
    IF              reduce using rule 11 (statement -> expression_statement .)
    WHILE           reduce using rule 11 (statement -> expression_statement .)
    DO              reduce using rule 11 (statement -> expression_statement .)
    FOR             reduce using rule 11 (statement -> expression_statement .)
    CONST           reduce using rule 11 (statement -> expression_statement .)
    ID              reduce using rule 11 (statement -> expression_statement .)
    INT             reduce using rule 11 (statement -> expression_statement .)
    BOOLEAN         reduce using rule 11 (statement -> expression_statement .)
    STRING          reduce using rule 11 (statement -> expression_statement .)
    DOUBLE          reduce using rule 11 (statement -> expression_statement .)
    S_SEMI_COL      reduce using rule 11 (statement -> expression_statement .)


state 27

    (13) statement -> iteration_statement .

    S_RCURLY_BRACE  reduce using rule 13 (statement -> iteration_statement .)
    IF              reduce using rule 13 (statement -> iteration_statement .)
    WHILE           reduce using rule 13 (statement -> iteration_statement .)
    DO              reduce using rule 13 (statement -> iteration_statement .)
    FOR             reduce using rule 13 (statement -> iteration_statement .)
    CONST           reduce using rule 13 (statement -> iteration_statement .)
    ID              reduce using rule 13 (statement -> iteration_statement .)
    INT             reduce using rule 13 (statement -> iteration_statement .)
    BOOLEAN         reduce using rule 13 (statement -> iteration_statement .)
    STRING          reduce using rule 13 (statement -> iteration_statement .)
    DOUBLE          reduce using rule 13 (statement -> iteration_statement .)
    S_SEMI_COL      reduce using rule 13 (statement -> iteration_statement .)


state 28

    (19) declaration_expression -> assignment_expression .
    (32) assignment_expression -> assignment_expression . OP_ASSIGN_SIMPLE logical_expression
    (33) assignment_expression -> assignment_expression . OP_ASSIGN_MULT logical_expression
    (34) assignment_expression -> assignment_expression . OP_ASSIGN_DIV logical_expression
    (35) assignment_expression -> assignment_expression . OP_ASSIGN_ADD logical_expression
    (36) assignment_expression -> assignment_expression . OP_ASSIGN_SUBTRACT logical_expression
    (37) assignment_expression -> assignment_expression . OP_ASSIGN_SIMPLE input_expression
    (38) assignment_expression -> assignment_expression . OP_ASSIGN_MULT input_expression
    (39) assignment_expression -> assignment_expression . OP_ASSIGN_DIV input_expression
    (40) assignment_expression -> assignment_expression . OP_ASSIGN_ADD input_expression
    (41) assignment_expression -> assignment_expression . OP_ASSIGN_SUBTRACT input_expression

    S_SEMI_COL      reduce using rule 19 (declaration_expression -> assignment_expression .)
    LIT_INT         reduce using rule 19 (declaration_expression -> assignment_expression .)
    LIT_REAL        reduce using rule 19 (declaration_expression -> assignment_expression .)
    LIT_STRING      reduce using rule 19 (declaration_expression -> assignment_expression .)
    ID              reduce using rule 19 (declaration_expression -> assignment_expression .)
    CONST           reduce using rule 19 (declaration_expression -> assignment_expression .)
    TRUE            reduce using rule 19 (declaration_expression -> assignment_expression .)
    FALSE           reduce using rule 19 (declaration_expression -> assignment_expression .)
    OP_ASSIGN_SIMPLE shift and go to state 50
    OP_ASSIGN_MULT  shift and go to state 48
    OP_ASSIGN_DIV   shift and go to state 52
    OP_ASSIGN_ADD   shift and go to state 49
    OP_ASSIGN_SUBTRACT shift and go to state 51


state 29

    (9) statement_list -> statement .

    S_RCURLY_BRACE  reduce using rule 9 (statement_list -> statement .)
    IF              reduce using rule 9 (statement_list -> statement .)
    WHILE           reduce using rule 9 (statement_list -> statement .)
    DO              reduce using rule 9 (statement_list -> statement .)
    FOR             reduce using rule 9 (statement_list -> statement .)
    CONST           reduce using rule 9 (statement_list -> statement .)
    ID              reduce using rule 9 (statement_list -> statement .)
    INT             reduce using rule 9 (statement_list -> statement .)
    BOOLEAN         reduce using rule 9 (statement_list -> statement .)
    STRING          reduce using rule 9 (statement_list -> statement .)
    DOUBLE          reduce using rule 9 (statement_list -> statement .)
    S_SEMI_COL      reduce using rule 9 (statement_list -> statement .)


state 30

    (17) expression_statement -> output_expression . semicolon
    (81) semicolon -> . S_SEMI_COL

    S_SEMI_COL      shift and go to state 8

    semicolon                      shift and go to state 53

state 31

    (54) type_specifier -> STRING .

    CONST           reduce using rule 54 (type_specifier -> STRING .)
    INT             reduce using rule 54 (type_specifier -> STRING .)
    BOOLEAN         reduce using rule 54 (type_specifier -> STRING .)
    STRING          reduce using rule 54 (type_specifier -> STRING .)
    DOUBLE          reduce using rule 54 (type_specifier -> STRING .)
    ID              reduce using rule 54 (type_specifier -> STRING .)


state 32

    (50) input_expression -> ID . OP_DOT ID S_LPAREN S_RPAREN
    (51) output_expression -> ID . conditional_expression
    (77) variable_expression -> ID .
    (30) conditional_expression -> . S_LPAREN logical_expression S_RPAREN

    OP_DOT          shift and go to state 54
    OP_ASSIGN_SIMPLE reduce using rule 77 (variable_expression -> ID .)
    OP_ASSIGN_MULT  reduce using rule 77 (variable_expression -> ID .)
    OP_ASSIGN_DIV   reduce using rule 77 (variable_expression -> ID .)
    OP_ASSIGN_ADD   reduce using rule 77 (variable_expression -> ID .)
    OP_ASSIGN_SUBTRACT reduce using rule 77 (variable_expression -> ID .)
    S_SEMI_COL      reduce using rule 77 (variable_expression -> ID .)
    S_LPAREN        shift and go to state 56

    conditional_expression         shift and go to state 55

state 33

    (52) type_specifier -> INT .

    CONST           reduce using rule 52 (type_specifier -> INT .)
    INT             reduce using rule 52 (type_specifier -> INT .)
    BOOLEAN         reduce using rule 52 (type_specifier -> INT .)
    STRING          reduce using rule 52 (type_specifier -> INT .)
    DOUBLE          reduce using rule 52 (type_specifier -> INT .)
    ID              reduce using rule 52 (type_specifier -> INT .)


state 34

    (22) selection_statement -> IF . conditional_expression block_statement_list
    (30) conditional_expression -> . S_LPAREN logical_expression S_RPAREN

    S_LPAREN        shift and go to state 56

    conditional_expression         shift and go to state 57

state 35

    (14) expression_statement -> declaration_expression . semicolon
    (81) semicolon -> . S_SEMI_COL

    S_SEMI_COL      shift and go to state 8

    semicolon                      shift and go to state 58

state 36

    (20) declaration_expression -> type_specifier . declaration_expression
    (19) declaration_expression -> . assignment_expression
    (20) declaration_expression -> . type_specifier declaration_expression
    (21) declaration_expression -> . CONST type_specifier declaration_expression
    (31) assignment_expression -> . variable_expression
    (32) assignment_expression -> . assignment_expression OP_ASSIGN_SIMPLE logical_expression
    (33) assignment_expression -> . assignment_expression OP_ASSIGN_MULT logical_expression
    (34) assignment_expression -> . assignment_expression OP_ASSIGN_DIV logical_expression
    (35) assignment_expression -> . assignment_expression OP_ASSIGN_ADD logical_expression
    (36) assignment_expression -> . assignment_expression OP_ASSIGN_SUBTRACT logical_expression
    (37) assignment_expression -> . assignment_expression OP_ASSIGN_SIMPLE input_expression
    (38) assignment_expression -> . assignment_expression OP_ASSIGN_MULT input_expression
    (39) assignment_expression -> . assignment_expression OP_ASSIGN_DIV input_expression
    (40) assignment_expression -> . assignment_expression OP_ASSIGN_ADD input_expression
    (41) assignment_expression -> . assignment_expression OP_ASSIGN_SUBTRACT input_expression
    (52) type_specifier -> . INT
    (53) type_specifier -> . BOOLEAN
    (54) type_specifier -> . STRING
    (55) type_specifier -> . DOUBLE
    (77) variable_expression -> . ID
    (78) variable_expression -> . CONST

    CONST           shift and go to state 22
    INT             shift and go to state 33
    BOOLEAN         shift and go to state 18
    STRING          shift and go to state 31
    DOUBLE          shift and go to state 24
    ID              shift and go to state 59

    type_specifier                 shift and go to state 36
    assignment_expression          shift and go to state 28
    declaration_expression         shift and go to state 60
    variable_expression            shift and go to state 21

state 37

    (16) expression_statement -> input_expression . semicolon
    (81) semicolon -> . S_SEMI_COL

    S_SEMI_COL      shift and go to state 8

    semicolon                      shift and go to state 61

state 38

    (8) statement_list -> empty .
    (15) expression_statement -> empty . semicolon
    (81) semicolon -> . S_SEMI_COL

  ! shift/reduce conflict for S_SEMI_COL resolved as shift
    S_RCURLY_BRACE  reduce using rule 8 (statement_list -> empty .)
    IF              reduce using rule 8 (statement_list -> empty .)
    WHILE           reduce using rule 8 (statement_list -> empty .)
    DO              reduce using rule 8 (statement_list -> empty .)
    FOR             reduce using rule 8 (statement_list -> empty .)
    CONST           reduce using rule 8 (statement_list -> empty .)
    ID              reduce using rule 8 (statement_list -> empty .)
    INT             reduce using rule 8 (statement_list -> empty .)
    BOOLEAN         reduce using rule 8 (statement_list -> empty .)
    STRING          reduce using rule 8 (statement_list -> empty .)
    DOUBLE          reduce using rule 8 (statement_list -> empty .)
    S_SEMI_COL      shift and go to state 8

  ! S_SEMI_COL      [ reduce using rule 8 (statement_list -> empty .) ]

    semicolon                      shift and go to state 62

state 39

    (25) iteration_statement -> WHILE . conditional_expression block_statement_list
    (30) conditional_expression -> . S_LPAREN logical_expression S_RPAREN

    S_LPAREN        shift and go to state 56

    conditional_expression         shift and go to state 63

state 40

    (23) selection_statement -> selection_statement ELSE . IF conditional_expression block_statement_list
    (24) selection_statement -> selection_statement ELSE . block_statement_list
    (29) block_statement_list -> . S_LCURLY_BRACE statement_list S_RCURLY_BRACE

    IF              shift and go to state 64
    S_LCURLY_BRACE  shift and go to state 47

    block_statement_list           shift and go to state 65

state 41

    (27) iteration_statement -> FOR S_LPAREN . declaration_expression S_SEMI_COL logical_expression S_SEMI_COL ID OP_ARITH_INCREMENT S_RPAREN block_statement_list
    (28) iteration_statement -> FOR S_LPAREN . declaration_expression logical_expression ID OP_ARITH_DECREMENT S_RPAREN block_statement_list
    (19) declaration_expression -> . assignment_expression
    (20) declaration_expression -> . type_specifier declaration_expression
    (21) declaration_expression -> . CONST type_specifier declaration_expression
    (31) assignment_expression -> . variable_expression
    (32) assignment_expression -> . assignment_expression OP_ASSIGN_SIMPLE logical_expression
    (33) assignment_expression -> . assignment_expression OP_ASSIGN_MULT logical_expression
    (34) assignment_expression -> . assignment_expression OP_ASSIGN_DIV logical_expression
    (35) assignment_expression -> . assignment_expression OP_ASSIGN_ADD logical_expression
    (36) assignment_expression -> . assignment_expression OP_ASSIGN_SUBTRACT logical_expression
    (37) assignment_expression -> . assignment_expression OP_ASSIGN_SIMPLE input_expression
    (38) assignment_expression -> . assignment_expression OP_ASSIGN_MULT input_expression
    (39) assignment_expression -> . assignment_expression OP_ASSIGN_DIV input_expression
    (40) assignment_expression -> . assignment_expression OP_ASSIGN_ADD input_expression
    (41) assignment_expression -> . assignment_expression OP_ASSIGN_SUBTRACT input_expression
    (52) type_specifier -> . INT
    (53) type_specifier -> . BOOLEAN
    (54) type_specifier -> . STRING
    (55) type_specifier -> . DOUBLE
    (77) variable_expression -> . ID
    (78) variable_expression -> . CONST

    CONST           shift and go to state 22
    INT             shift and go to state 33
    BOOLEAN         shift and go to state 18
    STRING          shift and go to state 31
    DOUBLE          shift and go to state 24
    ID              shift and go to state 59

    type_specifier                 shift and go to state 36
    assignment_expression          shift and go to state 28
    declaration_expression         shift and go to state 66
    variable_expression            shift and go to state 21

state 42

    (21) declaration_expression -> CONST type_specifier . declaration_expression
    (19) declaration_expression -> . assignment_expression
    (20) declaration_expression -> . type_specifier declaration_expression
    (21) declaration_expression -> . CONST type_specifier declaration_expression
    (31) assignment_expression -> . variable_expression
    (32) assignment_expression -> . assignment_expression OP_ASSIGN_SIMPLE logical_expression
    (33) assignment_expression -> . assignment_expression OP_ASSIGN_MULT logical_expression
    (34) assignment_expression -> . assignment_expression OP_ASSIGN_DIV logical_expression
    (35) assignment_expression -> . assignment_expression OP_ASSIGN_ADD logical_expression
    (36) assignment_expression -> . assignment_expression OP_ASSIGN_SUBTRACT logical_expression
    (37) assignment_expression -> . assignment_expression OP_ASSIGN_SIMPLE input_expression
    (38) assignment_expression -> . assignment_expression OP_ASSIGN_MULT input_expression
    (39) assignment_expression -> . assignment_expression OP_ASSIGN_DIV input_expression
    (40) assignment_expression -> . assignment_expression OP_ASSIGN_ADD input_expression
    (41) assignment_expression -> . assignment_expression OP_ASSIGN_SUBTRACT input_expression
    (52) type_specifier -> . INT
    (53) type_specifier -> . BOOLEAN
    (54) type_specifier -> . STRING
    (55) type_specifier -> . DOUBLE
    (77) variable_expression -> . ID
    (78) variable_expression -> . CONST

    CONST           shift and go to state 22
    INT             shift and go to state 33
    BOOLEAN         shift and go to state 18
    STRING          shift and go to state 31
    DOUBLE          shift and go to state 24
    ID              shift and go to state 59

    type_specifier                 shift and go to state 36
    assignment_expression          shift and go to state 28
    declaration_expression         shift and go to state 67
    variable_expression            shift and go to state 21

state 43

    (7) main -> VOID MAIN S_LPAREN S_RPAREN S_LCURLY_BRACE statement_list S_RCURLY_BRACE .

    $end            reduce using rule 7 (main -> VOID MAIN S_LPAREN S_RPAREN S_LCURLY_BRACE statement_list S_RCURLY_BRACE .)


state 44

    (10) statement_list -> statement_list statement .

    S_RCURLY_BRACE  reduce using rule 10 (statement_list -> statement_list statement .)
    IF              reduce using rule 10 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 10 (statement_list -> statement_list statement .)
    DO              reduce using rule 10 (statement_list -> statement_list statement .)
    FOR             reduce using rule 10 (statement_list -> statement_list statement .)
    CONST           reduce using rule 10 (statement_list -> statement_list statement .)
    ID              reduce using rule 10 (statement_list -> statement_list statement .)
    INT             reduce using rule 10 (statement_list -> statement_list statement .)
    BOOLEAN         reduce using rule 10 (statement_list -> statement_list statement .)
    STRING          reduce using rule 10 (statement_list -> statement_list statement .)
    DOUBLE          reduce using rule 10 (statement_list -> statement_list statement .)
    S_SEMI_COL      reduce using rule 10 (statement_list -> statement_list statement .)


state 45

    (15) expression_statement -> empty . semicolon
    (81) semicolon -> . S_SEMI_COL

    S_SEMI_COL      shift and go to state 8

    semicolon                      shift and go to state 62

state 46

    (26) iteration_statement -> DO block_statement_list . WHILE conditional_expression

    WHILE           shift and go to state 68


state 47

    (29) block_statement_list -> S_LCURLY_BRACE . statement_list S_RCURLY_BRACE
    (8) statement_list -> . empty
    (9) statement_list -> . statement
    (10) statement_list -> . statement_list statement
    (82) empty -> .
    (11) statement -> . expression_statement
    (12) statement -> . selection_statement
    (13) statement -> . iteration_statement
    (14) expression_statement -> . declaration_expression semicolon
    (15) expression_statement -> . empty semicolon
    (16) expression_statement -> . input_expression semicolon
    (17) expression_statement -> . output_expression semicolon
    (22) selection_statement -> . IF conditional_expression block_statement_list
    (23) selection_statement -> . selection_statement ELSE IF conditional_expression block_statement_list
    (24) selection_statement -> . selection_statement ELSE block_statement_list
    (25) iteration_statement -> . WHILE conditional_expression block_statement_list
    (26) iteration_statement -> . DO block_statement_list WHILE conditional_expression
    (27) iteration_statement -> . FOR S_LPAREN declaration_expression S_SEMI_COL logical_expression S_SEMI_COL ID OP_ARITH_INCREMENT S_RPAREN block_statement_list
    (28) iteration_statement -> . FOR S_LPAREN declaration_expression logical_expression ID OP_ARITH_DECREMENT S_RPAREN block_statement_list
    (19) declaration_expression -> . assignment_expression
    (20) declaration_expression -> . type_specifier declaration_expression
    (21) declaration_expression -> . CONST type_specifier declaration_expression
    (50) input_expression -> . ID OP_DOT ID S_LPAREN S_RPAREN
    (51) output_expression -> . ID conditional_expression
    (31) assignment_expression -> . variable_expression
    (32) assignment_expression -> . assignment_expression OP_ASSIGN_SIMPLE logical_expression
    (33) assignment_expression -> . assignment_expression OP_ASSIGN_MULT logical_expression
    (34) assignment_expression -> . assignment_expression OP_ASSIGN_DIV logical_expression
    (35) assignment_expression -> . assignment_expression OP_ASSIGN_ADD logical_expression
    (36) assignment_expression -> . assignment_expression OP_ASSIGN_SUBTRACT logical_expression
    (37) assignment_expression -> . assignment_expression OP_ASSIGN_SIMPLE input_expression
    (38) assignment_expression -> . assignment_expression OP_ASSIGN_MULT input_expression
    (39) assignment_expression -> . assignment_expression OP_ASSIGN_DIV input_expression
    (40) assignment_expression -> . assignment_expression OP_ASSIGN_ADD input_expression
    (41) assignment_expression -> . assignment_expression OP_ASSIGN_SUBTRACT input_expression
    (52) type_specifier -> . INT
    (53) type_specifier -> . BOOLEAN
    (54) type_specifier -> . STRING
    (55) type_specifier -> . DOUBLE
    (77) variable_expression -> . ID
    (78) variable_expression -> . CONST

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    S_SEMI_COL      reduce using rule 82 (empty -> .)
    S_RCURLY_BRACE  reduce using rule 82 (empty -> .)
    IF              shift and go to state 34
    WHILE           shift and go to state 39
    DO              shift and go to state 25
    FOR             shift and go to state 20
    CONST           shift and go to state 22
    ID              shift and go to state 32
    INT             shift and go to state 33
    BOOLEAN         shift and go to state 18
    STRING          shift and go to state 31
    DOUBLE          shift and go to state 24

  ! IF              [ reduce using rule 82 (empty -> .) ]
  ! WHILE           [ reduce using rule 82 (empty -> .) ]
  ! DO              [ reduce using rule 82 (empty -> .) ]
  ! FOR             [ reduce using rule 82 (empty -> .) ]
  ! CONST           [ reduce using rule 82 (empty -> .) ]
  ! ID              [ reduce using rule 82 (empty -> .) ]
  ! INT             [ reduce using rule 82 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 82 (empty -> .) ]
  ! STRING          [ reduce using rule 82 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 82 (empty -> .) ]

    type_specifier                 shift and go to state 36
    selection_statement            shift and go to state 19
    variable_expression            shift and go to state 21
    assignment_expression          shift and go to state 28
    statement_list                 shift and go to state 69
    expression_statement           shift and go to state 26
    iteration_statement            shift and go to state 27
    empty                          shift and go to state 38
    statement                      shift and go to state 29
    input_expression               shift and go to state 37
    output_expression              shift and go to state 30
    declaration_expression         shift and go to state 35

state 48

    (33) assignment_expression -> assignment_expression OP_ASSIGN_MULT . logical_expression
    (38) assignment_expression -> assignment_expression OP_ASSIGN_MULT . input_expression
    (42) logical_expression -> . equality_expression
    (43) logical_expression -> . logical_expression logical_operators equality_expression
    (50) input_expression -> . ID OP_DOT ID S_LPAREN S_RPAREN
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression equality_operators relational_expression
    (46) relational_expression -> . math_expression
    (47) relational_expression -> . relational_expression relational_operators math_expression
    (48) math_expression -> . primary_expression
    (49) math_expression -> . math_expression math_operators primary_expression
    (72) primary_expression -> . variable_expression
    (73) primary_expression -> . boolean_expression
    (74) primary_expression -> . LIT_INT
    (75) primary_expression -> . LIT_REAL
    (76) primary_expression -> . LIT_STRING
    (77) variable_expression -> . ID
    (78) variable_expression -> . CONST
    (79) boolean_expression -> . TRUE
    (80) boolean_expression -> . FALSE

    ID              shift and go to state 76
    LIT_INT         shift and go to state 78
    LIT_REAL        shift and go to state 84
    LIT_STRING      shift and go to state 82
    CONST           shift and go to state 77
    TRUE            shift and go to state 75
    FALSE           shift and go to state 70

    variable_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    math_expression                shift and go to state 79
    input_expression               shift and go to state 80
    equality_expression            shift and go to state 73
    primary_expression             shift and go to state 83
    boolean_expression             shift and go to state 74
    logical_expression             shift and go to state 81

state 49

    (35) assignment_expression -> assignment_expression OP_ASSIGN_ADD . logical_expression
    (40) assignment_expression -> assignment_expression OP_ASSIGN_ADD . input_expression
    (42) logical_expression -> . equality_expression
    (43) logical_expression -> . logical_expression logical_operators equality_expression
    (50) input_expression -> . ID OP_DOT ID S_LPAREN S_RPAREN
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression equality_operators relational_expression
    (46) relational_expression -> . math_expression
    (47) relational_expression -> . relational_expression relational_operators math_expression
    (48) math_expression -> . primary_expression
    (49) math_expression -> . math_expression math_operators primary_expression
    (72) primary_expression -> . variable_expression
    (73) primary_expression -> . boolean_expression
    (74) primary_expression -> . LIT_INT
    (75) primary_expression -> . LIT_REAL
    (76) primary_expression -> . LIT_STRING
    (77) variable_expression -> . ID
    (78) variable_expression -> . CONST
    (79) boolean_expression -> . TRUE
    (80) boolean_expression -> . FALSE

    ID              shift and go to state 76
    LIT_INT         shift and go to state 78
    LIT_REAL        shift and go to state 84
    LIT_STRING      shift and go to state 82
    CONST           shift and go to state 77
    TRUE            shift and go to state 75
    FALSE           shift and go to state 70

    variable_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    math_expression                shift and go to state 79
    input_expression               shift and go to state 85
    equality_expression            shift and go to state 73
    primary_expression             shift and go to state 83
    boolean_expression             shift and go to state 74
    logical_expression             shift and go to state 86

state 50

    (32) assignment_expression -> assignment_expression OP_ASSIGN_SIMPLE . logical_expression
    (37) assignment_expression -> assignment_expression OP_ASSIGN_SIMPLE . input_expression
    (42) logical_expression -> . equality_expression
    (43) logical_expression -> . logical_expression logical_operators equality_expression
    (50) input_expression -> . ID OP_DOT ID S_LPAREN S_RPAREN
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression equality_operators relational_expression
    (46) relational_expression -> . math_expression
    (47) relational_expression -> . relational_expression relational_operators math_expression
    (48) math_expression -> . primary_expression
    (49) math_expression -> . math_expression math_operators primary_expression
    (72) primary_expression -> . variable_expression
    (73) primary_expression -> . boolean_expression
    (74) primary_expression -> . LIT_INT
    (75) primary_expression -> . LIT_REAL
    (76) primary_expression -> . LIT_STRING
    (77) variable_expression -> . ID
    (78) variable_expression -> . CONST
    (79) boolean_expression -> . TRUE
    (80) boolean_expression -> . FALSE

    ID              shift and go to state 76
    LIT_INT         shift and go to state 78
    LIT_REAL        shift and go to state 84
    LIT_STRING      shift and go to state 82
    CONST           shift and go to state 77
    TRUE            shift and go to state 75
    FALSE           shift and go to state 70

    variable_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    math_expression                shift and go to state 79
    input_expression               shift and go to state 87
    equality_expression            shift and go to state 73
    primary_expression             shift and go to state 83
    boolean_expression             shift and go to state 74
    logical_expression             shift and go to state 88

state 51

    (36) assignment_expression -> assignment_expression OP_ASSIGN_SUBTRACT . logical_expression
    (41) assignment_expression -> assignment_expression OP_ASSIGN_SUBTRACT . input_expression
    (42) logical_expression -> . equality_expression
    (43) logical_expression -> . logical_expression logical_operators equality_expression
    (50) input_expression -> . ID OP_DOT ID S_LPAREN S_RPAREN
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression equality_operators relational_expression
    (46) relational_expression -> . math_expression
    (47) relational_expression -> . relational_expression relational_operators math_expression
    (48) math_expression -> . primary_expression
    (49) math_expression -> . math_expression math_operators primary_expression
    (72) primary_expression -> . variable_expression
    (73) primary_expression -> . boolean_expression
    (74) primary_expression -> . LIT_INT
    (75) primary_expression -> . LIT_REAL
    (76) primary_expression -> . LIT_STRING
    (77) variable_expression -> . ID
    (78) variable_expression -> . CONST
    (79) boolean_expression -> . TRUE
    (80) boolean_expression -> . FALSE

    ID              shift and go to state 76
    LIT_INT         shift and go to state 78
    LIT_REAL        shift and go to state 84
    LIT_STRING      shift and go to state 82
    CONST           shift and go to state 77
    TRUE            shift and go to state 75
    FALSE           shift and go to state 70

    variable_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    math_expression                shift and go to state 79
    input_expression               shift and go to state 89
    equality_expression            shift and go to state 73
    primary_expression             shift and go to state 83
    boolean_expression             shift and go to state 74
    logical_expression             shift and go to state 90

state 52

    (34) assignment_expression -> assignment_expression OP_ASSIGN_DIV . logical_expression
    (39) assignment_expression -> assignment_expression OP_ASSIGN_DIV . input_expression
    (42) logical_expression -> . equality_expression
    (43) logical_expression -> . logical_expression logical_operators equality_expression
    (50) input_expression -> . ID OP_DOT ID S_LPAREN S_RPAREN
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression equality_operators relational_expression
    (46) relational_expression -> . math_expression
    (47) relational_expression -> . relational_expression relational_operators math_expression
    (48) math_expression -> . primary_expression
    (49) math_expression -> . math_expression math_operators primary_expression
    (72) primary_expression -> . variable_expression
    (73) primary_expression -> . boolean_expression
    (74) primary_expression -> . LIT_INT
    (75) primary_expression -> . LIT_REAL
    (76) primary_expression -> . LIT_STRING
    (77) variable_expression -> . ID
    (78) variable_expression -> . CONST
    (79) boolean_expression -> . TRUE
    (80) boolean_expression -> . FALSE

    ID              shift and go to state 76
    LIT_INT         shift and go to state 78
    LIT_REAL        shift and go to state 84
    LIT_STRING      shift and go to state 82
    CONST           shift and go to state 77
    TRUE            shift and go to state 75
    FALSE           shift and go to state 70

    variable_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    math_expression                shift and go to state 79
    input_expression               shift and go to state 91
    equality_expression            shift and go to state 73
    primary_expression             shift and go to state 83
    boolean_expression             shift and go to state 74
    logical_expression             shift and go to state 92

state 53

    (17) expression_statement -> output_expression semicolon .

    S_RCURLY_BRACE  reduce using rule 17 (expression_statement -> output_expression semicolon .)
    IF              reduce using rule 17 (expression_statement -> output_expression semicolon .)
    WHILE           reduce using rule 17 (expression_statement -> output_expression semicolon .)
    DO              reduce using rule 17 (expression_statement -> output_expression semicolon .)
    FOR             reduce using rule 17 (expression_statement -> output_expression semicolon .)
    CONST           reduce using rule 17 (expression_statement -> output_expression semicolon .)
    ID              reduce using rule 17 (expression_statement -> output_expression semicolon .)
    INT             reduce using rule 17 (expression_statement -> output_expression semicolon .)
    BOOLEAN         reduce using rule 17 (expression_statement -> output_expression semicolon .)
    STRING          reduce using rule 17 (expression_statement -> output_expression semicolon .)
    DOUBLE          reduce using rule 17 (expression_statement -> output_expression semicolon .)
    S_SEMI_COL      reduce using rule 17 (expression_statement -> output_expression semicolon .)


state 54

    (50) input_expression -> ID OP_DOT . ID S_LPAREN S_RPAREN

    ID              shift and go to state 93


state 55

    (51) output_expression -> ID conditional_expression .

    S_SEMI_COL      reduce using rule 51 (output_expression -> ID conditional_expression .)


state 56

    (30) conditional_expression -> S_LPAREN . logical_expression S_RPAREN
    (42) logical_expression -> . equality_expression
    (43) logical_expression -> . logical_expression logical_operators equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression equality_operators relational_expression
    (46) relational_expression -> . math_expression
    (47) relational_expression -> . relational_expression relational_operators math_expression
    (48) math_expression -> . primary_expression
    (49) math_expression -> . math_expression math_operators primary_expression
    (72) primary_expression -> . variable_expression
    (73) primary_expression -> . boolean_expression
    (74) primary_expression -> . LIT_INT
    (75) primary_expression -> . LIT_REAL
    (76) primary_expression -> . LIT_STRING
    (77) variable_expression -> . ID
    (78) variable_expression -> . CONST
    (79) boolean_expression -> . TRUE
    (80) boolean_expression -> . FALSE

    LIT_INT         shift and go to state 78
    LIT_REAL        shift and go to state 84
    LIT_STRING      shift and go to state 82
    ID              shift and go to state 59
    CONST           shift and go to state 77
    TRUE            shift and go to state 75
    FALSE           shift and go to state 70

    relational_expression          shift and go to state 72
    math_expression                shift and go to state 79
    logical_expression             shift and go to state 94
    variable_expression            shift and go to state 71
    primary_expression             shift and go to state 83
    boolean_expression             shift and go to state 74
    equality_expression            shift and go to state 73

state 57

    (22) selection_statement -> IF conditional_expression . block_statement_list
    (29) block_statement_list -> . S_LCURLY_BRACE statement_list S_RCURLY_BRACE

    S_LCURLY_BRACE  shift and go to state 47

    block_statement_list           shift and go to state 95

state 58

    (14) expression_statement -> declaration_expression semicolon .

    S_RCURLY_BRACE  reduce using rule 14 (expression_statement -> declaration_expression semicolon .)
    IF              reduce using rule 14 (expression_statement -> declaration_expression semicolon .)
    WHILE           reduce using rule 14 (expression_statement -> declaration_expression semicolon .)
    DO              reduce using rule 14 (expression_statement -> declaration_expression semicolon .)
    FOR             reduce using rule 14 (expression_statement -> declaration_expression semicolon .)
    CONST           reduce using rule 14 (expression_statement -> declaration_expression semicolon .)
    ID              reduce using rule 14 (expression_statement -> declaration_expression semicolon .)
    INT             reduce using rule 14 (expression_statement -> declaration_expression semicolon .)
    BOOLEAN         reduce using rule 14 (expression_statement -> declaration_expression semicolon .)
    STRING          reduce using rule 14 (expression_statement -> declaration_expression semicolon .)
    DOUBLE          reduce using rule 14 (expression_statement -> declaration_expression semicolon .)
    S_SEMI_COL      reduce using rule 14 (expression_statement -> declaration_expression semicolon .)


state 59

    (77) variable_expression -> ID .

    OP_ASSIGN_SIMPLE reduce using rule 77 (variable_expression -> ID .)
    OP_ASSIGN_MULT  reduce using rule 77 (variable_expression -> ID .)
    OP_ASSIGN_DIV   reduce using rule 77 (variable_expression -> ID .)
    OP_ASSIGN_ADD   reduce using rule 77 (variable_expression -> ID .)
    OP_ASSIGN_SUBTRACT reduce using rule 77 (variable_expression -> ID .)
    S_SEMI_COL      reduce using rule 77 (variable_expression -> ID .)
    LIT_INT         reduce using rule 77 (variable_expression -> ID .)
    LIT_REAL        reduce using rule 77 (variable_expression -> ID .)
    LIT_STRING      reduce using rule 77 (variable_expression -> ID .)
    ID              reduce using rule 77 (variable_expression -> ID .)
    CONST           reduce using rule 77 (variable_expression -> ID .)
    TRUE            reduce using rule 77 (variable_expression -> ID .)
    FALSE           reduce using rule 77 (variable_expression -> ID .)
    OP_ARITH_ADD    reduce using rule 77 (variable_expression -> ID .)
    OP_ARITH_SUBTRACT reduce using rule 77 (variable_expression -> ID .)
    OP_ARITH_MULTIPLY reduce using rule 77 (variable_expression -> ID .)
    OP_ARITH_DIVIDE reduce using rule 77 (variable_expression -> ID .)
    OP_ARITH_INTEGER_DIVIDE reduce using rule 77 (variable_expression -> ID .)
    OP_ARITH_MODULE reduce using rule 77 (variable_expression -> ID .)
    OP_ARITH_INCREMENT reduce using rule 77 (variable_expression -> ID .)
    OP_ARITH_DECREMENT reduce using rule 77 (variable_expression -> ID .)
    OP_EQUALITY_LESSER_THAN reduce using rule 77 (variable_expression -> ID .)
    OP_EQUALITY_GREATER_THAN reduce using rule 77 (variable_expression -> ID .)
    OP_EQUALITY_LESSER_OR_EQUAL_THAN reduce using rule 77 (variable_expression -> ID .)
    OP_EQUALITY_GREATER_OR_EQUAL_THAN reduce using rule 77 (variable_expression -> ID .)
    OP_EQUALITY_EQUAL reduce using rule 77 (variable_expression -> ID .)
    OP_EQUALITY_NOT_EQUAL reduce using rule 77 (variable_expression -> ID .)
    OP_LOGIC_AND    reduce using rule 77 (variable_expression -> ID .)
    OP_LOGIC_OR     reduce using rule 77 (variable_expression -> ID .)
    S_RPAREN        reduce using rule 77 (variable_expression -> ID .)


state 60

    (20) declaration_expression -> type_specifier declaration_expression .

    S_SEMI_COL      reduce using rule 20 (declaration_expression -> type_specifier declaration_expression .)
    LIT_INT         reduce using rule 20 (declaration_expression -> type_specifier declaration_expression .)
    LIT_REAL        reduce using rule 20 (declaration_expression -> type_specifier declaration_expression .)
    LIT_STRING      reduce using rule 20 (declaration_expression -> type_specifier declaration_expression .)
    ID              reduce using rule 20 (declaration_expression -> type_specifier declaration_expression .)
    CONST           reduce using rule 20 (declaration_expression -> type_specifier declaration_expression .)
    TRUE            reduce using rule 20 (declaration_expression -> type_specifier declaration_expression .)
    FALSE           reduce using rule 20 (declaration_expression -> type_specifier declaration_expression .)


state 61

    (16) expression_statement -> input_expression semicolon .

    S_RCURLY_BRACE  reduce using rule 16 (expression_statement -> input_expression semicolon .)
    IF              reduce using rule 16 (expression_statement -> input_expression semicolon .)
    WHILE           reduce using rule 16 (expression_statement -> input_expression semicolon .)
    DO              reduce using rule 16 (expression_statement -> input_expression semicolon .)
    FOR             reduce using rule 16 (expression_statement -> input_expression semicolon .)
    CONST           reduce using rule 16 (expression_statement -> input_expression semicolon .)
    ID              reduce using rule 16 (expression_statement -> input_expression semicolon .)
    INT             reduce using rule 16 (expression_statement -> input_expression semicolon .)
    BOOLEAN         reduce using rule 16 (expression_statement -> input_expression semicolon .)
    STRING          reduce using rule 16 (expression_statement -> input_expression semicolon .)
    DOUBLE          reduce using rule 16 (expression_statement -> input_expression semicolon .)
    S_SEMI_COL      reduce using rule 16 (expression_statement -> input_expression semicolon .)


state 62

    (15) expression_statement -> empty semicolon .

    S_RCURLY_BRACE  reduce using rule 15 (expression_statement -> empty semicolon .)
    IF              reduce using rule 15 (expression_statement -> empty semicolon .)
    WHILE           reduce using rule 15 (expression_statement -> empty semicolon .)
    DO              reduce using rule 15 (expression_statement -> empty semicolon .)
    FOR             reduce using rule 15 (expression_statement -> empty semicolon .)
    CONST           reduce using rule 15 (expression_statement -> empty semicolon .)
    ID              reduce using rule 15 (expression_statement -> empty semicolon .)
    INT             reduce using rule 15 (expression_statement -> empty semicolon .)
    BOOLEAN         reduce using rule 15 (expression_statement -> empty semicolon .)
    STRING          reduce using rule 15 (expression_statement -> empty semicolon .)
    DOUBLE          reduce using rule 15 (expression_statement -> empty semicolon .)
    S_SEMI_COL      reduce using rule 15 (expression_statement -> empty semicolon .)


state 63

    (25) iteration_statement -> WHILE conditional_expression . block_statement_list
    (29) block_statement_list -> . S_LCURLY_BRACE statement_list S_RCURLY_BRACE

    S_LCURLY_BRACE  shift and go to state 47

    block_statement_list           shift and go to state 96

state 64

    (23) selection_statement -> selection_statement ELSE IF . conditional_expression block_statement_list
    (30) conditional_expression -> . S_LPAREN logical_expression S_RPAREN

    S_LPAREN        shift and go to state 56

    conditional_expression         shift and go to state 97

state 65

    (24) selection_statement -> selection_statement ELSE block_statement_list .

    ELSE            reduce using rule 24 (selection_statement -> selection_statement ELSE block_statement_list .)
    S_RCURLY_BRACE  reduce using rule 24 (selection_statement -> selection_statement ELSE block_statement_list .)
    IF              reduce using rule 24 (selection_statement -> selection_statement ELSE block_statement_list .)
    WHILE           reduce using rule 24 (selection_statement -> selection_statement ELSE block_statement_list .)
    DO              reduce using rule 24 (selection_statement -> selection_statement ELSE block_statement_list .)
    FOR             reduce using rule 24 (selection_statement -> selection_statement ELSE block_statement_list .)
    CONST           reduce using rule 24 (selection_statement -> selection_statement ELSE block_statement_list .)
    ID              reduce using rule 24 (selection_statement -> selection_statement ELSE block_statement_list .)
    INT             reduce using rule 24 (selection_statement -> selection_statement ELSE block_statement_list .)
    BOOLEAN         reduce using rule 24 (selection_statement -> selection_statement ELSE block_statement_list .)
    STRING          reduce using rule 24 (selection_statement -> selection_statement ELSE block_statement_list .)
    DOUBLE          reduce using rule 24 (selection_statement -> selection_statement ELSE block_statement_list .)
    S_SEMI_COL      reduce using rule 24 (selection_statement -> selection_statement ELSE block_statement_list .)


state 66

    (27) iteration_statement -> FOR S_LPAREN declaration_expression . S_SEMI_COL logical_expression S_SEMI_COL ID OP_ARITH_INCREMENT S_RPAREN block_statement_list
    (28) iteration_statement -> FOR S_LPAREN declaration_expression . logical_expression ID OP_ARITH_DECREMENT S_RPAREN block_statement_list
    (42) logical_expression -> . equality_expression
    (43) logical_expression -> . logical_expression logical_operators equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression equality_operators relational_expression
    (46) relational_expression -> . math_expression
    (47) relational_expression -> . relational_expression relational_operators math_expression
    (48) math_expression -> . primary_expression
    (49) math_expression -> . math_expression math_operators primary_expression
    (72) primary_expression -> . variable_expression
    (73) primary_expression -> . boolean_expression
    (74) primary_expression -> . LIT_INT
    (75) primary_expression -> . LIT_REAL
    (76) primary_expression -> . LIT_STRING
    (77) variable_expression -> . ID
    (78) variable_expression -> . CONST
    (79) boolean_expression -> . TRUE
    (80) boolean_expression -> . FALSE

    S_SEMI_COL      shift and go to state 99
    LIT_INT         shift and go to state 78
    LIT_REAL        shift and go to state 84
    LIT_STRING      shift and go to state 82
    ID              shift and go to state 59
    CONST           shift and go to state 77
    TRUE            shift and go to state 75
    FALSE           shift and go to state 70

    variable_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    math_expression                shift and go to state 79
    equality_expression            shift and go to state 73
    primary_expression             shift and go to state 83
    boolean_expression             shift and go to state 74
    logical_expression             shift and go to state 98

state 67

    (21) declaration_expression -> CONST type_specifier declaration_expression .

    S_SEMI_COL      reduce using rule 21 (declaration_expression -> CONST type_specifier declaration_expression .)
    LIT_INT         reduce using rule 21 (declaration_expression -> CONST type_specifier declaration_expression .)
    LIT_REAL        reduce using rule 21 (declaration_expression -> CONST type_specifier declaration_expression .)
    LIT_STRING      reduce using rule 21 (declaration_expression -> CONST type_specifier declaration_expression .)
    ID              reduce using rule 21 (declaration_expression -> CONST type_specifier declaration_expression .)
    CONST           reduce using rule 21 (declaration_expression -> CONST type_specifier declaration_expression .)
    TRUE            reduce using rule 21 (declaration_expression -> CONST type_specifier declaration_expression .)
    FALSE           reduce using rule 21 (declaration_expression -> CONST type_specifier declaration_expression .)


state 68

    (26) iteration_statement -> DO block_statement_list WHILE . conditional_expression
    (30) conditional_expression -> . S_LPAREN logical_expression S_RPAREN

    S_LPAREN        shift and go to state 56

    conditional_expression         shift and go to state 100

state 69

    (29) block_statement_list -> S_LCURLY_BRACE statement_list . S_RCURLY_BRACE
    (10) statement_list -> statement_list . statement
    (11) statement -> . expression_statement
    (12) statement -> . selection_statement
    (13) statement -> . iteration_statement
    (14) expression_statement -> . declaration_expression semicolon
    (15) expression_statement -> . empty semicolon
    (16) expression_statement -> . input_expression semicolon
    (17) expression_statement -> . output_expression semicolon
    (22) selection_statement -> . IF conditional_expression block_statement_list
    (23) selection_statement -> . selection_statement ELSE IF conditional_expression block_statement_list
    (24) selection_statement -> . selection_statement ELSE block_statement_list
    (25) iteration_statement -> . WHILE conditional_expression block_statement_list
    (26) iteration_statement -> . DO block_statement_list WHILE conditional_expression
    (27) iteration_statement -> . FOR S_LPAREN declaration_expression S_SEMI_COL logical_expression S_SEMI_COL ID OP_ARITH_INCREMENT S_RPAREN block_statement_list
    (28) iteration_statement -> . FOR S_LPAREN declaration_expression logical_expression ID OP_ARITH_DECREMENT S_RPAREN block_statement_list
    (19) declaration_expression -> . assignment_expression
    (20) declaration_expression -> . type_specifier declaration_expression
    (21) declaration_expression -> . CONST type_specifier declaration_expression
    (82) empty -> .
    (50) input_expression -> . ID OP_DOT ID S_LPAREN S_RPAREN
    (51) output_expression -> . ID conditional_expression
    (31) assignment_expression -> . variable_expression
    (32) assignment_expression -> . assignment_expression OP_ASSIGN_SIMPLE logical_expression
    (33) assignment_expression -> . assignment_expression OP_ASSIGN_MULT logical_expression
    (34) assignment_expression -> . assignment_expression OP_ASSIGN_DIV logical_expression
    (35) assignment_expression -> . assignment_expression OP_ASSIGN_ADD logical_expression
    (36) assignment_expression -> . assignment_expression OP_ASSIGN_SUBTRACT logical_expression
    (37) assignment_expression -> . assignment_expression OP_ASSIGN_SIMPLE input_expression
    (38) assignment_expression -> . assignment_expression OP_ASSIGN_MULT input_expression
    (39) assignment_expression -> . assignment_expression OP_ASSIGN_DIV input_expression
    (40) assignment_expression -> . assignment_expression OP_ASSIGN_ADD input_expression
    (41) assignment_expression -> . assignment_expression OP_ASSIGN_SUBTRACT input_expression
    (52) type_specifier -> . INT
    (53) type_specifier -> . BOOLEAN
    (54) type_specifier -> . STRING
    (55) type_specifier -> . DOUBLE
    (77) variable_expression -> . ID
    (78) variable_expression -> . CONST

    S_RCURLY_BRACE  shift and go to state 101
    IF              shift and go to state 34
    WHILE           shift and go to state 39
    DO              shift and go to state 25
    FOR             shift and go to state 20
    CONST           shift and go to state 22
    S_SEMI_COL      reduce using rule 82 (empty -> .)
    ID              shift and go to state 32
    INT             shift and go to state 33
    BOOLEAN         shift and go to state 18
    STRING          shift and go to state 31
    DOUBLE          shift and go to state 24

    type_specifier                 shift and go to state 36
    selection_statement            shift and go to state 19
    variable_expression            shift and go to state 21
    assignment_expression          shift and go to state 28
    expression_statement           shift and go to state 26
    iteration_statement            shift and go to state 27
    empty                          shift and go to state 45
    statement                      shift and go to state 44
    input_expression               shift and go to state 37
    output_expression              shift and go to state 30
    declaration_expression         shift and go to state 35

state 70

    (80) boolean_expression -> FALSE .

    OP_ARITH_ADD    reduce using rule 80 (boolean_expression -> FALSE .)
    OP_ARITH_SUBTRACT reduce using rule 80 (boolean_expression -> FALSE .)
    OP_ARITH_MULTIPLY reduce using rule 80 (boolean_expression -> FALSE .)
    OP_ARITH_DIVIDE reduce using rule 80 (boolean_expression -> FALSE .)
    OP_ARITH_INTEGER_DIVIDE reduce using rule 80 (boolean_expression -> FALSE .)
    OP_ARITH_MODULE reduce using rule 80 (boolean_expression -> FALSE .)
    OP_ARITH_INCREMENT reduce using rule 80 (boolean_expression -> FALSE .)
    OP_ARITH_DECREMENT reduce using rule 80 (boolean_expression -> FALSE .)
    OP_EQUALITY_LESSER_THAN reduce using rule 80 (boolean_expression -> FALSE .)
    OP_EQUALITY_GREATER_THAN reduce using rule 80 (boolean_expression -> FALSE .)
    OP_EQUALITY_LESSER_OR_EQUAL_THAN reduce using rule 80 (boolean_expression -> FALSE .)
    OP_EQUALITY_GREATER_OR_EQUAL_THAN reduce using rule 80 (boolean_expression -> FALSE .)
    OP_EQUALITY_EQUAL reduce using rule 80 (boolean_expression -> FALSE .)
    OP_EQUALITY_NOT_EQUAL reduce using rule 80 (boolean_expression -> FALSE .)
    S_SEMI_COL      reduce using rule 80 (boolean_expression -> FALSE .)
    OP_LOGIC_AND    reduce using rule 80 (boolean_expression -> FALSE .)
    OP_LOGIC_OR     reduce using rule 80 (boolean_expression -> FALSE .)
    S_RPAREN        reduce using rule 80 (boolean_expression -> FALSE .)
    OP_ASSIGN_SIMPLE reduce using rule 80 (boolean_expression -> FALSE .)
    OP_ASSIGN_MULT  reduce using rule 80 (boolean_expression -> FALSE .)
    OP_ASSIGN_DIV   reduce using rule 80 (boolean_expression -> FALSE .)
    OP_ASSIGN_ADD   reduce using rule 80 (boolean_expression -> FALSE .)
    OP_ASSIGN_SUBTRACT reduce using rule 80 (boolean_expression -> FALSE .)
    LIT_INT         reduce using rule 80 (boolean_expression -> FALSE .)
    LIT_REAL        reduce using rule 80 (boolean_expression -> FALSE .)
    LIT_STRING      reduce using rule 80 (boolean_expression -> FALSE .)
    ID              reduce using rule 80 (boolean_expression -> FALSE .)
    CONST           reduce using rule 80 (boolean_expression -> FALSE .)
    TRUE            reduce using rule 80 (boolean_expression -> FALSE .)
    FALSE           reduce using rule 80 (boolean_expression -> FALSE .)


state 71

    (72) primary_expression -> variable_expression .

    OP_ARITH_ADD    reduce using rule 72 (primary_expression -> variable_expression .)
    OP_ARITH_SUBTRACT reduce using rule 72 (primary_expression -> variable_expression .)
    OP_ARITH_MULTIPLY reduce using rule 72 (primary_expression -> variable_expression .)
    OP_ARITH_DIVIDE reduce using rule 72 (primary_expression -> variable_expression .)
    OP_ARITH_INTEGER_DIVIDE reduce using rule 72 (primary_expression -> variable_expression .)
    OP_ARITH_MODULE reduce using rule 72 (primary_expression -> variable_expression .)
    OP_ARITH_INCREMENT reduce using rule 72 (primary_expression -> variable_expression .)
    OP_ARITH_DECREMENT reduce using rule 72 (primary_expression -> variable_expression .)
    OP_EQUALITY_LESSER_THAN reduce using rule 72 (primary_expression -> variable_expression .)
    OP_EQUALITY_GREATER_THAN reduce using rule 72 (primary_expression -> variable_expression .)
    OP_EQUALITY_LESSER_OR_EQUAL_THAN reduce using rule 72 (primary_expression -> variable_expression .)
    OP_EQUALITY_GREATER_OR_EQUAL_THAN reduce using rule 72 (primary_expression -> variable_expression .)
    OP_EQUALITY_EQUAL reduce using rule 72 (primary_expression -> variable_expression .)
    OP_EQUALITY_NOT_EQUAL reduce using rule 72 (primary_expression -> variable_expression .)
    OP_LOGIC_AND    reduce using rule 72 (primary_expression -> variable_expression .)
    OP_LOGIC_OR     reduce using rule 72 (primary_expression -> variable_expression .)
    OP_ASSIGN_SIMPLE reduce using rule 72 (primary_expression -> variable_expression .)
    OP_ASSIGN_MULT  reduce using rule 72 (primary_expression -> variable_expression .)
    OP_ASSIGN_DIV   reduce using rule 72 (primary_expression -> variable_expression .)
    OP_ASSIGN_ADD   reduce using rule 72 (primary_expression -> variable_expression .)
    OP_ASSIGN_SUBTRACT reduce using rule 72 (primary_expression -> variable_expression .)
    S_SEMI_COL      reduce using rule 72 (primary_expression -> variable_expression .)
    LIT_INT         reduce using rule 72 (primary_expression -> variable_expression .)
    LIT_REAL        reduce using rule 72 (primary_expression -> variable_expression .)
    LIT_STRING      reduce using rule 72 (primary_expression -> variable_expression .)
    ID              reduce using rule 72 (primary_expression -> variable_expression .)
    CONST           reduce using rule 72 (primary_expression -> variable_expression .)
    TRUE            reduce using rule 72 (primary_expression -> variable_expression .)
    FALSE           reduce using rule 72 (primary_expression -> variable_expression .)
    S_RPAREN        reduce using rule 72 (primary_expression -> variable_expression .)


state 72

    (44) equality_expression -> relational_expression .
    (47) relational_expression -> relational_expression . relational_operators math_expression
    (60) relational_operators -> . OP_EQUALITY_LESSER_THAN
    (61) relational_operators -> . OP_EQUALITY_GREATER_THAN
    (62) relational_operators -> . OP_EQUALITY_LESSER_OR_EQUAL_THAN
    (63) relational_operators -> . OP_EQUALITY_GREATER_OR_EQUAL_THAN

    OP_EQUALITY_EQUAL reduce using rule 44 (equality_expression -> relational_expression .)
    OP_EQUALITY_NOT_EQUAL reduce using rule 44 (equality_expression -> relational_expression .)
    ID              reduce using rule 44 (equality_expression -> relational_expression .)
    OP_LOGIC_AND    reduce using rule 44 (equality_expression -> relational_expression .)
    OP_LOGIC_OR     reduce using rule 44 (equality_expression -> relational_expression .)
    OP_ASSIGN_SIMPLE reduce using rule 44 (equality_expression -> relational_expression .)
    OP_ASSIGN_MULT  reduce using rule 44 (equality_expression -> relational_expression .)
    OP_ASSIGN_DIV   reduce using rule 44 (equality_expression -> relational_expression .)
    OP_ASSIGN_ADD   reduce using rule 44 (equality_expression -> relational_expression .)
    OP_ASSIGN_SUBTRACT reduce using rule 44 (equality_expression -> relational_expression .)
    S_SEMI_COL      reduce using rule 44 (equality_expression -> relational_expression .)
    LIT_INT         reduce using rule 44 (equality_expression -> relational_expression .)
    LIT_REAL        reduce using rule 44 (equality_expression -> relational_expression .)
    LIT_STRING      reduce using rule 44 (equality_expression -> relational_expression .)
    CONST           reduce using rule 44 (equality_expression -> relational_expression .)
    TRUE            reduce using rule 44 (equality_expression -> relational_expression .)
    FALSE           reduce using rule 44 (equality_expression -> relational_expression .)
    S_RPAREN        reduce using rule 44 (equality_expression -> relational_expression .)
    OP_EQUALITY_LESSER_THAN shift and go to state 102
    OP_EQUALITY_GREATER_THAN shift and go to state 106
    OP_EQUALITY_LESSER_OR_EQUAL_THAN shift and go to state 104
    OP_EQUALITY_GREATER_OR_EQUAL_THAN shift and go to state 103

    relational_operators           shift and go to state 105

state 73

    (42) logical_expression -> equality_expression .
    (45) equality_expression -> equality_expression . equality_operators relational_expression
    (58) equality_operators -> . OP_EQUALITY_EQUAL
    (59) equality_operators -> . OP_EQUALITY_NOT_EQUAL

    OP_LOGIC_AND    reduce using rule 42 (logical_expression -> equality_expression .)
    OP_LOGIC_OR     reduce using rule 42 (logical_expression -> equality_expression .)
    OP_ASSIGN_SIMPLE reduce using rule 42 (logical_expression -> equality_expression .)
    OP_ASSIGN_MULT  reduce using rule 42 (logical_expression -> equality_expression .)
    OP_ASSIGN_DIV   reduce using rule 42 (logical_expression -> equality_expression .)
    OP_ASSIGN_ADD   reduce using rule 42 (logical_expression -> equality_expression .)
    OP_ASSIGN_SUBTRACT reduce using rule 42 (logical_expression -> equality_expression .)
    S_SEMI_COL      reduce using rule 42 (logical_expression -> equality_expression .)
    LIT_INT         reduce using rule 42 (logical_expression -> equality_expression .)
    LIT_REAL        reduce using rule 42 (logical_expression -> equality_expression .)
    LIT_STRING      reduce using rule 42 (logical_expression -> equality_expression .)
    ID              reduce using rule 42 (logical_expression -> equality_expression .)
    CONST           reduce using rule 42 (logical_expression -> equality_expression .)
    TRUE            reduce using rule 42 (logical_expression -> equality_expression .)
    FALSE           reduce using rule 42 (logical_expression -> equality_expression .)
    S_RPAREN        reduce using rule 42 (logical_expression -> equality_expression .)
    OP_EQUALITY_EQUAL shift and go to state 108
    OP_EQUALITY_NOT_EQUAL shift and go to state 109

    equality_operators             shift and go to state 107

state 74

    (73) primary_expression -> boolean_expression .

    OP_ARITH_ADD    reduce using rule 73 (primary_expression -> boolean_expression .)
    OP_ARITH_SUBTRACT reduce using rule 73 (primary_expression -> boolean_expression .)
    OP_ARITH_MULTIPLY reduce using rule 73 (primary_expression -> boolean_expression .)
    OP_ARITH_DIVIDE reduce using rule 73 (primary_expression -> boolean_expression .)
    OP_ARITH_INTEGER_DIVIDE reduce using rule 73 (primary_expression -> boolean_expression .)
    OP_ARITH_MODULE reduce using rule 73 (primary_expression -> boolean_expression .)
    OP_ARITH_INCREMENT reduce using rule 73 (primary_expression -> boolean_expression .)
    OP_ARITH_DECREMENT reduce using rule 73 (primary_expression -> boolean_expression .)
    OP_EQUALITY_LESSER_THAN reduce using rule 73 (primary_expression -> boolean_expression .)
    OP_EQUALITY_GREATER_THAN reduce using rule 73 (primary_expression -> boolean_expression .)
    OP_EQUALITY_LESSER_OR_EQUAL_THAN reduce using rule 73 (primary_expression -> boolean_expression .)
    OP_EQUALITY_GREATER_OR_EQUAL_THAN reduce using rule 73 (primary_expression -> boolean_expression .)
    OP_EQUALITY_EQUAL reduce using rule 73 (primary_expression -> boolean_expression .)
    OP_EQUALITY_NOT_EQUAL reduce using rule 73 (primary_expression -> boolean_expression .)
    OP_LOGIC_AND    reduce using rule 73 (primary_expression -> boolean_expression .)
    OP_LOGIC_OR     reduce using rule 73 (primary_expression -> boolean_expression .)
    OP_ASSIGN_SIMPLE reduce using rule 73 (primary_expression -> boolean_expression .)
    OP_ASSIGN_MULT  reduce using rule 73 (primary_expression -> boolean_expression .)
    OP_ASSIGN_DIV   reduce using rule 73 (primary_expression -> boolean_expression .)
    OP_ASSIGN_ADD   reduce using rule 73 (primary_expression -> boolean_expression .)
    OP_ASSIGN_SUBTRACT reduce using rule 73 (primary_expression -> boolean_expression .)
    S_SEMI_COL      reduce using rule 73 (primary_expression -> boolean_expression .)
    LIT_INT         reduce using rule 73 (primary_expression -> boolean_expression .)
    LIT_REAL        reduce using rule 73 (primary_expression -> boolean_expression .)
    LIT_STRING      reduce using rule 73 (primary_expression -> boolean_expression .)
    ID              reduce using rule 73 (primary_expression -> boolean_expression .)
    CONST           reduce using rule 73 (primary_expression -> boolean_expression .)
    TRUE            reduce using rule 73 (primary_expression -> boolean_expression .)
    FALSE           reduce using rule 73 (primary_expression -> boolean_expression .)
    S_RPAREN        reduce using rule 73 (primary_expression -> boolean_expression .)


state 75

    (79) boolean_expression -> TRUE .

    OP_ARITH_ADD    reduce using rule 79 (boolean_expression -> TRUE .)
    OP_ARITH_SUBTRACT reduce using rule 79 (boolean_expression -> TRUE .)
    OP_ARITH_MULTIPLY reduce using rule 79 (boolean_expression -> TRUE .)
    OP_ARITH_DIVIDE reduce using rule 79 (boolean_expression -> TRUE .)
    OP_ARITH_INTEGER_DIVIDE reduce using rule 79 (boolean_expression -> TRUE .)
    OP_ARITH_MODULE reduce using rule 79 (boolean_expression -> TRUE .)
    OP_ARITH_INCREMENT reduce using rule 79 (boolean_expression -> TRUE .)
    OP_ARITH_DECREMENT reduce using rule 79 (boolean_expression -> TRUE .)
    OP_EQUALITY_LESSER_THAN reduce using rule 79 (boolean_expression -> TRUE .)
    OP_EQUALITY_GREATER_THAN reduce using rule 79 (boolean_expression -> TRUE .)
    OP_EQUALITY_LESSER_OR_EQUAL_THAN reduce using rule 79 (boolean_expression -> TRUE .)
    OP_EQUALITY_GREATER_OR_EQUAL_THAN reduce using rule 79 (boolean_expression -> TRUE .)
    OP_EQUALITY_EQUAL reduce using rule 79 (boolean_expression -> TRUE .)
    OP_EQUALITY_NOT_EQUAL reduce using rule 79 (boolean_expression -> TRUE .)
    S_SEMI_COL      reduce using rule 79 (boolean_expression -> TRUE .)
    OP_LOGIC_AND    reduce using rule 79 (boolean_expression -> TRUE .)
    OP_LOGIC_OR     reduce using rule 79 (boolean_expression -> TRUE .)
    S_RPAREN        reduce using rule 79 (boolean_expression -> TRUE .)
    OP_ASSIGN_SIMPLE reduce using rule 79 (boolean_expression -> TRUE .)
    OP_ASSIGN_MULT  reduce using rule 79 (boolean_expression -> TRUE .)
    OP_ASSIGN_DIV   reduce using rule 79 (boolean_expression -> TRUE .)
    OP_ASSIGN_ADD   reduce using rule 79 (boolean_expression -> TRUE .)
    OP_ASSIGN_SUBTRACT reduce using rule 79 (boolean_expression -> TRUE .)
    LIT_INT         reduce using rule 79 (boolean_expression -> TRUE .)
    LIT_REAL        reduce using rule 79 (boolean_expression -> TRUE .)
    LIT_STRING      reduce using rule 79 (boolean_expression -> TRUE .)
    ID              reduce using rule 79 (boolean_expression -> TRUE .)
    CONST           reduce using rule 79 (boolean_expression -> TRUE .)
    TRUE            reduce using rule 79 (boolean_expression -> TRUE .)
    FALSE           reduce using rule 79 (boolean_expression -> TRUE .)


state 76

    (50) input_expression -> ID . OP_DOT ID S_LPAREN S_RPAREN
    (77) variable_expression -> ID .

    OP_DOT          shift and go to state 54
    OP_ARITH_ADD    reduce using rule 77 (variable_expression -> ID .)
    OP_ARITH_SUBTRACT reduce using rule 77 (variable_expression -> ID .)
    OP_ARITH_MULTIPLY reduce using rule 77 (variable_expression -> ID .)
    OP_ARITH_DIVIDE reduce using rule 77 (variable_expression -> ID .)
    OP_ARITH_INTEGER_DIVIDE reduce using rule 77 (variable_expression -> ID .)
    OP_ARITH_MODULE reduce using rule 77 (variable_expression -> ID .)
    OP_ARITH_INCREMENT reduce using rule 77 (variable_expression -> ID .)
    OP_ARITH_DECREMENT reduce using rule 77 (variable_expression -> ID .)
    OP_EQUALITY_LESSER_THAN reduce using rule 77 (variable_expression -> ID .)
    OP_EQUALITY_GREATER_THAN reduce using rule 77 (variable_expression -> ID .)
    OP_EQUALITY_LESSER_OR_EQUAL_THAN reduce using rule 77 (variable_expression -> ID .)
    OP_EQUALITY_GREATER_OR_EQUAL_THAN reduce using rule 77 (variable_expression -> ID .)
    OP_EQUALITY_EQUAL reduce using rule 77 (variable_expression -> ID .)
    OP_EQUALITY_NOT_EQUAL reduce using rule 77 (variable_expression -> ID .)
    OP_LOGIC_AND    reduce using rule 77 (variable_expression -> ID .)
    OP_LOGIC_OR     reduce using rule 77 (variable_expression -> ID .)
    OP_ASSIGN_SIMPLE reduce using rule 77 (variable_expression -> ID .)
    OP_ASSIGN_MULT  reduce using rule 77 (variable_expression -> ID .)
    OP_ASSIGN_DIV   reduce using rule 77 (variable_expression -> ID .)
    OP_ASSIGN_ADD   reduce using rule 77 (variable_expression -> ID .)
    OP_ASSIGN_SUBTRACT reduce using rule 77 (variable_expression -> ID .)
    S_SEMI_COL      reduce using rule 77 (variable_expression -> ID .)
    LIT_INT         reduce using rule 77 (variable_expression -> ID .)
    LIT_REAL        reduce using rule 77 (variable_expression -> ID .)
    LIT_STRING      reduce using rule 77 (variable_expression -> ID .)
    ID              reduce using rule 77 (variable_expression -> ID .)
    CONST           reduce using rule 77 (variable_expression -> ID .)
    TRUE            reduce using rule 77 (variable_expression -> ID .)
    FALSE           reduce using rule 77 (variable_expression -> ID .)


state 77

    (78) variable_expression -> CONST .

    OP_ARITH_ADD    reduce using rule 78 (variable_expression -> CONST .)
    OP_ARITH_SUBTRACT reduce using rule 78 (variable_expression -> CONST .)
    OP_ARITH_MULTIPLY reduce using rule 78 (variable_expression -> CONST .)
    OP_ARITH_DIVIDE reduce using rule 78 (variable_expression -> CONST .)
    OP_ARITH_INTEGER_DIVIDE reduce using rule 78 (variable_expression -> CONST .)
    OP_ARITH_MODULE reduce using rule 78 (variable_expression -> CONST .)
    OP_ARITH_INCREMENT reduce using rule 78 (variable_expression -> CONST .)
    OP_ARITH_DECREMENT reduce using rule 78 (variable_expression -> CONST .)
    OP_EQUALITY_LESSER_THAN reduce using rule 78 (variable_expression -> CONST .)
    OP_EQUALITY_GREATER_THAN reduce using rule 78 (variable_expression -> CONST .)
    OP_EQUALITY_LESSER_OR_EQUAL_THAN reduce using rule 78 (variable_expression -> CONST .)
    OP_EQUALITY_GREATER_OR_EQUAL_THAN reduce using rule 78 (variable_expression -> CONST .)
    OP_EQUALITY_EQUAL reduce using rule 78 (variable_expression -> CONST .)
    OP_EQUALITY_NOT_EQUAL reduce using rule 78 (variable_expression -> CONST .)
    OP_LOGIC_AND    reduce using rule 78 (variable_expression -> CONST .)
    OP_LOGIC_OR     reduce using rule 78 (variable_expression -> CONST .)
    OP_ASSIGN_SIMPLE reduce using rule 78 (variable_expression -> CONST .)
    OP_ASSIGN_MULT  reduce using rule 78 (variable_expression -> CONST .)
    OP_ASSIGN_DIV   reduce using rule 78 (variable_expression -> CONST .)
    OP_ASSIGN_ADD   reduce using rule 78 (variable_expression -> CONST .)
    OP_ASSIGN_SUBTRACT reduce using rule 78 (variable_expression -> CONST .)
    S_SEMI_COL      reduce using rule 78 (variable_expression -> CONST .)
    LIT_INT         reduce using rule 78 (variable_expression -> CONST .)
    LIT_REAL        reduce using rule 78 (variable_expression -> CONST .)
    LIT_STRING      reduce using rule 78 (variable_expression -> CONST .)
    ID              reduce using rule 78 (variable_expression -> CONST .)
    CONST           reduce using rule 78 (variable_expression -> CONST .)
    TRUE            reduce using rule 78 (variable_expression -> CONST .)
    FALSE           reduce using rule 78 (variable_expression -> CONST .)
    S_RPAREN        reduce using rule 78 (variable_expression -> CONST .)


state 78

    (74) primary_expression -> LIT_INT .

    OP_ARITH_ADD    reduce using rule 74 (primary_expression -> LIT_INT .)
    OP_ARITH_SUBTRACT reduce using rule 74 (primary_expression -> LIT_INT .)
    OP_ARITH_MULTIPLY reduce using rule 74 (primary_expression -> LIT_INT .)
    OP_ARITH_DIVIDE reduce using rule 74 (primary_expression -> LIT_INT .)
    OP_ARITH_INTEGER_DIVIDE reduce using rule 74 (primary_expression -> LIT_INT .)
    OP_ARITH_MODULE reduce using rule 74 (primary_expression -> LIT_INT .)
    OP_ARITH_INCREMENT reduce using rule 74 (primary_expression -> LIT_INT .)
    OP_ARITH_DECREMENT reduce using rule 74 (primary_expression -> LIT_INT .)
    OP_EQUALITY_LESSER_THAN reduce using rule 74 (primary_expression -> LIT_INT .)
    OP_EQUALITY_GREATER_THAN reduce using rule 74 (primary_expression -> LIT_INT .)
    OP_EQUALITY_LESSER_OR_EQUAL_THAN reduce using rule 74 (primary_expression -> LIT_INT .)
    OP_EQUALITY_GREATER_OR_EQUAL_THAN reduce using rule 74 (primary_expression -> LIT_INT .)
    OP_EQUALITY_EQUAL reduce using rule 74 (primary_expression -> LIT_INT .)
    OP_EQUALITY_NOT_EQUAL reduce using rule 74 (primary_expression -> LIT_INT .)
    OP_LOGIC_AND    reduce using rule 74 (primary_expression -> LIT_INT .)
    OP_LOGIC_OR     reduce using rule 74 (primary_expression -> LIT_INT .)
    OP_ASSIGN_SIMPLE reduce using rule 74 (primary_expression -> LIT_INT .)
    OP_ASSIGN_MULT  reduce using rule 74 (primary_expression -> LIT_INT .)
    OP_ASSIGN_DIV   reduce using rule 74 (primary_expression -> LIT_INT .)
    OP_ASSIGN_ADD   reduce using rule 74 (primary_expression -> LIT_INT .)
    OP_ASSIGN_SUBTRACT reduce using rule 74 (primary_expression -> LIT_INT .)
    S_SEMI_COL      reduce using rule 74 (primary_expression -> LIT_INT .)
    LIT_INT         reduce using rule 74 (primary_expression -> LIT_INT .)
    LIT_REAL        reduce using rule 74 (primary_expression -> LIT_INT .)
    LIT_STRING      reduce using rule 74 (primary_expression -> LIT_INT .)
    ID              reduce using rule 74 (primary_expression -> LIT_INT .)
    CONST           reduce using rule 74 (primary_expression -> LIT_INT .)
    TRUE            reduce using rule 74 (primary_expression -> LIT_INT .)
    FALSE           reduce using rule 74 (primary_expression -> LIT_INT .)
    S_RPAREN        reduce using rule 74 (primary_expression -> LIT_INT .)


state 79

    (46) relational_expression -> math_expression .
    (49) math_expression -> math_expression . math_operators primary_expression
    (64) math_operators -> . OP_ARITH_ADD
    (65) math_operators -> . OP_ARITH_SUBTRACT
    (66) math_operators -> . OP_ARITH_MULTIPLY
    (67) math_operators -> . OP_ARITH_DIVIDE
    (68) math_operators -> . OP_ARITH_INTEGER_DIVIDE
    (69) math_operators -> . OP_ARITH_MODULE
    (70) math_operators -> . OP_ARITH_INCREMENT
    (71) math_operators -> . OP_ARITH_DECREMENT

    OP_EQUALITY_LESSER_THAN reduce using rule 46 (relational_expression -> math_expression .)
    OP_EQUALITY_GREATER_THAN reduce using rule 46 (relational_expression -> math_expression .)
    OP_EQUALITY_LESSER_OR_EQUAL_THAN reduce using rule 46 (relational_expression -> math_expression .)
    OP_EQUALITY_GREATER_OR_EQUAL_THAN reduce using rule 46 (relational_expression -> math_expression .)
    OP_EQUALITY_EQUAL reduce using rule 46 (relational_expression -> math_expression .)
    OP_EQUALITY_NOT_EQUAL reduce using rule 46 (relational_expression -> math_expression .)
    S_SEMI_COL      reduce using rule 46 (relational_expression -> math_expression .)
    OP_LOGIC_AND    reduce using rule 46 (relational_expression -> math_expression .)
    OP_LOGIC_OR     reduce using rule 46 (relational_expression -> math_expression .)
    S_RPAREN        reduce using rule 46 (relational_expression -> math_expression .)
    OP_ASSIGN_SIMPLE reduce using rule 46 (relational_expression -> math_expression .)
    OP_ASSIGN_MULT  reduce using rule 46 (relational_expression -> math_expression .)
    OP_ASSIGN_DIV   reduce using rule 46 (relational_expression -> math_expression .)
    OP_ASSIGN_ADD   reduce using rule 46 (relational_expression -> math_expression .)
    OP_ASSIGN_SUBTRACT reduce using rule 46 (relational_expression -> math_expression .)
    LIT_INT         reduce using rule 46 (relational_expression -> math_expression .)
    LIT_REAL        reduce using rule 46 (relational_expression -> math_expression .)
    LIT_STRING      reduce using rule 46 (relational_expression -> math_expression .)
    ID              reduce using rule 46 (relational_expression -> math_expression .)
    CONST           reduce using rule 46 (relational_expression -> math_expression .)
    TRUE            reduce using rule 46 (relational_expression -> math_expression .)
    FALSE           reduce using rule 46 (relational_expression -> math_expression .)
    OP_ARITH_ADD    shift and go to state 116
    OP_ARITH_SUBTRACT shift and go to state 113
    OP_ARITH_MULTIPLY shift and go to state 114
    OP_ARITH_DIVIDE shift and go to state 110
    OP_ARITH_INTEGER_DIVIDE shift and go to state 115
    OP_ARITH_MODULE shift and go to state 111
    OP_ARITH_INCREMENT shift and go to state 118
    OP_ARITH_DECREMENT shift and go to state 112

    math_operators                 shift and go to state 117

state 80

    (38) assignment_expression -> assignment_expression OP_ASSIGN_MULT input_expression .

    OP_ASSIGN_SIMPLE reduce using rule 38 (assignment_expression -> assignment_expression OP_ASSIGN_MULT input_expression .)
    OP_ASSIGN_MULT  reduce using rule 38 (assignment_expression -> assignment_expression OP_ASSIGN_MULT input_expression .)
    OP_ASSIGN_DIV   reduce using rule 38 (assignment_expression -> assignment_expression OP_ASSIGN_MULT input_expression .)
    OP_ASSIGN_ADD   reduce using rule 38 (assignment_expression -> assignment_expression OP_ASSIGN_MULT input_expression .)
    OP_ASSIGN_SUBTRACT reduce using rule 38 (assignment_expression -> assignment_expression OP_ASSIGN_MULT input_expression .)
    S_SEMI_COL      reduce using rule 38 (assignment_expression -> assignment_expression OP_ASSIGN_MULT input_expression .)
    LIT_INT         reduce using rule 38 (assignment_expression -> assignment_expression OP_ASSIGN_MULT input_expression .)
    LIT_REAL        reduce using rule 38 (assignment_expression -> assignment_expression OP_ASSIGN_MULT input_expression .)
    LIT_STRING      reduce using rule 38 (assignment_expression -> assignment_expression OP_ASSIGN_MULT input_expression .)
    ID              reduce using rule 38 (assignment_expression -> assignment_expression OP_ASSIGN_MULT input_expression .)
    CONST           reduce using rule 38 (assignment_expression -> assignment_expression OP_ASSIGN_MULT input_expression .)
    TRUE            reduce using rule 38 (assignment_expression -> assignment_expression OP_ASSIGN_MULT input_expression .)
    FALSE           reduce using rule 38 (assignment_expression -> assignment_expression OP_ASSIGN_MULT input_expression .)


state 81

    (33) assignment_expression -> assignment_expression OP_ASSIGN_MULT logical_expression .
    (43) logical_expression -> logical_expression . logical_operators equality_expression
    (56) logical_operators -> . OP_LOGIC_AND
    (57) logical_operators -> . OP_LOGIC_OR

    OP_ASSIGN_SIMPLE reduce using rule 33 (assignment_expression -> assignment_expression OP_ASSIGN_MULT logical_expression .)
    OP_ASSIGN_MULT  reduce using rule 33 (assignment_expression -> assignment_expression OP_ASSIGN_MULT logical_expression .)
    OP_ASSIGN_DIV   reduce using rule 33 (assignment_expression -> assignment_expression OP_ASSIGN_MULT logical_expression .)
    OP_ASSIGN_ADD   reduce using rule 33 (assignment_expression -> assignment_expression OP_ASSIGN_MULT logical_expression .)
    OP_ASSIGN_SUBTRACT reduce using rule 33 (assignment_expression -> assignment_expression OP_ASSIGN_MULT logical_expression .)
    S_SEMI_COL      reduce using rule 33 (assignment_expression -> assignment_expression OP_ASSIGN_MULT logical_expression .)
    LIT_INT         reduce using rule 33 (assignment_expression -> assignment_expression OP_ASSIGN_MULT logical_expression .)
    LIT_REAL        reduce using rule 33 (assignment_expression -> assignment_expression OP_ASSIGN_MULT logical_expression .)
    LIT_STRING      reduce using rule 33 (assignment_expression -> assignment_expression OP_ASSIGN_MULT logical_expression .)
    ID              reduce using rule 33 (assignment_expression -> assignment_expression OP_ASSIGN_MULT logical_expression .)
    CONST           reduce using rule 33 (assignment_expression -> assignment_expression OP_ASSIGN_MULT logical_expression .)
    TRUE            reduce using rule 33 (assignment_expression -> assignment_expression OP_ASSIGN_MULT logical_expression .)
    FALSE           reduce using rule 33 (assignment_expression -> assignment_expression OP_ASSIGN_MULT logical_expression .)
    OP_LOGIC_AND    shift and go to state 119
    OP_LOGIC_OR     shift and go to state 120

    logical_operators              shift and go to state 121

state 82

    (76) primary_expression -> LIT_STRING .

    OP_ARITH_ADD    reduce using rule 76 (primary_expression -> LIT_STRING .)
    OP_ARITH_SUBTRACT reduce using rule 76 (primary_expression -> LIT_STRING .)
    OP_ARITH_MULTIPLY reduce using rule 76 (primary_expression -> LIT_STRING .)
    OP_ARITH_DIVIDE reduce using rule 76 (primary_expression -> LIT_STRING .)
    OP_ARITH_INTEGER_DIVIDE reduce using rule 76 (primary_expression -> LIT_STRING .)
    OP_ARITH_MODULE reduce using rule 76 (primary_expression -> LIT_STRING .)
    OP_ARITH_INCREMENT reduce using rule 76 (primary_expression -> LIT_STRING .)
    OP_ARITH_DECREMENT reduce using rule 76 (primary_expression -> LIT_STRING .)
    OP_EQUALITY_LESSER_THAN reduce using rule 76 (primary_expression -> LIT_STRING .)
    OP_EQUALITY_GREATER_THAN reduce using rule 76 (primary_expression -> LIT_STRING .)
    OP_EQUALITY_LESSER_OR_EQUAL_THAN reduce using rule 76 (primary_expression -> LIT_STRING .)
    OP_EQUALITY_GREATER_OR_EQUAL_THAN reduce using rule 76 (primary_expression -> LIT_STRING .)
    OP_EQUALITY_EQUAL reduce using rule 76 (primary_expression -> LIT_STRING .)
    OP_EQUALITY_NOT_EQUAL reduce using rule 76 (primary_expression -> LIT_STRING .)
    OP_LOGIC_AND    reduce using rule 76 (primary_expression -> LIT_STRING .)
    OP_LOGIC_OR     reduce using rule 76 (primary_expression -> LIT_STRING .)
    OP_ASSIGN_SIMPLE reduce using rule 76 (primary_expression -> LIT_STRING .)
    OP_ASSIGN_MULT  reduce using rule 76 (primary_expression -> LIT_STRING .)
    OP_ASSIGN_DIV   reduce using rule 76 (primary_expression -> LIT_STRING .)
    OP_ASSIGN_ADD   reduce using rule 76 (primary_expression -> LIT_STRING .)
    OP_ASSIGN_SUBTRACT reduce using rule 76 (primary_expression -> LIT_STRING .)
    S_SEMI_COL      reduce using rule 76 (primary_expression -> LIT_STRING .)
    LIT_INT         reduce using rule 76 (primary_expression -> LIT_STRING .)
    LIT_REAL        reduce using rule 76 (primary_expression -> LIT_STRING .)
    LIT_STRING      reduce using rule 76 (primary_expression -> LIT_STRING .)
    ID              reduce using rule 76 (primary_expression -> LIT_STRING .)
    CONST           reduce using rule 76 (primary_expression -> LIT_STRING .)
    TRUE            reduce using rule 76 (primary_expression -> LIT_STRING .)
    FALSE           reduce using rule 76 (primary_expression -> LIT_STRING .)
    S_RPAREN        reduce using rule 76 (primary_expression -> LIT_STRING .)


state 83

    (48) math_expression -> primary_expression .

    OP_ARITH_ADD    reduce using rule 48 (math_expression -> primary_expression .)
    OP_ARITH_SUBTRACT reduce using rule 48 (math_expression -> primary_expression .)
    OP_ARITH_MULTIPLY reduce using rule 48 (math_expression -> primary_expression .)
    OP_ARITH_DIVIDE reduce using rule 48 (math_expression -> primary_expression .)
    OP_ARITH_INTEGER_DIVIDE reduce using rule 48 (math_expression -> primary_expression .)
    OP_ARITH_MODULE reduce using rule 48 (math_expression -> primary_expression .)
    OP_ARITH_INCREMENT reduce using rule 48 (math_expression -> primary_expression .)
    OP_ARITH_DECREMENT reduce using rule 48 (math_expression -> primary_expression .)
    OP_EQUALITY_LESSER_THAN reduce using rule 48 (math_expression -> primary_expression .)
    OP_EQUALITY_GREATER_THAN reduce using rule 48 (math_expression -> primary_expression .)
    OP_EQUALITY_LESSER_OR_EQUAL_THAN reduce using rule 48 (math_expression -> primary_expression .)
    OP_EQUALITY_GREATER_OR_EQUAL_THAN reduce using rule 48 (math_expression -> primary_expression .)
    OP_EQUALITY_EQUAL reduce using rule 48 (math_expression -> primary_expression .)
    OP_EQUALITY_NOT_EQUAL reduce using rule 48 (math_expression -> primary_expression .)
    ID              reduce using rule 48 (math_expression -> primary_expression .)
    OP_LOGIC_AND    reduce using rule 48 (math_expression -> primary_expression .)
    OP_LOGIC_OR     reduce using rule 48 (math_expression -> primary_expression .)
    OP_ASSIGN_SIMPLE reduce using rule 48 (math_expression -> primary_expression .)
    OP_ASSIGN_MULT  reduce using rule 48 (math_expression -> primary_expression .)
    OP_ASSIGN_DIV   reduce using rule 48 (math_expression -> primary_expression .)
    OP_ASSIGN_ADD   reduce using rule 48 (math_expression -> primary_expression .)
    OP_ASSIGN_SUBTRACT reduce using rule 48 (math_expression -> primary_expression .)
    S_SEMI_COL      reduce using rule 48 (math_expression -> primary_expression .)
    LIT_INT         reduce using rule 48 (math_expression -> primary_expression .)
    LIT_REAL        reduce using rule 48 (math_expression -> primary_expression .)
    LIT_STRING      reduce using rule 48 (math_expression -> primary_expression .)
    CONST           reduce using rule 48 (math_expression -> primary_expression .)
    TRUE            reduce using rule 48 (math_expression -> primary_expression .)
    FALSE           reduce using rule 48 (math_expression -> primary_expression .)
    S_RPAREN        reduce using rule 48 (math_expression -> primary_expression .)


state 84

    (75) primary_expression -> LIT_REAL .

    OP_ARITH_ADD    reduce using rule 75 (primary_expression -> LIT_REAL .)
    OP_ARITH_SUBTRACT reduce using rule 75 (primary_expression -> LIT_REAL .)
    OP_ARITH_MULTIPLY reduce using rule 75 (primary_expression -> LIT_REAL .)
    OP_ARITH_DIVIDE reduce using rule 75 (primary_expression -> LIT_REAL .)
    OP_ARITH_INTEGER_DIVIDE reduce using rule 75 (primary_expression -> LIT_REAL .)
    OP_ARITH_MODULE reduce using rule 75 (primary_expression -> LIT_REAL .)
    OP_ARITH_INCREMENT reduce using rule 75 (primary_expression -> LIT_REAL .)
    OP_ARITH_DECREMENT reduce using rule 75 (primary_expression -> LIT_REAL .)
    OP_EQUALITY_LESSER_THAN reduce using rule 75 (primary_expression -> LIT_REAL .)
    OP_EQUALITY_GREATER_THAN reduce using rule 75 (primary_expression -> LIT_REAL .)
    OP_EQUALITY_LESSER_OR_EQUAL_THAN reduce using rule 75 (primary_expression -> LIT_REAL .)
    OP_EQUALITY_GREATER_OR_EQUAL_THAN reduce using rule 75 (primary_expression -> LIT_REAL .)
    OP_EQUALITY_EQUAL reduce using rule 75 (primary_expression -> LIT_REAL .)
    OP_EQUALITY_NOT_EQUAL reduce using rule 75 (primary_expression -> LIT_REAL .)
    OP_LOGIC_AND    reduce using rule 75 (primary_expression -> LIT_REAL .)
    OP_LOGIC_OR     reduce using rule 75 (primary_expression -> LIT_REAL .)
    OP_ASSIGN_SIMPLE reduce using rule 75 (primary_expression -> LIT_REAL .)
    OP_ASSIGN_MULT  reduce using rule 75 (primary_expression -> LIT_REAL .)
    OP_ASSIGN_DIV   reduce using rule 75 (primary_expression -> LIT_REAL .)
    OP_ASSIGN_ADD   reduce using rule 75 (primary_expression -> LIT_REAL .)
    OP_ASSIGN_SUBTRACT reduce using rule 75 (primary_expression -> LIT_REAL .)
    S_SEMI_COL      reduce using rule 75 (primary_expression -> LIT_REAL .)
    LIT_INT         reduce using rule 75 (primary_expression -> LIT_REAL .)
    LIT_REAL        reduce using rule 75 (primary_expression -> LIT_REAL .)
    LIT_STRING      reduce using rule 75 (primary_expression -> LIT_REAL .)
    ID              reduce using rule 75 (primary_expression -> LIT_REAL .)
    CONST           reduce using rule 75 (primary_expression -> LIT_REAL .)
    TRUE            reduce using rule 75 (primary_expression -> LIT_REAL .)
    FALSE           reduce using rule 75 (primary_expression -> LIT_REAL .)
    S_RPAREN        reduce using rule 75 (primary_expression -> LIT_REAL .)


state 85

    (40) assignment_expression -> assignment_expression OP_ASSIGN_ADD input_expression .

    OP_ASSIGN_SIMPLE reduce using rule 40 (assignment_expression -> assignment_expression OP_ASSIGN_ADD input_expression .)
    OP_ASSIGN_MULT  reduce using rule 40 (assignment_expression -> assignment_expression OP_ASSIGN_ADD input_expression .)
    OP_ASSIGN_DIV   reduce using rule 40 (assignment_expression -> assignment_expression OP_ASSIGN_ADD input_expression .)
    OP_ASSIGN_ADD   reduce using rule 40 (assignment_expression -> assignment_expression OP_ASSIGN_ADD input_expression .)
    OP_ASSIGN_SUBTRACT reduce using rule 40 (assignment_expression -> assignment_expression OP_ASSIGN_ADD input_expression .)
    S_SEMI_COL      reduce using rule 40 (assignment_expression -> assignment_expression OP_ASSIGN_ADD input_expression .)
    LIT_INT         reduce using rule 40 (assignment_expression -> assignment_expression OP_ASSIGN_ADD input_expression .)
    LIT_REAL        reduce using rule 40 (assignment_expression -> assignment_expression OP_ASSIGN_ADD input_expression .)
    LIT_STRING      reduce using rule 40 (assignment_expression -> assignment_expression OP_ASSIGN_ADD input_expression .)
    ID              reduce using rule 40 (assignment_expression -> assignment_expression OP_ASSIGN_ADD input_expression .)
    CONST           reduce using rule 40 (assignment_expression -> assignment_expression OP_ASSIGN_ADD input_expression .)
    TRUE            reduce using rule 40 (assignment_expression -> assignment_expression OP_ASSIGN_ADD input_expression .)
    FALSE           reduce using rule 40 (assignment_expression -> assignment_expression OP_ASSIGN_ADD input_expression .)


state 86

    (35) assignment_expression -> assignment_expression OP_ASSIGN_ADD logical_expression .
    (43) logical_expression -> logical_expression . logical_operators equality_expression
    (56) logical_operators -> . OP_LOGIC_AND
    (57) logical_operators -> . OP_LOGIC_OR

    OP_ASSIGN_SIMPLE reduce using rule 35 (assignment_expression -> assignment_expression OP_ASSIGN_ADD logical_expression .)
    OP_ASSIGN_MULT  reduce using rule 35 (assignment_expression -> assignment_expression OP_ASSIGN_ADD logical_expression .)
    OP_ASSIGN_DIV   reduce using rule 35 (assignment_expression -> assignment_expression OP_ASSIGN_ADD logical_expression .)
    OP_ASSIGN_ADD   reduce using rule 35 (assignment_expression -> assignment_expression OP_ASSIGN_ADD logical_expression .)
    OP_ASSIGN_SUBTRACT reduce using rule 35 (assignment_expression -> assignment_expression OP_ASSIGN_ADD logical_expression .)
    S_SEMI_COL      reduce using rule 35 (assignment_expression -> assignment_expression OP_ASSIGN_ADD logical_expression .)
    LIT_INT         reduce using rule 35 (assignment_expression -> assignment_expression OP_ASSIGN_ADD logical_expression .)
    LIT_REAL        reduce using rule 35 (assignment_expression -> assignment_expression OP_ASSIGN_ADD logical_expression .)
    LIT_STRING      reduce using rule 35 (assignment_expression -> assignment_expression OP_ASSIGN_ADD logical_expression .)
    ID              reduce using rule 35 (assignment_expression -> assignment_expression OP_ASSIGN_ADD logical_expression .)
    CONST           reduce using rule 35 (assignment_expression -> assignment_expression OP_ASSIGN_ADD logical_expression .)
    TRUE            reduce using rule 35 (assignment_expression -> assignment_expression OP_ASSIGN_ADD logical_expression .)
    FALSE           reduce using rule 35 (assignment_expression -> assignment_expression OP_ASSIGN_ADD logical_expression .)
    OP_LOGIC_AND    shift and go to state 119
    OP_LOGIC_OR     shift and go to state 120

    logical_operators              shift and go to state 121

state 87

    (37) assignment_expression -> assignment_expression OP_ASSIGN_SIMPLE input_expression .

    OP_ASSIGN_SIMPLE reduce using rule 37 (assignment_expression -> assignment_expression OP_ASSIGN_SIMPLE input_expression .)
    OP_ASSIGN_MULT  reduce using rule 37 (assignment_expression -> assignment_expression OP_ASSIGN_SIMPLE input_expression .)
    OP_ASSIGN_DIV   reduce using rule 37 (assignment_expression -> assignment_expression OP_ASSIGN_SIMPLE input_expression .)
    OP_ASSIGN_ADD   reduce using rule 37 (assignment_expression -> assignment_expression OP_ASSIGN_SIMPLE input_expression .)
    OP_ASSIGN_SUBTRACT reduce using rule 37 (assignment_expression -> assignment_expression OP_ASSIGN_SIMPLE input_expression .)
    S_SEMI_COL      reduce using rule 37 (assignment_expression -> assignment_expression OP_ASSIGN_SIMPLE input_expression .)
    LIT_INT         reduce using rule 37 (assignment_expression -> assignment_expression OP_ASSIGN_SIMPLE input_expression .)
    LIT_REAL        reduce using rule 37 (assignment_expression -> assignment_expression OP_ASSIGN_SIMPLE input_expression .)
    LIT_STRING      reduce using rule 37 (assignment_expression -> assignment_expression OP_ASSIGN_SIMPLE input_expression .)
    ID              reduce using rule 37 (assignment_expression -> assignment_expression OP_ASSIGN_SIMPLE input_expression .)
    CONST           reduce using rule 37 (assignment_expression -> assignment_expression OP_ASSIGN_SIMPLE input_expression .)
    TRUE            reduce using rule 37 (assignment_expression -> assignment_expression OP_ASSIGN_SIMPLE input_expression .)
    FALSE           reduce using rule 37 (assignment_expression -> assignment_expression OP_ASSIGN_SIMPLE input_expression .)


state 88

    (32) assignment_expression -> assignment_expression OP_ASSIGN_SIMPLE logical_expression .
    (43) logical_expression -> logical_expression . logical_operators equality_expression
    (56) logical_operators -> . OP_LOGIC_AND
    (57) logical_operators -> . OP_LOGIC_OR

    OP_ASSIGN_SIMPLE reduce using rule 32 (assignment_expression -> assignment_expression OP_ASSIGN_SIMPLE logical_expression .)
    OP_ASSIGN_MULT  reduce using rule 32 (assignment_expression -> assignment_expression OP_ASSIGN_SIMPLE logical_expression .)
    OP_ASSIGN_DIV   reduce using rule 32 (assignment_expression -> assignment_expression OP_ASSIGN_SIMPLE logical_expression .)
    OP_ASSIGN_ADD   reduce using rule 32 (assignment_expression -> assignment_expression OP_ASSIGN_SIMPLE logical_expression .)
    OP_ASSIGN_SUBTRACT reduce using rule 32 (assignment_expression -> assignment_expression OP_ASSIGN_SIMPLE logical_expression .)
    S_SEMI_COL      reduce using rule 32 (assignment_expression -> assignment_expression OP_ASSIGN_SIMPLE logical_expression .)
    LIT_INT         reduce using rule 32 (assignment_expression -> assignment_expression OP_ASSIGN_SIMPLE logical_expression .)
    LIT_REAL        reduce using rule 32 (assignment_expression -> assignment_expression OP_ASSIGN_SIMPLE logical_expression .)
    LIT_STRING      reduce using rule 32 (assignment_expression -> assignment_expression OP_ASSIGN_SIMPLE logical_expression .)
    ID              reduce using rule 32 (assignment_expression -> assignment_expression OP_ASSIGN_SIMPLE logical_expression .)
    CONST           reduce using rule 32 (assignment_expression -> assignment_expression OP_ASSIGN_SIMPLE logical_expression .)
    TRUE            reduce using rule 32 (assignment_expression -> assignment_expression OP_ASSIGN_SIMPLE logical_expression .)
    FALSE           reduce using rule 32 (assignment_expression -> assignment_expression OP_ASSIGN_SIMPLE logical_expression .)
    OP_LOGIC_AND    shift and go to state 119
    OP_LOGIC_OR     shift and go to state 120

    logical_operators              shift and go to state 121

state 89

    (41) assignment_expression -> assignment_expression OP_ASSIGN_SUBTRACT input_expression .

    OP_ASSIGN_SIMPLE reduce using rule 41 (assignment_expression -> assignment_expression OP_ASSIGN_SUBTRACT input_expression .)
    OP_ASSIGN_MULT  reduce using rule 41 (assignment_expression -> assignment_expression OP_ASSIGN_SUBTRACT input_expression .)
    OP_ASSIGN_DIV   reduce using rule 41 (assignment_expression -> assignment_expression OP_ASSIGN_SUBTRACT input_expression .)
    OP_ASSIGN_ADD   reduce using rule 41 (assignment_expression -> assignment_expression OP_ASSIGN_SUBTRACT input_expression .)
    OP_ASSIGN_SUBTRACT reduce using rule 41 (assignment_expression -> assignment_expression OP_ASSIGN_SUBTRACT input_expression .)
    S_SEMI_COL      reduce using rule 41 (assignment_expression -> assignment_expression OP_ASSIGN_SUBTRACT input_expression .)
    LIT_INT         reduce using rule 41 (assignment_expression -> assignment_expression OP_ASSIGN_SUBTRACT input_expression .)
    LIT_REAL        reduce using rule 41 (assignment_expression -> assignment_expression OP_ASSIGN_SUBTRACT input_expression .)
    LIT_STRING      reduce using rule 41 (assignment_expression -> assignment_expression OP_ASSIGN_SUBTRACT input_expression .)
    ID              reduce using rule 41 (assignment_expression -> assignment_expression OP_ASSIGN_SUBTRACT input_expression .)
    CONST           reduce using rule 41 (assignment_expression -> assignment_expression OP_ASSIGN_SUBTRACT input_expression .)
    TRUE            reduce using rule 41 (assignment_expression -> assignment_expression OP_ASSIGN_SUBTRACT input_expression .)
    FALSE           reduce using rule 41 (assignment_expression -> assignment_expression OP_ASSIGN_SUBTRACT input_expression .)


state 90

    (36) assignment_expression -> assignment_expression OP_ASSIGN_SUBTRACT logical_expression .
    (43) logical_expression -> logical_expression . logical_operators equality_expression
    (56) logical_operators -> . OP_LOGIC_AND
    (57) logical_operators -> . OP_LOGIC_OR

    OP_ASSIGN_SIMPLE reduce using rule 36 (assignment_expression -> assignment_expression OP_ASSIGN_SUBTRACT logical_expression .)
    OP_ASSIGN_MULT  reduce using rule 36 (assignment_expression -> assignment_expression OP_ASSIGN_SUBTRACT logical_expression .)
    OP_ASSIGN_DIV   reduce using rule 36 (assignment_expression -> assignment_expression OP_ASSIGN_SUBTRACT logical_expression .)
    OP_ASSIGN_ADD   reduce using rule 36 (assignment_expression -> assignment_expression OP_ASSIGN_SUBTRACT logical_expression .)
    OP_ASSIGN_SUBTRACT reduce using rule 36 (assignment_expression -> assignment_expression OP_ASSIGN_SUBTRACT logical_expression .)
    S_SEMI_COL      reduce using rule 36 (assignment_expression -> assignment_expression OP_ASSIGN_SUBTRACT logical_expression .)
    LIT_INT         reduce using rule 36 (assignment_expression -> assignment_expression OP_ASSIGN_SUBTRACT logical_expression .)
    LIT_REAL        reduce using rule 36 (assignment_expression -> assignment_expression OP_ASSIGN_SUBTRACT logical_expression .)
    LIT_STRING      reduce using rule 36 (assignment_expression -> assignment_expression OP_ASSIGN_SUBTRACT logical_expression .)
    ID              reduce using rule 36 (assignment_expression -> assignment_expression OP_ASSIGN_SUBTRACT logical_expression .)
    CONST           reduce using rule 36 (assignment_expression -> assignment_expression OP_ASSIGN_SUBTRACT logical_expression .)
    TRUE            reduce using rule 36 (assignment_expression -> assignment_expression OP_ASSIGN_SUBTRACT logical_expression .)
    FALSE           reduce using rule 36 (assignment_expression -> assignment_expression OP_ASSIGN_SUBTRACT logical_expression .)
    OP_LOGIC_AND    shift and go to state 119
    OP_LOGIC_OR     shift and go to state 120

    logical_operators              shift and go to state 121

state 91

    (39) assignment_expression -> assignment_expression OP_ASSIGN_DIV input_expression .

    OP_ASSIGN_SIMPLE reduce using rule 39 (assignment_expression -> assignment_expression OP_ASSIGN_DIV input_expression .)
    OP_ASSIGN_MULT  reduce using rule 39 (assignment_expression -> assignment_expression OP_ASSIGN_DIV input_expression .)
    OP_ASSIGN_DIV   reduce using rule 39 (assignment_expression -> assignment_expression OP_ASSIGN_DIV input_expression .)
    OP_ASSIGN_ADD   reduce using rule 39 (assignment_expression -> assignment_expression OP_ASSIGN_DIV input_expression .)
    OP_ASSIGN_SUBTRACT reduce using rule 39 (assignment_expression -> assignment_expression OP_ASSIGN_DIV input_expression .)
    S_SEMI_COL      reduce using rule 39 (assignment_expression -> assignment_expression OP_ASSIGN_DIV input_expression .)
    LIT_INT         reduce using rule 39 (assignment_expression -> assignment_expression OP_ASSIGN_DIV input_expression .)
    LIT_REAL        reduce using rule 39 (assignment_expression -> assignment_expression OP_ASSIGN_DIV input_expression .)
    LIT_STRING      reduce using rule 39 (assignment_expression -> assignment_expression OP_ASSIGN_DIV input_expression .)
    ID              reduce using rule 39 (assignment_expression -> assignment_expression OP_ASSIGN_DIV input_expression .)
    CONST           reduce using rule 39 (assignment_expression -> assignment_expression OP_ASSIGN_DIV input_expression .)
    TRUE            reduce using rule 39 (assignment_expression -> assignment_expression OP_ASSIGN_DIV input_expression .)
    FALSE           reduce using rule 39 (assignment_expression -> assignment_expression OP_ASSIGN_DIV input_expression .)


state 92

    (34) assignment_expression -> assignment_expression OP_ASSIGN_DIV logical_expression .
    (43) logical_expression -> logical_expression . logical_operators equality_expression
    (56) logical_operators -> . OP_LOGIC_AND
    (57) logical_operators -> . OP_LOGIC_OR

    OP_ASSIGN_SIMPLE reduce using rule 34 (assignment_expression -> assignment_expression OP_ASSIGN_DIV logical_expression .)
    OP_ASSIGN_MULT  reduce using rule 34 (assignment_expression -> assignment_expression OP_ASSIGN_DIV logical_expression .)
    OP_ASSIGN_DIV   reduce using rule 34 (assignment_expression -> assignment_expression OP_ASSIGN_DIV logical_expression .)
    OP_ASSIGN_ADD   reduce using rule 34 (assignment_expression -> assignment_expression OP_ASSIGN_DIV logical_expression .)
    OP_ASSIGN_SUBTRACT reduce using rule 34 (assignment_expression -> assignment_expression OP_ASSIGN_DIV logical_expression .)
    S_SEMI_COL      reduce using rule 34 (assignment_expression -> assignment_expression OP_ASSIGN_DIV logical_expression .)
    LIT_INT         reduce using rule 34 (assignment_expression -> assignment_expression OP_ASSIGN_DIV logical_expression .)
    LIT_REAL        reduce using rule 34 (assignment_expression -> assignment_expression OP_ASSIGN_DIV logical_expression .)
    LIT_STRING      reduce using rule 34 (assignment_expression -> assignment_expression OP_ASSIGN_DIV logical_expression .)
    ID              reduce using rule 34 (assignment_expression -> assignment_expression OP_ASSIGN_DIV logical_expression .)
    CONST           reduce using rule 34 (assignment_expression -> assignment_expression OP_ASSIGN_DIV logical_expression .)
    TRUE            reduce using rule 34 (assignment_expression -> assignment_expression OP_ASSIGN_DIV logical_expression .)
    FALSE           reduce using rule 34 (assignment_expression -> assignment_expression OP_ASSIGN_DIV logical_expression .)
    OP_LOGIC_AND    shift and go to state 119
    OP_LOGIC_OR     shift and go to state 120

    logical_operators              shift and go to state 121

state 93

    (50) input_expression -> ID OP_DOT ID . S_LPAREN S_RPAREN

    S_LPAREN        shift and go to state 122


state 94

    (30) conditional_expression -> S_LPAREN logical_expression . S_RPAREN
    (43) logical_expression -> logical_expression . logical_operators equality_expression
    (56) logical_operators -> . OP_LOGIC_AND
    (57) logical_operators -> . OP_LOGIC_OR

    S_RPAREN        shift and go to state 123
    OP_LOGIC_AND    shift and go to state 119
    OP_LOGIC_OR     shift and go to state 120

    logical_operators              shift and go to state 121

state 95

    (22) selection_statement -> IF conditional_expression block_statement_list .

    ELSE            reduce using rule 22 (selection_statement -> IF conditional_expression block_statement_list .)
    S_RCURLY_BRACE  reduce using rule 22 (selection_statement -> IF conditional_expression block_statement_list .)
    IF              reduce using rule 22 (selection_statement -> IF conditional_expression block_statement_list .)
    WHILE           reduce using rule 22 (selection_statement -> IF conditional_expression block_statement_list .)
    DO              reduce using rule 22 (selection_statement -> IF conditional_expression block_statement_list .)
    FOR             reduce using rule 22 (selection_statement -> IF conditional_expression block_statement_list .)
    CONST           reduce using rule 22 (selection_statement -> IF conditional_expression block_statement_list .)
    ID              reduce using rule 22 (selection_statement -> IF conditional_expression block_statement_list .)
    INT             reduce using rule 22 (selection_statement -> IF conditional_expression block_statement_list .)
    BOOLEAN         reduce using rule 22 (selection_statement -> IF conditional_expression block_statement_list .)
    STRING          reduce using rule 22 (selection_statement -> IF conditional_expression block_statement_list .)
    DOUBLE          reduce using rule 22 (selection_statement -> IF conditional_expression block_statement_list .)
    S_SEMI_COL      reduce using rule 22 (selection_statement -> IF conditional_expression block_statement_list .)


state 96

    (25) iteration_statement -> WHILE conditional_expression block_statement_list .

    S_RCURLY_BRACE  reduce using rule 25 (iteration_statement -> WHILE conditional_expression block_statement_list .)
    IF              reduce using rule 25 (iteration_statement -> WHILE conditional_expression block_statement_list .)
    WHILE           reduce using rule 25 (iteration_statement -> WHILE conditional_expression block_statement_list .)
    DO              reduce using rule 25 (iteration_statement -> WHILE conditional_expression block_statement_list .)
    FOR             reduce using rule 25 (iteration_statement -> WHILE conditional_expression block_statement_list .)
    CONST           reduce using rule 25 (iteration_statement -> WHILE conditional_expression block_statement_list .)
    ID              reduce using rule 25 (iteration_statement -> WHILE conditional_expression block_statement_list .)
    INT             reduce using rule 25 (iteration_statement -> WHILE conditional_expression block_statement_list .)
    BOOLEAN         reduce using rule 25 (iteration_statement -> WHILE conditional_expression block_statement_list .)
    STRING          reduce using rule 25 (iteration_statement -> WHILE conditional_expression block_statement_list .)
    DOUBLE          reduce using rule 25 (iteration_statement -> WHILE conditional_expression block_statement_list .)
    S_SEMI_COL      reduce using rule 25 (iteration_statement -> WHILE conditional_expression block_statement_list .)


state 97

    (23) selection_statement -> selection_statement ELSE IF conditional_expression . block_statement_list
    (29) block_statement_list -> . S_LCURLY_BRACE statement_list S_RCURLY_BRACE

    S_LCURLY_BRACE  shift and go to state 47

    block_statement_list           shift and go to state 124

state 98

    (28) iteration_statement -> FOR S_LPAREN declaration_expression logical_expression . ID OP_ARITH_DECREMENT S_RPAREN block_statement_list
    (43) logical_expression -> logical_expression . logical_operators equality_expression
    (56) logical_operators -> . OP_LOGIC_AND
    (57) logical_operators -> . OP_LOGIC_OR

    ID              shift and go to state 125
    OP_LOGIC_AND    shift and go to state 119
    OP_LOGIC_OR     shift and go to state 120

    logical_operators              shift and go to state 121

state 99

    (27) iteration_statement -> FOR S_LPAREN declaration_expression S_SEMI_COL . logical_expression S_SEMI_COL ID OP_ARITH_INCREMENT S_RPAREN block_statement_list
    (42) logical_expression -> . equality_expression
    (43) logical_expression -> . logical_expression logical_operators equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression equality_operators relational_expression
    (46) relational_expression -> . math_expression
    (47) relational_expression -> . relational_expression relational_operators math_expression
    (48) math_expression -> . primary_expression
    (49) math_expression -> . math_expression math_operators primary_expression
    (72) primary_expression -> . variable_expression
    (73) primary_expression -> . boolean_expression
    (74) primary_expression -> . LIT_INT
    (75) primary_expression -> . LIT_REAL
    (76) primary_expression -> . LIT_STRING
    (77) variable_expression -> . ID
    (78) variable_expression -> . CONST
    (79) boolean_expression -> . TRUE
    (80) boolean_expression -> . FALSE

    LIT_INT         shift and go to state 78
    LIT_REAL        shift and go to state 84
    LIT_STRING      shift and go to state 82
    ID              shift and go to state 59
    CONST           shift and go to state 77
    TRUE            shift and go to state 75
    FALSE           shift and go to state 70

    variable_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    math_expression                shift and go to state 79
    equality_expression            shift and go to state 73
    primary_expression             shift and go to state 83
    boolean_expression             shift and go to state 74
    logical_expression             shift and go to state 126

state 100

    (26) iteration_statement -> DO block_statement_list WHILE conditional_expression .

    S_RCURLY_BRACE  reduce using rule 26 (iteration_statement -> DO block_statement_list WHILE conditional_expression .)
    IF              reduce using rule 26 (iteration_statement -> DO block_statement_list WHILE conditional_expression .)
    WHILE           reduce using rule 26 (iteration_statement -> DO block_statement_list WHILE conditional_expression .)
    DO              reduce using rule 26 (iteration_statement -> DO block_statement_list WHILE conditional_expression .)
    FOR             reduce using rule 26 (iteration_statement -> DO block_statement_list WHILE conditional_expression .)
    CONST           reduce using rule 26 (iteration_statement -> DO block_statement_list WHILE conditional_expression .)
    ID              reduce using rule 26 (iteration_statement -> DO block_statement_list WHILE conditional_expression .)
    INT             reduce using rule 26 (iteration_statement -> DO block_statement_list WHILE conditional_expression .)
    BOOLEAN         reduce using rule 26 (iteration_statement -> DO block_statement_list WHILE conditional_expression .)
    STRING          reduce using rule 26 (iteration_statement -> DO block_statement_list WHILE conditional_expression .)
    DOUBLE          reduce using rule 26 (iteration_statement -> DO block_statement_list WHILE conditional_expression .)
    S_SEMI_COL      reduce using rule 26 (iteration_statement -> DO block_statement_list WHILE conditional_expression .)


state 101

    (29) block_statement_list -> S_LCURLY_BRACE statement_list S_RCURLY_BRACE .

    S_RCURLY_BRACE  reduce using rule 29 (block_statement_list -> S_LCURLY_BRACE statement_list S_RCURLY_BRACE .)
    IF              reduce using rule 29 (block_statement_list -> S_LCURLY_BRACE statement_list S_RCURLY_BRACE .)
    WHILE           reduce using rule 29 (block_statement_list -> S_LCURLY_BRACE statement_list S_RCURLY_BRACE .)
    DO              reduce using rule 29 (block_statement_list -> S_LCURLY_BRACE statement_list S_RCURLY_BRACE .)
    FOR             reduce using rule 29 (block_statement_list -> S_LCURLY_BRACE statement_list S_RCURLY_BRACE .)
    CONST           reduce using rule 29 (block_statement_list -> S_LCURLY_BRACE statement_list S_RCURLY_BRACE .)
    ID              reduce using rule 29 (block_statement_list -> S_LCURLY_BRACE statement_list S_RCURLY_BRACE .)
    INT             reduce using rule 29 (block_statement_list -> S_LCURLY_BRACE statement_list S_RCURLY_BRACE .)
    BOOLEAN         reduce using rule 29 (block_statement_list -> S_LCURLY_BRACE statement_list S_RCURLY_BRACE .)
    STRING          reduce using rule 29 (block_statement_list -> S_LCURLY_BRACE statement_list S_RCURLY_BRACE .)
    DOUBLE          reduce using rule 29 (block_statement_list -> S_LCURLY_BRACE statement_list S_RCURLY_BRACE .)
    S_SEMI_COL      reduce using rule 29 (block_statement_list -> S_LCURLY_BRACE statement_list S_RCURLY_BRACE .)
    ELSE            reduce using rule 29 (block_statement_list -> S_LCURLY_BRACE statement_list S_RCURLY_BRACE .)


state 102

    (60) relational_operators -> OP_EQUALITY_LESSER_THAN .

    LIT_INT         reduce using rule 60 (relational_operators -> OP_EQUALITY_LESSER_THAN .)
    LIT_REAL        reduce using rule 60 (relational_operators -> OP_EQUALITY_LESSER_THAN .)
    LIT_STRING      reduce using rule 60 (relational_operators -> OP_EQUALITY_LESSER_THAN .)
    ID              reduce using rule 60 (relational_operators -> OP_EQUALITY_LESSER_THAN .)
    CONST           reduce using rule 60 (relational_operators -> OP_EQUALITY_LESSER_THAN .)
    TRUE            reduce using rule 60 (relational_operators -> OP_EQUALITY_LESSER_THAN .)
    FALSE           reduce using rule 60 (relational_operators -> OP_EQUALITY_LESSER_THAN .)


state 103

    (63) relational_operators -> OP_EQUALITY_GREATER_OR_EQUAL_THAN .

    LIT_INT         reduce using rule 63 (relational_operators -> OP_EQUALITY_GREATER_OR_EQUAL_THAN .)
    LIT_REAL        reduce using rule 63 (relational_operators -> OP_EQUALITY_GREATER_OR_EQUAL_THAN .)
    LIT_STRING      reduce using rule 63 (relational_operators -> OP_EQUALITY_GREATER_OR_EQUAL_THAN .)
    ID              reduce using rule 63 (relational_operators -> OP_EQUALITY_GREATER_OR_EQUAL_THAN .)
    CONST           reduce using rule 63 (relational_operators -> OP_EQUALITY_GREATER_OR_EQUAL_THAN .)
    TRUE            reduce using rule 63 (relational_operators -> OP_EQUALITY_GREATER_OR_EQUAL_THAN .)
    FALSE           reduce using rule 63 (relational_operators -> OP_EQUALITY_GREATER_OR_EQUAL_THAN .)


state 104

    (62) relational_operators -> OP_EQUALITY_LESSER_OR_EQUAL_THAN .

    LIT_INT         reduce using rule 62 (relational_operators -> OP_EQUALITY_LESSER_OR_EQUAL_THAN .)
    LIT_REAL        reduce using rule 62 (relational_operators -> OP_EQUALITY_LESSER_OR_EQUAL_THAN .)
    LIT_STRING      reduce using rule 62 (relational_operators -> OP_EQUALITY_LESSER_OR_EQUAL_THAN .)
    ID              reduce using rule 62 (relational_operators -> OP_EQUALITY_LESSER_OR_EQUAL_THAN .)
    CONST           reduce using rule 62 (relational_operators -> OP_EQUALITY_LESSER_OR_EQUAL_THAN .)
    TRUE            reduce using rule 62 (relational_operators -> OP_EQUALITY_LESSER_OR_EQUAL_THAN .)
    FALSE           reduce using rule 62 (relational_operators -> OP_EQUALITY_LESSER_OR_EQUAL_THAN .)


state 105

    (47) relational_expression -> relational_expression relational_operators . math_expression
    (48) math_expression -> . primary_expression
    (49) math_expression -> . math_expression math_operators primary_expression
    (72) primary_expression -> . variable_expression
    (73) primary_expression -> . boolean_expression
    (74) primary_expression -> . LIT_INT
    (75) primary_expression -> . LIT_REAL
    (76) primary_expression -> . LIT_STRING
    (77) variable_expression -> . ID
    (78) variable_expression -> . CONST
    (79) boolean_expression -> . TRUE
    (80) boolean_expression -> . FALSE

    LIT_INT         shift and go to state 78
    LIT_REAL        shift and go to state 84
    LIT_STRING      shift and go to state 82
    ID              shift and go to state 59
    CONST           shift and go to state 77
    TRUE            shift and go to state 75
    FALSE           shift and go to state 70

    math_expression                shift and go to state 127
    variable_expression            shift and go to state 71
    primary_expression             shift and go to state 83
    boolean_expression             shift and go to state 74

state 106

    (61) relational_operators -> OP_EQUALITY_GREATER_THAN .

    LIT_INT         reduce using rule 61 (relational_operators -> OP_EQUALITY_GREATER_THAN .)
    LIT_REAL        reduce using rule 61 (relational_operators -> OP_EQUALITY_GREATER_THAN .)
    LIT_STRING      reduce using rule 61 (relational_operators -> OP_EQUALITY_GREATER_THAN .)
    ID              reduce using rule 61 (relational_operators -> OP_EQUALITY_GREATER_THAN .)
    CONST           reduce using rule 61 (relational_operators -> OP_EQUALITY_GREATER_THAN .)
    TRUE            reduce using rule 61 (relational_operators -> OP_EQUALITY_GREATER_THAN .)
    FALSE           reduce using rule 61 (relational_operators -> OP_EQUALITY_GREATER_THAN .)


state 107

    (45) equality_expression -> equality_expression equality_operators . relational_expression
    (46) relational_expression -> . math_expression
    (47) relational_expression -> . relational_expression relational_operators math_expression
    (48) math_expression -> . primary_expression
    (49) math_expression -> . math_expression math_operators primary_expression
    (72) primary_expression -> . variable_expression
    (73) primary_expression -> . boolean_expression
    (74) primary_expression -> . LIT_INT
    (75) primary_expression -> . LIT_REAL
    (76) primary_expression -> . LIT_STRING
    (77) variable_expression -> . ID
    (78) variable_expression -> . CONST
    (79) boolean_expression -> . TRUE
    (80) boolean_expression -> . FALSE

    LIT_INT         shift and go to state 78
    LIT_REAL        shift and go to state 84
    LIT_STRING      shift and go to state 82
    ID              shift and go to state 59
    CONST           shift and go to state 77
    TRUE            shift and go to state 75
    FALSE           shift and go to state 70

    relational_expression          shift and go to state 128
    math_expression                shift and go to state 79
    primary_expression             shift and go to state 83
    boolean_expression             shift and go to state 74
    variable_expression            shift and go to state 71

state 108

    (58) equality_operators -> OP_EQUALITY_EQUAL .

    LIT_INT         reduce using rule 58 (equality_operators -> OP_EQUALITY_EQUAL .)
    LIT_REAL        reduce using rule 58 (equality_operators -> OP_EQUALITY_EQUAL .)
    LIT_STRING      reduce using rule 58 (equality_operators -> OP_EQUALITY_EQUAL .)
    ID              reduce using rule 58 (equality_operators -> OP_EQUALITY_EQUAL .)
    CONST           reduce using rule 58 (equality_operators -> OP_EQUALITY_EQUAL .)
    TRUE            reduce using rule 58 (equality_operators -> OP_EQUALITY_EQUAL .)
    FALSE           reduce using rule 58 (equality_operators -> OP_EQUALITY_EQUAL .)


state 109

    (59) equality_operators -> OP_EQUALITY_NOT_EQUAL .

    LIT_INT         reduce using rule 59 (equality_operators -> OP_EQUALITY_NOT_EQUAL .)
    LIT_REAL        reduce using rule 59 (equality_operators -> OP_EQUALITY_NOT_EQUAL .)
    LIT_STRING      reduce using rule 59 (equality_operators -> OP_EQUALITY_NOT_EQUAL .)
    ID              reduce using rule 59 (equality_operators -> OP_EQUALITY_NOT_EQUAL .)
    CONST           reduce using rule 59 (equality_operators -> OP_EQUALITY_NOT_EQUAL .)
    TRUE            reduce using rule 59 (equality_operators -> OP_EQUALITY_NOT_EQUAL .)
    FALSE           reduce using rule 59 (equality_operators -> OP_EQUALITY_NOT_EQUAL .)


state 110

    (67) math_operators -> OP_ARITH_DIVIDE .

    LIT_INT         reduce using rule 67 (math_operators -> OP_ARITH_DIVIDE .)
    LIT_REAL        reduce using rule 67 (math_operators -> OP_ARITH_DIVIDE .)
    LIT_STRING      reduce using rule 67 (math_operators -> OP_ARITH_DIVIDE .)
    ID              reduce using rule 67 (math_operators -> OP_ARITH_DIVIDE .)
    CONST           reduce using rule 67 (math_operators -> OP_ARITH_DIVIDE .)
    TRUE            reduce using rule 67 (math_operators -> OP_ARITH_DIVIDE .)
    FALSE           reduce using rule 67 (math_operators -> OP_ARITH_DIVIDE .)


state 111

    (69) math_operators -> OP_ARITH_MODULE .

    LIT_INT         reduce using rule 69 (math_operators -> OP_ARITH_MODULE .)
    LIT_REAL        reduce using rule 69 (math_operators -> OP_ARITH_MODULE .)
    LIT_STRING      reduce using rule 69 (math_operators -> OP_ARITH_MODULE .)
    ID              reduce using rule 69 (math_operators -> OP_ARITH_MODULE .)
    CONST           reduce using rule 69 (math_operators -> OP_ARITH_MODULE .)
    TRUE            reduce using rule 69 (math_operators -> OP_ARITH_MODULE .)
    FALSE           reduce using rule 69 (math_operators -> OP_ARITH_MODULE .)


state 112

    (71) math_operators -> OP_ARITH_DECREMENT .

    LIT_INT         reduce using rule 71 (math_operators -> OP_ARITH_DECREMENT .)
    LIT_REAL        reduce using rule 71 (math_operators -> OP_ARITH_DECREMENT .)
    LIT_STRING      reduce using rule 71 (math_operators -> OP_ARITH_DECREMENT .)
    ID              reduce using rule 71 (math_operators -> OP_ARITH_DECREMENT .)
    CONST           reduce using rule 71 (math_operators -> OP_ARITH_DECREMENT .)
    TRUE            reduce using rule 71 (math_operators -> OP_ARITH_DECREMENT .)
    FALSE           reduce using rule 71 (math_operators -> OP_ARITH_DECREMENT .)


state 113

    (65) math_operators -> OP_ARITH_SUBTRACT .

    LIT_INT         reduce using rule 65 (math_operators -> OP_ARITH_SUBTRACT .)
    LIT_REAL        reduce using rule 65 (math_operators -> OP_ARITH_SUBTRACT .)
    LIT_STRING      reduce using rule 65 (math_operators -> OP_ARITH_SUBTRACT .)
    ID              reduce using rule 65 (math_operators -> OP_ARITH_SUBTRACT .)
    CONST           reduce using rule 65 (math_operators -> OP_ARITH_SUBTRACT .)
    TRUE            reduce using rule 65 (math_operators -> OP_ARITH_SUBTRACT .)
    FALSE           reduce using rule 65 (math_operators -> OP_ARITH_SUBTRACT .)


state 114

    (66) math_operators -> OP_ARITH_MULTIPLY .

    LIT_INT         reduce using rule 66 (math_operators -> OP_ARITH_MULTIPLY .)
    LIT_REAL        reduce using rule 66 (math_operators -> OP_ARITH_MULTIPLY .)
    LIT_STRING      reduce using rule 66 (math_operators -> OP_ARITH_MULTIPLY .)
    ID              reduce using rule 66 (math_operators -> OP_ARITH_MULTIPLY .)
    CONST           reduce using rule 66 (math_operators -> OP_ARITH_MULTIPLY .)
    TRUE            reduce using rule 66 (math_operators -> OP_ARITH_MULTIPLY .)
    FALSE           reduce using rule 66 (math_operators -> OP_ARITH_MULTIPLY .)


state 115

    (68) math_operators -> OP_ARITH_INTEGER_DIVIDE .

    LIT_INT         reduce using rule 68 (math_operators -> OP_ARITH_INTEGER_DIVIDE .)
    LIT_REAL        reduce using rule 68 (math_operators -> OP_ARITH_INTEGER_DIVIDE .)
    LIT_STRING      reduce using rule 68 (math_operators -> OP_ARITH_INTEGER_DIVIDE .)
    ID              reduce using rule 68 (math_operators -> OP_ARITH_INTEGER_DIVIDE .)
    CONST           reduce using rule 68 (math_operators -> OP_ARITH_INTEGER_DIVIDE .)
    TRUE            reduce using rule 68 (math_operators -> OP_ARITH_INTEGER_DIVIDE .)
    FALSE           reduce using rule 68 (math_operators -> OP_ARITH_INTEGER_DIVIDE .)


state 116

    (64) math_operators -> OP_ARITH_ADD .

    LIT_INT         reduce using rule 64 (math_operators -> OP_ARITH_ADD .)
    LIT_REAL        reduce using rule 64 (math_operators -> OP_ARITH_ADD .)
    LIT_STRING      reduce using rule 64 (math_operators -> OP_ARITH_ADD .)
    ID              reduce using rule 64 (math_operators -> OP_ARITH_ADD .)
    CONST           reduce using rule 64 (math_operators -> OP_ARITH_ADD .)
    TRUE            reduce using rule 64 (math_operators -> OP_ARITH_ADD .)
    FALSE           reduce using rule 64 (math_operators -> OP_ARITH_ADD .)


state 117

    (49) math_expression -> math_expression math_operators . primary_expression
    (72) primary_expression -> . variable_expression
    (73) primary_expression -> . boolean_expression
    (74) primary_expression -> . LIT_INT
    (75) primary_expression -> . LIT_REAL
    (76) primary_expression -> . LIT_STRING
    (77) variable_expression -> . ID
    (78) variable_expression -> . CONST
    (79) boolean_expression -> . TRUE
    (80) boolean_expression -> . FALSE

    LIT_INT         shift and go to state 78
    LIT_REAL        shift and go to state 84
    LIT_STRING      shift and go to state 82
    ID              shift and go to state 59
    CONST           shift and go to state 77
    TRUE            shift and go to state 75
    FALSE           shift and go to state 70

    primary_expression             shift and go to state 129
    variable_expression            shift and go to state 71
    boolean_expression             shift and go to state 74

state 118

    (70) math_operators -> OP_ARITH_INCREMENT .

    LIT_INT         reduce using rule 70 (math_operators -> OP_ARITH_INCREMENT .)
    LIT_REAL        reduce using rule 70 (math_operators -> OP_ARITH_INCREMENT .)
    LIT_STRING      reduce using rule 70 (math_operators -> OP_ARITH_INCREMENT .)
    ID              reduce using rule 70 (math_operators -> OP_ARITH_INCREMENT .)
    CONST           reduce using rule 70 (math_operators -> OP_ARITH_INCREMENT .)
    TRUE            reduce using rule 70 (math_operators -> OP_ARITH_INCREMENT .)
    FALSE           reduce using rule 70 (math_operators -> OP_ARITH_INCREMENT .)


state 119

    (56) logical_operators -> OP_LOGIC_AND .

    LIT_INT         reduce using rule 56 (logical_operators -> OP_LOGIC_AND .)
    LIT_REAL        reduce using rule 56 (logical_operators -> OP_LOGIC_AND .)
    LIT_STRING      reduce using rule 56 (logical_operators -> OP_LOGIC_AND .)
    ID              reduce using rule 56 (logical_operators -> OP_LOGIC_AND .)
    CONST           reduce using rule 56 (logical_operators -> OP_LOGIC_AND .)
    TRUE            reduce using rule 56 (logical_operators -> OP_LOGIC_AND .)
    FALSE           reduce using rule 56 (logical_operators -> OP_LOGIC_AND .)


state 120

    (57) logical_operators -> OP_LOGIC_OR .

    LIT_INT         reduce using rule 57 (logical_operators -> OP_LOGIC_OR .)
    LIT_REAL        reduce using rule 57 (logical_operators -> OP_LOGIC_OR .)
    LIT_STRING      reduce using rule 57 (logical_operators -> OP_LOGIC_OR .)
    ID              reduce using rule 57 (logical_operators -> OP_LOGIC_OR .)
    CONST           reduce using rule 57 (logical_operators -> OP_LOGIC_OR .)
    TRUE            reduce using rule 57 (logical_operators -> OP_LOGIC_OR .)
    FALSE           reduce using rule 57 (logical_operators -> OP_LOGIC_OR .)


state 121

    (43) logical_expression -> logical_expression logical_operators . equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression equality_operators relational_expression
    (46) relational_expression -> . math_expression
    (47) relational_expression -> . relational_expression relational_operators math_expression
    (48) math_expression -> . primary_expression
    (49) math_expression -> . math_expression math_operators primary_expression
    (72) primary_expression -> . variable_expression
    (73) primary_expression -> . boolean_expression
    (74) primary_expression -> . LIT_INT
    (75) primary_expression -> . LIT_REAL
    (76) primary_expression -> . LIT_STRING
    (77) variable_expression -> . ID
    (78) variable_expression -> . CONST
    (79) boolean_expression -> . TRUE
    (80) boolean_expression -> . FALSE

    LIT_INT         shift and go to state 78
    LIT_REAL        shift and go to state 84
    LIT_STRING      shift and go to state 82
    ID              shift and go to state 59
    CONST           shift and go to state 77
    TRUE            shift and go to state 75
    FALSE           shift and go to state 70

    relational_expression          shift and go to state 72
    math_expression                shift and go to state 79
    variable_expression            shift and go to state 71
    primary_expression             shift and go to state 83
    boolean_expression             shift and go to state 74
    equality_expression            shift and go to state 130

state 122

    (50) input_expression -> ID OP_DOT ID S_LPAREN . S_RPAREN

    S_RPAREN        shift and go to state 131


state 123

    (30) conditional_expression -> S_LPAREN logical_expression S_RPAREN .

    S_LCURLY_BRACE  reduce using rule 30 (conditional_expression -> S_LPAREN logical_expression S_RPAREN .)
    S_SEMI_COL      reduce using rule 30 (conditional_expression -> S_LPAREN logical_expression S_RPAREN .)
    S_RCURLY_BRACE  reduce using rule 30 (conditional_expression -> S_LPAREN logical_expression S_RPAREN .)
    IF              reduce using rule 30 (conditional_expression -> S_LPAREN logical_expression S_RPAREN .)
    WHILE           reduce using rule 30 (conditional_expression -> S_LPAREN logical_expression S_RPAREN .)
    DO              reduce using rule 30 (conditional_expression -> S_LPAREN logical_expression S_RPAREN .)
    FOR             reduce using rule 30 (conditional_expression -> S_LPAREN logical_expression S_RPAREN .)
    CONST           reduce using rule 30 (conditional_expression -> S_LPAREN logical_expression S_RPAREN .)
    ID              reduce using rule 30 (conditional_expression -> S_LPAREN logical_expression S_RPAREN .)
    INT             reduce using rule 30 (conditional_expression -> S_LPAREN logical_expression S_RPAREN .)
    BOOLEAN         reduce using rule 30 (conditional_expression -> S_LPAREN logical_expression S_RPAREN .)
    STRING          reduce using rule 30 (conditional_expression -> S_LPAREN logical_expression S_RPAREN .)
    DOUBLE          reduce using rule 30 (conditional_expression -> S_LPAREN logical_expression S_RPAREN .)


state 124

    (23) selection_statement -> selection_statement ELSE IF conditional_expression block_statement_list .

    ELSE            reduce using rule 23 (selection_statement -> selection_statement ELSE IF conditional_expression block_statement_list .)
    S_RCURLY_BRACE  reduce using rule 23 (selection_statement -> selection_statement ELSE IF conditional_expression block_statement_list .)
    IF              reduce using rule 23 (selection_statement -> selection_statement ELSE IF conditional_expression block_statement_list .)
    WHILE           reduce using rule 23 (selection_statement -> selection_statement ELSE IF conditional_expression block_statement_list .)
    DO              reduce using rule 23 (selection_statement -> selection_statement ELSE IF conditional_expression block_statement_list .)
    FOR             reduce using rule 23 (selection_statement -> selection_statement ELSE IF conditional_expression block_statement_list .)
    CONST           reduce using rule 23 (selection_statement -> selection_statement ELSE IF conditional_expression block_statement_list .)
    ID              reduce using rule 23 (selection_statement -> selection_statement ELSE IF conditional_expression block_statement_list .)
    INT             reduce using rule 23 (selection_statement -> selection_statement ELSE IF conditional_expression block_statement_list .)
    BOOLEAN         reduce using rule 23 (selection_statement -> selection_statement ELSE IF conditional_expression block_statement_list .)
    STRING          reduce using rule 23 (selection_statement -> selection_statement ELSE IF conditional_expression block_statement_list .)
    DOUBLE          reduce using rule 23 (selection_statement -> selection_statement ELSE IF conditional_expression block_statement_list .)
    S_SEMI_COL      reduce using rule 23 (selection_statement -> selection_statement ELSE IF conditional_expression block_statement_list .)


state 125

    (28) iteration_statement -> FOR S_LPAREN declaration_expression logical_expression ID . OP_ARITH_DECREMENT S_RPAREN block_statement_list

    OP_ARITH_DECREMENT shift and go to state 132


state 126

    (27) iteration_statement -> FOR S_LPAREN declaration_expression S_SEMI_COL logical_expression . S_SEMI_COL ID OP_ARITH_INCREMENT S_RPAREN block_statement_list
    (43) logical_expression -> logical_expression . logical_operators equality_expression
    (56) logical_operators -> . OP_LOGIC_AND
    (57) logical_operators -> . OP_LOGIC_OR

    S_SEMI_COL      shift and go to state 133
    OP_LOGIC_AND    shift and go to state 119
    OP_LOGIC_OR     shift and go to state 120

    logical_operators              shift and go to state 121

state 127

    (47) relational_expression -> relational_expression relational_operators math_expression .
    (49) math_expression -> math_expression . math_operators primary_expression
    (64) math_operators -> . OP_ARITH_ADD
    (65) math_operators -> . OP_ARITH_SUBTRACT
    (66) math_operators -> . OP_ARITH_MULTIPLY
    (67) math_operators -> . OP_ARITH_DIVIDE
    (68) math_operators -> . OP_ARITH_INTEGER_DIVIDE
    (69) math_operators -> . OP_ARITH_MODULE
    (70) math_operators -> . OP_ARITH_INCREMENT
    (71) math_operators -> . OP_ARITH_DECREMENT

    OP_EQUALITY_LESSER_THAN reduce using rule 47 (relational_expression -> relational_expression relational_operators math_expression .)
    OP_EQUALITY_GREATER_THAN reduce using rule 47 (relational_expression -> relational_expression relational_operators math_expression .)
    OP_EQUALITY_LESSER_OR_EQUAL_THAN reduce using rule 47 (relational_expression -> relational_expression relational_operators math_expression .)
    OP_EQUALITY_GREATER_OR_EQUAL_THAN reduce using rule 47 (relational_expression -> relational_expression relational_operators math_expression .)
    OP_EQUALITY_EQUAL reduce using rule 47 (relational_expression -> relational_expression relational_operators math_expression .)
    OP_EQUALITY_NOT_EQUAL reduce using rule 47 (relational_expression -> relational_expression relational_operators math_expression .)
    S_SEMI_COL      reduce using rule 47 (relational_expression -> relational_expression relational_operators math_expression .)
    OP_LOGIC_AND    reduce using rule 47 (relational_expression -> relational_expression relational_operators math_expression .)
    OP_LOGIC_OR     reduce using rule 47 (relational_expression -> relational_expression relational_operators math_expression .)
    S_RPAREN        reduce using rule 47 (relational_expression -> relational_expression relational_operators math_expression .)
    OP_ASSIGN_SIMPLE reduce using rule 47 (relational_expression -> relational_expression relational_operators math_expression .)
    OP_ASSIGN_MULT  reduce using rule 47 (relational_expression -> relational_expression relational_operators math_expression .)
    OP_ASSIGN_DIV   reduce using rule 47 (relational_expression -> relational_expression relational_operators math_expression .)
    OP_ASSIGN_ADD   reduce using rule 47 (relational_expression -> relational_expression relational_operators math_expression .)
    OP_ASSIGN_SUBTRACT reduce using rule 47 (relational_expression -> relational_expression relational_operators math_expression .)
    LIT_INT         reduce using rule 47 (relational_expression -> relational_expression relational_operators math_expression .)
    LIT_REAL        reduce using rule 47 (relational_expression -> relational_expression relational_operators math_expression .)
    LIT_STRING      reduce using rule 47 (relational_expression -> relational_expression relational_operators math_expression .)
    ID              reduce using rule 47 (relational_expression -> relational_expression relational_operators math_expression .)
    CONST           reduce using rule 47 (relational_expression -> relational_expression relational_operators math_expression .)
    TRUE            reduce using rule 47 (relational_expression -> relational_expression relational_operators math_expression .)
    FALSE           reduce using rule 47 (relational_expression -> relational_expression relational_operators math_expression .)
    OP_ARITH_ADD    shift and go to state 116
    OP_ARITH_SUBTRACT shift and go to state 113
    OP_ARITH_MULTIPLY shift and go to state 114
    OP_ARITH_DIVIDE shift and go to state 110
    OP_ARITH_INTEGER_DIVIDE shift and go to state 115
    OP_ARITH_MODULE shift and go to state 111
    OP_ARITH_INCREMENT shift and go to state 118
    OP_ARITH_DECREMENT shift and go to state 112

    math_operators                 shift and go to state 117

state 128

    (45) equality_expression -> equality_expression equality_operators relational_expression .
    (47) relational_expression -> relational_expression . relational_operators math_expression
    (60) relational_operators -> . OP_EQUALITY_LESSER_THAN
    (61) relational_operators -> . OP_EQUALITY_GREATER_THAN
    (62) relational_operators -> . OP_EQUALITY_LESSER_OR_EQUAL_THAN
    (63) relational_operators -> . OP_EQUALITY_GREATER_OR_EQUAL_THAN

    OP_EQUALITY_EQUAL reduce using rule 45 (equality_expression -> equality_expression equality_operators relational_expression .)
    OP_EQUALITY_NOT_EQUAL reduce using rule 45 (equality_expression -> equality_expression equality_operators relational_expression .)
    ID              reduce using rule 45 (equality_expression -> equality_expression equality_operators relational_expression .)
    OP_LOGIC_AND    reduce using rule 45 (equality_expression -> equality_expression equality_operators relational_expression .)
    OP_LOGIC_OR     reduce using rule 45 (equality_expression -> equality_expression equality_operators relational_expression .)
    OP_ASSIGN_SIMPLE reduce using rule 45 (equality_expression -> equality_expression equality_operators relational_expression .)
    OP_ASSIGN_MULT  reduce using rule 45 (equality_expression -> equality_expression equality_operators relational_expression .)
    OP_ASSIGN_DIV   reduce using rule 45 (equality_expression -> equality_expression equality_operators relational_expression .)
    OP_ASSIGN_ADD   reduce using rule 45 (equality_expression -> equality_expression equality_operators relational_expression .)
    OP_ASSIGN_SUBTRACT reduce using rule 45 (equality_expression -> equality_expression equality_operators relational_expression .)
    S_SEMI_COL      reduce using rule 45 (equality_expression -> equality_expression equality_operators relational_expression .)
    LIT_INT         reduce using rule 45 (equality_expression -> equality_expression equality_operators relational_expression .)
    LIT_REAL        reduce using rule 45 (equality_expression -> equality_expression equality_operators relational_expression .)
    LIT_STRING      reduce using rule 45 (equality_expression -> equality_expression equality_operators relational_expression .)
    CONST           reduce using rule 45 (equality_expression -> equality_expression equality_operators relational_expression .)
    TRUE            reduce using rule 45 (equality_expression -> equality_expression equality_operators relational_expression .)
    FALSE           reduce using rule 45 (equality_expression -> equality_expression equality_operators relational_expression .)
    S_RPAREN        reduce using rule 45 (equality_expression -> equality_expression equality_operators relational_expression .)
    OP_EQUALITY_LESSER_THAN shift and go to state 102
    OP_EQUALITY_GREATER_THAN shift and go to state 106
    OP_EQUALITY_LESSER_OR_EQUAL_THAN shift and go to state 104
    OP_EQUALITY_GREATER_OR_EQUAL_THAN shift and go to state 103

    relational_operators           shift and go to state 105

state 129

    (49) math_expression -> math_expression math_operators primary_expression .

    OP_ARITH_ADD    reduce using rule 49 (math_expression -> math_expression math_operators primary_expression .)
    OP_ARITH_SUBTRACT reduce using rule 49 (math_expression -> math_expression math_operators primary_expression .)
    OP_ARITH_MULTIPLY reduce using rule 49 (math_expression -> math_expression math_operators primary_expression .)
    OP_ARITH_DIVIDE reduce using rule 49 (math_expression -> math_expression math_operators primary_expression .)
    OP_ARITH_INTEGER_DIVIDE reduce using rule 49 (math_expression -> math_expression math_operators primary_expression .)
    OP_ARITH_MODULE reduce using rule 49 (math_expression -> math_expression math_operators primary_expression .)
    OP_ARITH_INCREMENT reduce using rule 49 (math_expression -> math_expression math_operators primary_expression .)
    OP_ARITH_DECREMENT reduce using rule 49 (math_expression -> math_expression math_operators primary_expression .)
    OP_EQUALITY_LESSER_THAN reduce using rule 49 (math_expression -> math_expression math_operators primary_expression .)
    OP_EQUALITY_GREATER_THAN reduce using rule 49 (math_expression -> math_expression math_operators primary_expression .)
    OP_EQUALITY_LESSER_OR_EQUAL_THAN reduce using rule 49 (math_expression -> math_expression math_operators primary_expression .)
    OP_EQUALITY_GREATER_OR_EQUAL_THAN reduce using rule 49 (math_expression -> math_expression math_operators primary_expression .)
    OP_EQUALITY_EQUAL reduce using rule 49 (math_expression -> math_expression math_operators primary_expression .)
    OP_EQUALITY_NOT_EQUAL reduce using rule 49 (math_expression -> math_expression math_operators primary_expression .)
    ID              reduce using rule 49 (math_expression -> math_expression math_operators primary_expression .)
    OP_LOGIC_AND    reduce using rule 49 (math_expression -> math_expression math_operators primary_expression .)
    OP_LOGIC_OR     reduce using rule 49 (math_expression -> math_expression math_operators primary_expression .)
    OP_ASSIGN_SIMPLE reduce using rule 49 (math_expression -> math_expression math_operators primary_expression .)
    OP_ASSIGN_MULT  reduce using rule 49 (math_expression -> math_expression math_operators primary_expression .)
    OP_ASSIGN_DIV   reduce using rule 49 (math_expression -> math_expression math_operators primary_expression .)
    OP_ASSIGN_ADD   reduce using rule 49 (math_expression -> math_expression math_operators primary_expression .)
    OP_ASSIGN_SUBTRACT reduce using rule 49 (math_expression -> math_expression math_operators primary_expression .)
    S_SEMI_COL      reduce using rule 49 (math_expression -> math_expression math_operators primary_expression .)
    LIT_INT         reduce using rule 49 (math_expression -> math_expression math_operators primary_expression .)
    LIT_REAL        reduce using rule 49 (math_expression -> math_expression math_operators primary_expression .)
    LIT_STRING      reduce using rule 49 (math_expression -> math_expression math_operators primary_expression .)
    CONST           reduce using rule 49 (math_expression -> math_expression math_operators primary_expression .)
    TRUE            reduce using rule 49 (math_expression -> math_expression math_operators primary_expression .)
    FALSE           reduce using rule 49 (math_expression -> math_expression math_operators primary_expression .)
    S_RPAREN        reduce using rule 49 (math_expression -> math_expression math_operators primary_expression .)


state 130

    (43) logical_expression -> logical_expression logical_operators equality_expression .
    (45) equality_expression -> equality_expression . equality_operators relational_expression
    (58) equality_operators -> . OP_EQUALITY_EQUAL
    (59) equality_operators -> . OP_EQUALITY_NOT_EQUAL

    OP_LOGIC_AND    reduce using rule 43 (logical_expression -> logical_expression logical_operators equality_expression .)
    OP_LOGIC_OR     reduce using rule 43 (logical_expression -> logical_expression logical_operators equality_expression .)
    OP_ASSIGN_SIMPLE reduce using rule 43 (logical_expression -> logical_expression logical_operators equality_expression .)
    OP_ASSIGN_MULT  reduce using rule 43 (logical_expression -> logical_expression logical_operators equality_expression .)
    OP_ASSIGN_DIV   reduce using rule 43 (logical_expression -> logical_expression logical_operators equality_expression .)
    OP_ASSIGN_ADD   reduce using rule 43 (logical_expression -> logical_expression logical_operators equality_expression .)
    OP_ASSIGN_SUBTRACT reduce using rule 43 (logical_expression -> logical_expression logical_operators equality_expression .)
    S_SEMI_COL      reduce using rule 43 (logical_expression -> logical_expression logical_operators equality_expression .)
    LIT_INT         reduce using rule 43 (logical_expression -> logical_expression logical_operators equality_expression .)
    LIT_REAL        reduce using rule 43 (logical_expression -> logical_expression logical_operators equality_expression .)
    LIT_STRING      reduce using rule 43 (logical_expression -> logical_expression logical_operators equality_expression .)
    ID              reduce using rule 43 (logical_expression -> logical_expression logical_operators equality_expression .)
    CONST           reduce using rule 43 (logical_expression -> logical_expression logical_operators equality_expression .)
    TRUE            reduce using rule 43 (logical_expression -> logical_expression logical_operators equality_expression .)
    FALSE           reduce using rule 43 (logical_expression -> logical_expression logical_operators equality_expression .)
    S_RPAREN        reduce using rule 43 (logical_expression -> logical_expression logical_operators equality_expression .)
    OP_EQUALITY_EQUAL shift and go to state 108
    OP_EQUALITY_NOT_EQUAL shift and go to state 109

    equality_operators             shift and go to state 107

state 131

    (50) input_expression -> ID OP_DOT ID S_LPAREN S_RPAREN .

    S_SEMI_COL      reduce using rule 50 (input_expression -> ID OP_DOT ID S_LPAREN S_RPAREN .)
    OP_ASSIGN_SIMPLE reduce using rule 50 (input_expression -> ID OP_DOT ID S_LPAREN S_RPAREN .)
    OP_ASSIGN_MULT  reduce using rule 50 (input_expression -> ID OP_DOT ID S_LPAREN S_RPAREN .)
    OP_ASSIGN_DIV   reduce using rule 50 (input_expression -> ID OP_DOT ID S_LPAREN S_RPAREN .)
    OP_ASSIGN_ADD   reduce using rule 50 (input_expression -> ID OP_DOT ID S_LPAREN S_RPAREN .)
    OP_ASSIGN_SUBTRACT reduce using rule 50 (input_expression -> ID OP_DOT ID S_LPAREN S_RPAREN .)
    LIT_INT         reduce using rule 50 (input_expression -> ID OP_DOT ID S_LPAREN S_RPAREN .)
    LIT_REAL        reduce using rule 50 (input_expression -> ID OP_DOT ID S_LPAREN S_RPAREN .)
    LIT_STRING      reduce using rule 50 (input_expression -> ID OP_DOT ID S_LPAREN S_RPAREN .)
    ID              reduce using rule 50 (input_expression -> ID OP_DOT ID S_LPAREN S_RPAREN .)
    CONST           reduce using rule 50 (input_expression -> ID OP_DOT ID S_LPAREN S_RPAREN .)
    TRUE            reduce using rule 50 (input_expression -> ID OP_DOT ID S_LPAREN S_RPAREN .)
    FALSE           reduce using rule 50 (input_expression -> ID OP_DOT ID S_LPAREN S_RPAREN .)


state 132

    (28) iteration_statement -> FOR S_LPAREN declaration_expression logical_expression ID OP_ARITH_DECREMENT . S_RPAREN block_statement_list

    S_RPAREN        shift and go to state 134


state 133

    (27) iteration_statement -> FOR S_LPAREN declaration_expression S_SEMI_COL logical_expression S_SEMI_COL . ID OP_ARITH_INCREMENT S_RPAREN block_statement_list

    ID              shift and go to state 135


state 134

    (28) iteration_statement -> FOR S_LPAREN declaration_expression logical_expression ID OP_ARITH_DECREMENT S_RPAREN . block_statement_list
    (29) block_statement_list -> . S_LCURLY_BRACE statement_list S_RCURLY_BRACE

    S_LCURLY_BRACE  shift and go to state 47

    block_statement_list           shift and go to state 136

state 135

    (27) iteration_statement -> FOR S_LPAREN declaration_expression S_SEMI_COL logical_expression S_SEMI_COL ID . OP_ARITH_INCREMENT S_RPAREN block_statement_list

    OP_ARITH_INCREMENT shift and go to state 137


state 136

    (28) iteration_statement -> FOR S_LPAREN declaration_expression logical_expression ID OP_ARITH_DECREMENT S_RPAREN block_statement_list .

    S_RCURLY_BRACE  reduce using rule 28 (iteration_statement -> FOR S_LPAREN declaration_expression logical_expression ID OP_ARITH_DECREMENT S_RPAREN block_statement_list .)
    IF              reduce using rule 28 (iteration_statement -> FOR S_LPAREN declaration_expression logical_expression ID OP_ARITH_DECREMENT S_RPAREN block_statement_list .)
    WHILE           reduce using rule 28 (iteration_statement -> FOR S_LPAREN declaration_expression logical_expression ID OP_ARITH_DECREMENT S_RPAREN block_statement_list .)
    DO              reduce using rule 28 (iteration_statement -> FOR S_LPAREN declaration_expression logical_expression ID OP_ARITH_DECREMENT S_RPAREN block_statement_list .)
    FOR             reduce using rule 28 (iteration_statement -> FOR S_LPAREN declaration_expression logical_expression ID OP_ARITH_DECREMENT S_RPAREN block_statement_list .)
    CONST           reduce using rule 28 (iteration_statement -> FOR S_LPAREN declaration_expression logical_expression ID OP_ARITH_DECREMENT S_RPAREN block_statement_list .)
    ID              reduce using rule 28 (iteration_statement -> FOR S_LPAREN declaration_expression logical_expression ID OP_ARITH_DECREMENT S_RPAREN block_statement_list .)
    INT             reduce using rule 28 (iteration_statement -> FOR S_LPAREN declaration_expression logical_expression ID OP_ARITH_DECREMENT S_RPAREN block_statement_list .)
    BOOLEAN         reduce using rule 28 (iteration_statement -> FOR S_LPAREN declaration_expression logical_expression ID OP_ARITH_DECREMENT S_RPAREN block_statement_list .)
    STRING          reduce using rule 28 (iteration_statement -> FOR S_LPAREN declaration_expression logical_expression ID OP_ARITH_DECREMENT S_RPAREN block_statement_list .)
    DOUBLE          reduce using rule 28 (iteration_statement -> FOR S_LPAREN declaration_expression logical_expression ID OP_ARITH_DECREMENT S_RPAREN block_statement_list .)
    S_SEMI_COL      reduce using rule 28 (iteration_statement -> FOR S_LPAREN declaration_expression logical_expression ID OP_ARITH_DECREMENT S_RPAREN block_statement_list .)


state 137

    (27) iteration_statement -> FOR S_LPAREN declaration_expression S_SEMI_COL logical_expression S_SEMI_COL ID OP_ARITH_INCREMENT . S_RPAREN block_statement_list

    S_RPAREN        shift and go to state 138


state 138

    (27) iteration_statement -> FOR S_LPAREN declaration_expression S_SEMI_COL logical_expression S_SEMI_COL ID OP_ARITH_INCREMENT S_RPAREN . block_statement_list
    (29) block_statement_list -> . S_LCURLY_BRACE statement_list S_RCURLY_BRACE

    S_LCURLY_BRACE  shift and go to state 47

    block_statement_list           shift and go to state 139

state 139

    (27) iteration_statement -> FOR S_LPAREN declaration_expression S_SEMI_COL logical_expression S_SEMI_COL ID OP_ARITH_INCREMENT S_RPAREN block_statement_list .

    S_RCURLY_BRACE  reduce using rule 27 (iteration_statement -> FOR S_LPAREN declaration_expression S_SEMI_COL logical_expression S_SEMI_COL ID OP_ARITH_INCREMENT S_RPAREN block_statement_list .)
    IF              reduce using rule 27 (iteration_statement -> FOR S_LPAREN declaration_expression S_SEMI_COL logical_expression S_SEMI_COL ID OP_ARITH_INCREMENT S_RPAREN block_statement_list .)
    WHILE           reduce using rule 27 (iteration_statement -> FOR S_LPAREN declaration_expression S_SEMI_COL logical_expression S_SEMI_COL ID OP_ARITH_INCREMENT S_RPAREN block_statement_list .)
    DO              reduce using rule 27 (iteration_statement -> FOR S_LPAREN declaration_expression S_SEMI_COL logical_expression S_SEMI_COL ID OP_ARITH_INCREMENT S_RPAREN block_statement_list .)
    FOR             reduce using rule 27 (iteration_statement -> FOR S_LPAREN declaration_expression S_SEMI_COL logical_expression S_SEMI_COL ID OP_ARITH_INCREMENT S_RPAREN block_statement_list .)
    CONST           reduce using rule 27 (iteration_statement -> FOR S_LPAREN declaration_expression S_SEMI_COL logical_expression S_SEMI_COL ID OP_ARITH_INCREMENT S_RPAREN block_statement_list .)
    ID              reduce using rule 27 (iteration_statement -> FOR S_LPAREN declaration_expression S_SEMI_COL logical_expression S_SEMI_COL ID OP_ARITH_INCREMENT S_RPAREN block_statement_list .)
    INT             reduce using rule 27 (iteration_statement -> FOR S_LPAREN declaration_expression S_SEMI_COL logical_expression S_SEMI_COL ID OP_ARITH_INCREMENT S_RPAREN block_statement_list .)
    BOOLEAN         reduce using rule 27 (iteration_statement -> FOR S_LPAREN declaration_expression S_SEMI_COL logical_expression S_SEMI_COL ID OP_ARITH_INCREMENT S_RPAREN block_statement_list .)
    STRING          reduce using rule 27 (iteration_statement -> FOR S_LPAREN declaration_expression S_SEMI_COL logical_expression S_SEMI_COL ID OP_ARITH_INCREMENT S_RPAREN block_statement_list .)
    DOUBLE          reduce using rule 27 (iteration_statement -> FOR S_LPAREN declaration_expression S_SEMI_COL logical_expression S_SEMI_COL ID OP_ARITH_INCREMENT S_RPAREN block_statement_list .)
    S_SEMI_COL      reduce using rule 27 (iteration_statement -> FOR S_LPAREN declaration_expression S_SEMI_COL logical_expression S_SEMI_COL ID OP_ARITH_INCREMENT S_RPAREN block_statement_list .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IMPORT in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 17 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 17 resolved as shift
WARNING: shift/reduce conflict for DO in state 17 resolved as shift
WARNING: shift/reduce conflict for FOR in state 17 resolved as shift
WARNING: shift/reduce conflict for CONST in state 17 resolved as shift
WARNING: shift/reduce conflict for ID in state 17 resolved as shift
WARNING: shift/reduce conflict for INT in state 17 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 17 resolved as shift
WARNING: shift/reduce conflict for STRING in state 17 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 17 resolved as shift
WARNING: shift/reduce conflict for S_SEMI_COL in state 38 resolved as shift
WARNING: shift/reduce conflict for IF in state 47 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 47 resolved as shift
WARNING: shift/reduce conflict for DO in state 47 resolved as shift
WARNING: shift/reduce conflict for FOR in state 47 resolved as shift
WARNING: shift/reduce conflict for CONST in state 47 resolved as shift
WARNING: shift/reduce conflict for ID in state 47 resolved as shift
WARNING: shift/reduce conflict for INT in state 47 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 47 resolved as shift
WARNING: shift/reduce conflict for STRING in state 47 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 47 resolved as shift
