
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSERT BOOLEAN BREAK CASE CATCH CLASS CONST CONTINUE DEFAULT DO DOUBLE ELSE ENUM ERROR EXTENDS FALSE FINAL FINALLY FOR ID IF IMPORT IN INT IS LIT_INT LIT_REAL LIT_STRING MAIN MULTI_COM NEW NULL OP_ARITH_ADD OP_ARITH_DECREMENT OP_ARITH_DIVIDE OP_ARITH_INCREMENT OP_ARITH_INTEGER_DIVIDE OP_ARITH_MODULE OP_ARITH_MULTIPLY OP_ARITH_SUBTRACT OP_ASSIGN_ADD OP_ASSIGN_DIV OP_ASSIGN_MULT OP_ASSIGN_SIMPLE OP_ASSIGN_SUBTRACT OP_DOT OP_EQUALITY_EQUAL OP_EQUALITY_GREATER_OR_EQUAL_THAN OP_EQUALITY_GREATER_THAN OP_EQUALITY_LESSER_OR_EQUAL_THAN OP_EQUALITY_LESSER_THAN OP_EQUALITY_NOT_EQUAL OP_LOGIC_AND OP_LOGIC_NOT OP_LOGIC_OR RETHROW RETURN SINGLE_COM STRING SUPER SWITCH S_LBRACKET S_LCURLY_BRACE S_LPAREN S_RBRACKET S_RCURLY_BRACE S_RPAREN S_SEMI_COL THIS THROW TRUE TRY VOID WHILE WITH\n    root : import_main\n    \n    import_main : import_list main\n    import_list : emptyimport_list : import_statementimport_list : import_list import_statementimport_statement : import_expression S_SEMI_COL\n    main : VOID MAIN S_LPAREN S_RPAREN S_LCURLY_BRACE statement_list S_RCURLY_BRACE\n    statement_list : emptystatement_list : statementstatement_list : statement_list statement\n    statement : expression_statement\n              | selection_statement\n              | iteration_statement\n    expression_statement : declaration_expression semicolonexpression_statement : empty semicolonexpression_statement : input_expression semicolonexpression_statement : output_expression semicolonimport_expression : IMPORT LIT_STRINGdeclaration_expression : assignment_expressiondeclaration_expression : type_specifier declaration_expressiondeclaration_expression : CONST type_specifier declaration_expressionselection_statement : IF conditional_expression block_statement_listselection_statement : selection_statement ELSE IF conditional_expression block_statement_listselection_statement : selection_statement ELSE block_statement_listiteration_statement : WHILE conditional_expression block_statement_listiteration_statement : DO block_statement_list WHILE conditional_expressioniteration_statement : FOR S_LPAREN declaration_expression S_SEMI_COL logical_expression S_SEMI_COL ID OP_ARITH_INCREMENT S_RPAREN block_statement_listiteration_statement : FOR S_LPAREN declaration_expression  logical_expression ID OP_ARITH_DECREMENT S_RPAREN block_statement_listblock_statement_list : S_LCURLY_BRACE statement_list S_RCURLY_BRACEconditional_expression : S_LPAREN logical_expression S_RPARENassignment_expression : variable_expression\n    assignment_expression : assignment_expression OP_ASSIGN_SIMPLE logical_expression\n                        | assignment_expression OP_ASSIGN_MULT logical_expression\n                        | assignment_expression OP_ASSIGN_DIV logical_expression\n                        | assignment_expression OP_ASSIGN_ADD logical_expression\n                        | assignment_expression OP_ASSIGN_SUBTRACT logical_expression\n    \n    assignment_expression : assignment_expression OP_ASSIGN_SIMPLE input_expression\n                        | assignment_expression OP_ASSIGN_MULT input_expression\n                        | assignment_expression OP_ASSIGN_DIV input_expression\n                        | assignment_expression OP_ASSIGN_ADD input_expression\n                        | assignment_expression OP_ASSIGN_SUBTRACT input_expression\n    logical_expression : equality_expressionlogical_expression : logical_expression logical_operators equality_expressionequality_expression : relational_expressionequality_expression : equality_expression equality_operators relational_expressionrelational_expression : math_expressionrelational_expression : relational_expression relational_operators math_expressionmath_expression : primary_expressionmath_expression : math_expression math_operators primary_expressioninput_expression : ID OP_DOT ID S_LPAREN S_RPARENoutput_expression : ID conditional_expression\n    type_specifier : INT\n                   | BOOLEAN\n                   | STRING\n                   | DOUBLE\n    \n    logical_operators : OP_LOGIC_AND\n                      | OP_LOGIC_OR\n    \n    equality_operators : OP_EQUALITY_EQUAL\n                       | OP_EQUALITY_NOT_EQUAL\n    \n    relational_operators : OP_EQUALITY_LESSER_THAN\n                         | OP_EQUALITY_GREATER_THAN\n                         | OP_EQUALITY_LESSER_OR_EQUAL_THAN\n                         | OP_EQUALITY_GREATER_OR_EQUAL_THAN\n    \n    math_operators : OP_ARITH_ADD\n                   | OP_ARITH_SUBTRACT\n                   | OP_ARITH_MULTIPLY\n                   | OP_ARITH_DIVIDE\n                   | OP_ARITH_INTEGER_DIVIDE\n                   | OP_ARITH_MODULE\n                   | OP_ARITH_INCREMENT\n                   | OP_ARITH_DECREMENT\n    \n    primary_expression :  variable_expression\n                       |  boolean_expression\n                       |  LIT_INT\n                       |  LIT_REAL\n                       |  LIT_STRING\n    \n    variable_expression : ID\n                        | CONST\n    \n    boolean_expression : TRUE\n                       | FALSE\n    \n    semicolon : S_SEMI_COL\n    empty : '
    
_lr_action_items = {'OP_LOGIC_AND':([45,68,69,70,71,72,73,74,75,76,77,78,79,80,83,85,87,89,91,93,122,124,125,126,127,129,],[-77,-72,-78,-73,-75,-46,-76,-42,-48,-74,111,-80,-79,-44,-77,111,111,111,111,111,111,-49,-45,-43,-47,111,]),'DO':([16,17,21,24,25,26,37,39,47,48,55,59,60,63,64,67,81,96,97,98,113,128,137,139,],[18,-11,-13,-12,-9,-8,18,18,-15,-81,-14,-16,-10,-17,18,-25,-24,-22,-29,-26,-30,-23,-28,-27,]),'OP_ARITH_ADD':([45,68,69,70,71,72,73,75,76,78,79,83,124,127,],[-77,-72,-78,-73,-75,99,-76,-48,-74,-80,-79,-77,-49,99,]),'CONST':([16,17,19,21,22,23,24,25,26,27,28,33,34,36,37,39,41,43,44,45,47,48,49,50,51,52,53,54,55,59,60,63,64,66,67,68,69,70,71,72,73,74,75,76,78,79,80,81,83,84,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,124,125,126,127,128,131,137,139,],[19,-11,-78,-13,-54,19,-12,-9,-8,-31,-19,-52,-55,-53,19,19,19,69,-20,-77,-15,-81,69,69,69,69,69,19,-14,-16,-10,-17,19,-21,-25,-72,-78,-73,-75,-46,-76,-42,-48,-74,-80,-79,-44,-24,-77,-37,-32,-39,-34,-40,-35,-41,-36,-38,-33,69,-22,-29,-26,-64,-68,-71,-65,-67,69,-66,-69,-70,69,-58,-59,-56,-57,-30,69,69,-63,-60,-62,-61,69,-49,-45,-43,-47,-23,-50,-28,-27,]),'VOID':([0,1,6,7,8,11,],[-82,-4,12,-3,-6,-5,]),'OP_EQUALITY_GREATER_OR_EQUAL_THAN':([45,68,69,70,71,72,73,75,76,78,79,80,83,124,125,127,],[-77,-72,-78,-73,-75,-46,-76,-48,-74,-80,-79,116,-77,-49,116,-47,]),'LIT_REAL':([19,27,28,43,44,45,49,50,51,52,53,66,68,69,70,71,72,73,74,75,76,78,79,80,83,84,85,86,87,88,89,90,91,92,93,94,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,115,116,117,118,119,121,124,125,126,127,131,],[-78,-31,-19,71,-20,-77,71,71,71,71,71,-21,-72,-78,-73,-75,-46,-76,-42,-48,-74,-80,-79,-44,-77,-37,-32,-39,-34,-40,-35,-41,-36,-38,-33,71,-64,-68,-71,-65,-67,71,-66,-69,-70,71,-58,-59,-56,-57,71,71,-63,-60,-62,-61,71,-49,-45,-43,-47,-50,]),'WHILE':([16,17,21,24,25,26,37,39,40,47,48,55,59,60,63,64,67,81,96,97,98,113,128,137,139,],[20,-11,-13,-12,-9,-8,20,20,65,-15,-81,-14,-16,-10,-17,20,-25,-24,-22,-29,-26,-30,-23,-28,-27,]),'OP_ARITH_MULTIPLY':([45,68,69,70,71,72,73,75,76,78,79,83,124,127,],[-77,-72,-78,-73,-75,105,-76,-48,-74,-80,-79,-77,-49,105,]),'OP_ARITH_MODULE':([45,68,69,70,71,72,73,75,76,78,79,83,124,127,],[-77,-72,-78,-73,-75,106,-76,-48,-74,-80,-79,-77,-49,106,]),'TRUE':([19,27,28,43,44,45,49,50,51,52,53,66,68,69,70,71,72,73,74,75,76,78,79,80,83,84,85,86,87,88,89,90,91,92,93,94,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,115,116,117,118,119,121,124,125,126,127,131,],[-78,-31,-19,79,-20,-77,79,79,79,79,79,-21,-72,-78,-73,-75,-46,-76,-42,-48,-74,-80,-79,-44,-77,-37,-32,-39,-34,-40,-35,-41,-36,-38,-33,79,-64,-68,-71,-65,-67,79,-66,-69,-70,79,-58,-59,-56,-57,79,79,-63,-60,-62,-61,79,-49,-45,-43,-47,-50,]),'OP_EQUALITY_GREATER_THAN':([45,68,69,70,71,72,73,75,76,78,79,80,83,124,125,127,],[-77,-72,-78,-73,-75,-46,-76,-48,-74,-80,-79,119,-77,-49,119,-47,]),'OP_ASSIGN_SIMPLE':([19,27,28,31,45,68,69,70,71,72,73,74,75,76,78,79,80,83,84,85,86,87,88,89,90,91,92,93,124,125,126,127,131,],[-78,-31,49,-77,-77,-72,-78,-73,-75,-46,-76,-42,-48,-74,-80,-79,-44,-77,-37,-32,-39,-34,-40,-35,-41,-36,-38,-33,-49,-45,-43,-47,-50,]),'OP_DOT':([31,83,],[56,56,]),'OP_EQUALITY_NOT_EQUAL':([45,68,69,70,71,72,73,74,75,76,78,79,80,83,124,125,126,127,],[-77,-72,-78,-73,-75,-46,-76,110,-48,-74,-80,-79,-44,-77,-49,-45,110,-47,]),'OP_LOGIC_OR':([45,68,69,70,71,72,73,74,75,76,77,78,79,80,83,85,87,89,91,93,122,124,125,126,127,129,],[-77,-72,-78,-73,-75,-46,-76,-42,-48,-74,112,-80,-79,-44,-77,112,112,112,112,112,112,-49,-45,-43,-47,112,]),'LIT_INT':([19,27,28,43,44,45,49,50,51,52,53,66,68,69,70,71,72,73,74,75,76,78,79,80,83,84,85,86,87,88,89,90,91,92,93,94,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,115,116,117,118,119,121,124,125,126,127,131,],[-78,-31,-19,76,-20,-77,76,76,76,76,76,-21,-72,-78,-73,-75,-46,-76,-42,-48,-74,-80,-79,-44,-77,-37,-32,-39,-34,-40,-35,-41,-36,-38,-33,76,-64,-68,-71,-65,-67,76,-66,-69,-70,76,-58,-59,-56,-57,76,76,-63,-60,-62,-61,76,-49,-45,-43,-47,-50,]),'OP_EQUALITY_EQUAL':([45,68,69,70,71,72,73,74,75,76,78,79,80,83,124,125,126,127,],[-77,-72,-78,-73,-75,-46,-76,109,-48,-74,-80,-79,-44,-77,-49,-45,109,-47,]),'S_SEMI_COL':([2,9,16,17,19,21,24,25,26,27,28,30,31,35,37,38,39,44,45,47,48,55,57,59,60,61,63,64,66,67,68,69,70,71,72,73,74,75,76,78,79,80,81,83,84,85,86,87,88,89,90,91,92,93,94,96,97,98,113,124,125,126,127,128,129,131,137,139,],[8,-18,-82,-11,-78,-13,-12,-9,48,-31,-19,48,-77,48,-82,48,-82,-20,-77,-15,-81,-14,-51,-16,-10,48,-17,-82,-21,-25,-72,-78,-73,-75,-46,-76,-42,-48,-74,-80,-79,-44,-24,-77,-37,-32,-39,-34,-40,-35,-41,-36,-38,-33,121,-22,-29,-26,-30,-49,-45,-43,-47,-23,132,-50,-28,-27,]),'OP_ASSIGN_MULT':([19,27,28,31,45,68,69,70,71,72,73,74,75,76,78,79,80,83,84,85,86,87,88,89,90,91,92,93,124,125,126,127,131,],[-78,-31,53,-77,-77,-72,-78,-73,-75,-46,-76,-42,-48,-74,-80,-79,-44,-77,-37,-32,-39,-34,-40,-35,-41,-36,-38,-33,-49,-45,-43,-47,-50,]),'IMPORT':([0,1,6,7,8,11,],[4,-4,4,-3,-6,-5,]),'OP_ARITH_INCREMENT':([45,68,69,70,71,72,73,75,76,78,79,83,124,127,134,],[-77,-72,-78,-73,-75,107,-76,-48,-74,-80,-79,-77,-49,107,136,]),'$end':([3,5,10,62,],[-1,0,-2,-7,]),'OP_ARITH_INTEGER_DIVIDE':([45,68,69,70,71,72,73,75,76,78,79,83,124,127,],[-77,-72,-78,-73,-75,100,-76,-48,-74,-80,-79,-77,-49,100,]),'STRING':([16,17,19,21,22,23,24,25,26,33,34,36,37,39,41,47,48,54,55,59,60,63,64,67,81,96,97,98,113,128,137,139,],[22,-11,22,-13,-54,22,-12,-9,-8,-52,-55,-53,22,22,22,-15,-81,22,-14,-16,-10,-17,22,-25,-24,-22,-29,-26,-30,-23,-28,-27,]),'FOR':([16,17,21,24,25,26,37,39,47,48,55,59,60,63,64,67,81,96,97,98,113,128,137,139,],[29,-11,-13,-12,-9,-8,29,29,-15,-81,-14,-16,-10,-17,29,-25,-24,-22,-29,-26,-30,-23,-28,-27,]),'OP_ASSIGN_DIV':([19,27,28,31,45,68,69,70,71,72,73,74,75,76,78,79,80,83,84,85,86,87,88,89,90,91,92,93,124,125,126,127,131,],[-78,-31,50,-77,-77,-72,-78,-73,-75,-46,-76,-42,-48,-74,-80,-79,-44,-77,-37,-32,-39,-34,-40,-35,-41,-36,-38,-33,-49,-45,-43,-47,-50,]),'ELSE':([24,81,96,97,128,],[46,-24,-22,-29,-23,]),'LIT_STRING':([4,19,27,28,43,44,45,49,50,51,52,53,66,68,69,70,71,72,73,74,75,76,78,79,80,83,84,85,86,87,88,89,90,91,92,93,94,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,115,116,117,118,119,121,124,125,126,127,131,],[9,-78,-31,-19,73,-20,-77,73,73,73,73,73,-21,-72,-78,-73,-75,-46,-76,-42,-48,-74,-80,-79,-44,-77,-37,-32,-39,-34,-40,-35,-41,-36,-38,-33,73,-64,-68,-71,-65,-67,73,-66,-69,-70,73,-58,-59,-56,-57,73,73,-63,-60,-62,-61,73,-49,-45,-43,-47,-50,]),'S_RCURLY_BRACE':([16,17,21,24,25,26,37,39,47,48,55,59,60,63,64,67,81,96,97,98,113,128,137,139,],[-82,-11,-13,-12,-9,-8,62,-82,-15,-81,-14,-16,-10,-17,97,-25,-24,-22,-29,-26,-30,-23,-28,-27,]),'ID':([16,17,19,21,22,23,24,25,26,27,28,33,34,36,37,39,41,43,44,45,47,48,49,50,51,52,53,54,55,56,59,60,63,64,66,67,68,69,70,71,72,73,74,75,76,78,79,80,81,83,84,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,122,124,125,126,127,128,131,132,137,139,],[31,-11,-78,-13,-54,45,-12,-9,-8,-31,-19,-52,-55,-53,31,31,45,45,-20,-77,-15,-81,83,83,83,83,83,45,-14,95,-16,-10,-17,31,-21,-25,-72,-78,-73,-75,-46,-76,-42,-48,-74,-80,-79,-44,-24,-77,-37,-32,-39,-34,-40,-35,-41,-36,-38,-33,45,-22,-29,-26,-64,-68,-71,-65,-67,45,-66,-69,-70,45,-58,-59,-56,-57,-30,45,45,-63,-60,-62,-61,45,130,-49,-45,-43,-47,-23,-50,134,-28,-27,]),'S_LPAREN':([13,20,29,31,32,65,82,95,],[14,43,54,43,43,43,43,123,]),'IF':([16,17,21,24,25,26,37,39,46,47,48,55,59,60,63,64,67,81,96,97,98,113,128,137,139,],[32,-11,-13,-12,-9,-8,32,32,82,-15,-81,-14,-16,-10,-17,32,-25,-24,-22,-29,-26,-30,-23,-28,-27,]),'FALSE':([19,27,28,43,44,45,49,50,51,52,53,66,68,69,70,71,72,73,74,75,76,78,79,80,83,84,85,86,87,88,89,90,91,92,93,94,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,115,116,117,118,119,121,124,125,126,127,131,],[-78,-31,-19,78,-20,-77,78,78,78,78,78,-21,-72,-78,-73,-75,-46,-76,-42,-48,-74,-80,-79,-44,-77,-37,-32,-39,-34,-40,-35,-41,-36,-38,-33,78,-64,-68,-71,-65,-67,78,-66,-69,-70,78,-58,-59,-56,-57,78,78,-63,-60,-62,-61,78,-49,-45,-43,-47,-50,]),'S_LCURLY_BRACE':([15,18,42,46,58,113,120,135,138,],[16,39,39,39,39,-30,39,39,39,]),'INT':([16,17,19,21,22,23,24,25,26,33,34,36,37,39,41,47,48,54,55,59,60,63,64,67,81,96,97,98,113,128,137,139,],[33,-11,33,-13,-54,33,-12,-9,-8,-52,-55,-53,33,33,33,-15,-81,33,-14,-16,-10,-17,33,-25,-24,-22,-29,-26,-30,-23,-28,-27,]),'DOUBLE':([16,17,19,21,22,23,24,25,26,33,34,36,37,39,41,47,48,54,55,59,60,63,64,67,81,96,97,98,113,128,137,139,],[34,-11,34,-13,-54,34,-12,-9,-8,-52,-55,-53,34,34,34,-15,-81,34,-14,-16,-10,-17,34,-25,-24,-22,-29,-26,-30,-23,-28,-27,]),'OP_ARITH_DIVIDE':([45,68,69,70,71,72,73,75,76,78,79,83,124,127,],[-77,-72,-78,-73,-75,103,-76,-48,-74,-80,-79,-77,-49,103,]),'OP_ASSIGN_ADD':([19,27,28,31,45,68,69,70,71,72,73,74,75,76,78,79,80,83,84,85,86,87,88,89,90,91,92,93,124,125,126,127,131,],[-78,-31,51,-77,-77,-72,-78,-73,-75,-46,-76,-42,-48,-74,-80,-79,-44,-77,-37,-32,-39,-34,-40,-35,-41,-36,-38,-33,-49,-45,-43,-47,-50,]),'OP_ASSIGN_SUBTRACT':([19,27,28,31,45,68,69,70,71,72,73,74,75,76,78,79,80,83,84,85,86,87,88,89,90,91,92,93,124,125,126,127,131,],[-78,-31,52,-77,-77,-72,-78,-73,-75,-46,-76,-42,-48,-74,-80,-79,-44,-77,-37,-32,-39,-34,-40,-35,-41,-36,-38,-33,-49,-45,-43,-47,-50,]),'OP_ARITH_SUBTRACT':([45,68,69,70,71,72,73,75,76,78,79,83,124,127,],[-77,-72,-78,-73,-75,102,-76,-48,-74,-80,-79,-77,-49,102,]),'BOOLEAN':([16,17,19,21,22,23,24,25,26,33,34,36,37,39,41,47,48,54,55,59,60,63,64,67,81,96,97,98,113,128,137,139,],[36,-11,36,-13,-54,36,-12,-9,-8,-52,-55,-53,36,36,36,-15,-81,36,-14,-16,-10,-17,36,-25,-24,-22,-29,-26,-30,-23,-28,-27,]),'S_RPAREN':([14,45,68,69,70,71,72,73,74,75,76,77,78,79,80,123,124,125,126,127,133,136,],[15,-77,-72,-78,-73,-75,-46,-76,-42,-48,-74,113,-80,-79,-44,131,-49,-45,-43,-47,135,138,]),'OP_ARITH_DECREMENT':([45,68,69,70,71,72,73,75,76,78,79,83,124,127,130,],[-77,-72,-78,-73,-75,101,-76,-48,-74,-80,-79,-77,-49,101,133,]),'OP_EQUALITY_LESSER_THAN':([45,68,69,70,71,72,73,75,76,78,79,80,83,124,125,127,],[-77,-72,-78,-73,-75,-46,-76,-48,-74,-80,-79,117,-77,-49,117,-47,]),'MAIN':([12,],[13,]),'OP_EQUALITY_LESSER_OR_EQUAL_THAN':([45,68,69,70,71,72,73,75,76,78,79,80,83,124,125,127,],[-77,-72,-78,-73,-75,-46,-76,-48,-74,-80,-79,118,-77,-49,118,-47,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression_statement':([16,37,39,64,],[17,17,17,17,]),'semicolon':([26,30,35,38,61,],[47,55,59,63,47,]),'math_operators':([72,127,],[104,104,]),'block_statement_list':([18,42,46,58,120,135,138,],[40,67,81,96,128,137,139,]),'logical_expression':([43,49,50,51,52,53,94,121,],[77,85,87,89,91,93,122,129,]),'math_expression':([43,49,50,51,52,53,94,108,114,115,121,],[72,72,72,72,72,72,72,72,72,127,72,]),'iteration_statement':([16,37,39,64,],[21,21,21,21,]),'import_main':([0,],[3,]),'assignment_expression':([16,23,37,39,41,54,64,],[28,28,28,28,28,28,28,]),'type_specifier':([16,19,23,37,39,41,54,64,],[23,41,23,23,23,23,23,23,]),'relational_operators':([80,125,],[115,115,]),'selection_statement':([16,37,39,64,],[24,24,24,24,]),'relational_expression':([43,49,50,51,52,53,94,108,114,121,],[80,80,80,80,80,80,80,125,80,80,]),'statement':([16,37,39,64,],[25,60,25,60,]),'main':([6,],[10,]),'import_expression':([0,6,],[2,2,]),'empty':([0,16,37,39,64,],[7,26,61,26,61,]),'variable_expression':([16,23,37,39,41,43,49,50,51,52,53,54,64,94,104,108,114,115,121,],[27,27,27,27,27,68,68,68,68,68,68,27,27,68,68,68,68,68,68,]),'import_statement':([0,6,],[1,11,]),'declaration_expression':([16,23,37,39,41,54,64,],[30,44,30,30,66,94,30,]),'primary_expression':([43,49,50,51,52,53,94,104,108,114,115,121,],[75,75,75,75,75,75,75,124,75,75,75,75,]),'equality_expression':([43,49,50,51,52,53,94,114,121,],[74,74,74,74,74,74,74,126,74,]),'boolean_expression':([43,49,50,51,52,53,94,104,108,114,115,121,],[70,70,70,70,70,70,70,70,70,70,70,70,]),'input_expression':([16,37,39,49,50,51,52,53,64,],[35,35,35,84,86,88,90,92,35,]),'import_list':([0,],[6,]),'logical_operators':([77,85,87,89,91,93,122,129,],[114,114,114,114,114,114,114,114,]),'conditional_expression':([20,31,32,65,82,],[42,57,58,98,120,]),'statement_list':([16,39,],[37,64,]),'root':([0,],[5,]),'output_expression':([16,37,39,64,],[38,38,38,38,]),'equality_operators':([74,126,],[108,108,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> root","S'",1,None,None,None),
  ('root -> import_main','root',1,'p_root','parser.py',26),
  ('import_main -> import_list main','import_main',2,'p_import_main','parser.py',33),
  ('import_list -> empty','import_list',1,'p_import_list_1','parser.py',39),
  ('import_list -> import_statement','import_list',1,'p_import_list_2','parser.py',43),
  ('import_list -> import_list import_statement','import_list',2,'p_import_list_3','parser.py',47),
  ('import_statement -> import_expression S_SEMI_COL','import_statement',2,'p_import_statement','parser.py',51),
  ('main -> VOID MAIN S_LPAREN S_RPAREN S_LCURLY_BRACE statement_list S_RCURLY_BRACE','main',7,'p_main','parser.py',63),
  ('statement_list -> empty','statement_list',1,'p_statement_list_1','parser.py',69),
  ('statement_list -> statement','statement_list',1,'p_statement_list_2','parser.py',73),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list_3','parser.py',77),
  ('statement -> expression_statement','statement',1,'p_statement','parser.py',83),
  ('statement -> selection_statement','statement',1,'p_statement','parser.py',84),
  ('statement -> iteration_statement','statement',1,'p_statement','parser.py',85),
  ('expression_statement -> declaration_expression semicolon','expression_statement',2,'p_expression_statement_1','parser.py',93),
  ('expression_statement -> empty semicolon','expression_statement',2,'p_expression_statement_2','parser.py',98),
  ('expression_statement -> input_expression semicolon','expression_statement',2,'p_expression_statement_3','parser.py',103),
  ('expression_statement -> output_expression semicolon','expression_statement',2,'p_expression_statement_4','parser.py',108),
  ('import_expression -> IMPORT LIT_STRING','import_expression',2,'p_import_expression','parser.py',114),
  ('declaration_expression -> assignment_expression','declaration_expression',1,'p_declaration_expression_1','parser.py',120),
  ('declaration_expression -> type_specifier declaration_expression','declaration_expression',2,'p_declaration_expression_2','parser.py',124),
  ('declaration_expression -> CONST type_specifier declaration_expression','declaration_expression',3,'p_declaration_expression_3','parser.py',128),
  ('selection_statement -> IF conditional_expression block_statement_list','selection_statement',3,'p_selection_statement_1','parser.py',134),
  ('selection_statement -> selection_statement ELSE IF conditional_expression block_statement_list','selection_statement',5,'p_selection_statement_2','parser.py',139),
  ('selection_statement -> selection_statement ELSE block_statement_list','selection_statement',3,'p_selection_statement_3','parser.py',145),
  ('iteration_statement -> WHILE conditional_expression block_statement_list','iteration_statement',3,'p_iteration_statement_1','parser.py',151),
  ('iteration_statement -> DO block_statement_list WHILE conditional_expression','iteration_statement',4,'p_iteration_statement_2','parser.py',156),
  ('iteration_statement -> FOR S_LPAREN declaration_expression S_SEMI_COL logical_expression S_SEMI_COL ID OP_ARITH_INCREMENT S_RPAREN block_statement_list','iteration_statement',10,'p_iteration_statement_3','parser.py',162),
  ('iteration_statement -> FOR S_LPAREN declaration_expression logical_expression ID OP_ARITH_DECREMENT S_RPAREN block_statement_list','iteration_statement',8,'p_iteration_statement_4','parser.py',173),
  ('block_statement_list -> S_LCURLY_BRACE statement_list S_RCURLY_BRACE','block_statement_list',3,'p_block_statement_list_1','parser.py',183),
  ('conditional_expression -> S_LPAREN logical_expression S_RPAREN','conditional_expression',3,'p_conditional_expression_1','parser.py',190),
  ('assignment_expression -> variable_expression','assignment_expression',1,'p_assignment_expression_1','parser.py',197),
  ('assignment_expression -> assignment_expression OP_ASSIGN_SIMPLE logical_expression','assignment_expression',3,'p_assignment_expression_2','parser.py',202),
  ('assignment_expression -> assignment_expression OP_ASSIGN_MULT logical_expression','assignment_expression',3,'p_assignment_expression_2','parser.py',203),
  ('assignment_expression -> assignment_expression OP_ASSIGN_DIV logical_expression','assignment_expression',3,'p_assignment_expression_2','parser.py',204),
  ('assignment_expression -> assignment_expression OP_ASSIGN_ADD logical_expression','assignment_expression',3,'p_assignment_expression_2','parser.py',205),
  ('assignment_expression -> assignment_expression OP_ASSIGN_SUBTRACT logical_expression','assignment_expression',3,'p_assignment_expression_2','parser.py',206),
  ('assignment_expression -> assignment_expression OP_ASSIGN_SIMPLE input_expression','assignment_expression',3,'p_assignment_expression_3','parser.py',213),
  ('assignment_expression -> assignment_expression OP_ASSIGN_MULT input_expression','assignment_expression',3,'p_assignment_expression_3','parser.py',214),
  ('assignment_expression -> assignment_expression OP_ASSIGN_DIV input_expression','assignment_expression',3,'p_assignment_expression_3','parser.py',215),
  ('assignment_expression -> assignment_expression OP_ASSIGN_ADD input_expression','assignment_expression',3,'p_assignment_expression_3','parser.py',216),
  ('assignment_expression -> assignment_expression OP_ASSIGN_SUBTRACT input_expression','assignment_expression',3,'p_assignment_expression_3','parser.py',217),
  ('logical_expression -> equality_expression','logical_expression',1,'p_logical_expression_1','parser.py',224),
  ('logical_expression -> logical_expression logical_operators equality_expression','logical_expression',3,'p_logical_expression_2','parser.py',228),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression_1','parser.py',233),
  ('equality_expression -> equality_expression equality_operators relational_expression','equality_expression',3,'p_equality_expression_2','parser.py',237),
  ('relational_expression -> math_expression','relational_expression',1,'p_relational_expression_1','parser.py',242),
  ('relational_expression -> relational_expression relational_operators math_expression','relational_expression',3,'p_relational_expression_2','parser.py',246),
  ('math_expression -> primary_expression','math_expression',1,'p_math_expression_1','parser.py',251),
  ('math_expression -> math_expression math_operators primary_expression','math_expression',3,'p_math_expression_2','parser.py',255),
  ('input_expression -> ID OP_DOT ID S_LPAREN S_RPAREN','input_expression',5,'p_input_expression','parser.py',260),
  ('output_expression -> ID conditional_expression','output_expression',2,'p_output_expression','parser.py',270),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','parser.py',278),
  ('type_specifier -> BOOLEAN','type_specifier',1,'p_type_specifier','parser.py',279),
  ('type_specifier -> STRING','type_specifier',1,'p_type_specifier','parser.py',280),
  ('type_specifier -> DOUBLE','type_specifier',1,'p_type_specifier','parser.py',281),
  ('logical_operators -> OP_LOGIC_AND','logical_operators',1,'p_logical_operators','parser.py',290),
  ('logical_operators -> OP_LOGIC_OR','logical_operators',1,'p_logical_operators','parser.py',291),
  ('equality_operators -> OP_EQUALITY_EQUAL','equality_operators',1,'p_equality_operators','parser.py',299),
  ('equality_operators -> OP_EQUALITY_NOT_EQUAL','equality_operators',1,'p_equality_operators','parser.py',300),
  ('relational_operators -> OP_EQUALITY_LESSER_THAN','relational_operators',1,'p_relational_operators','parser.py',308),
  ('relational_operators -> OP_EQUALITY_GREATER_THAN','relational_operators',1,'p_relational_operators','parser.py',309),
  ('relational_operators -> OP_EQUALITY_LESSER_OR_EQUAL_THAN','relational_operators',1,'p_relational_operators','parser.py',310),
  ('relational_operators -> OP_EQUALITY_GREATER_OR_EQUAL_THAN','relational_operators',1,'p_relational_operators','parser.py',311),
  ('math_operators -> OP_ARITH_ADD','math_operators',1,'p_math_operators','parser.py',319),
  ('math_operators -> OP_ARITH_SUBTRACT','math_operators',1,'p_math_operators','parser.py',320),
  ('math_operators -> OP_ARITH_MULTIPLY','math_operators',1,'p_math_operators','parser.py',321),
  ('math_operators -> OP_ARITH_DIVIDE','math_operators',1,'p_math_operators','parser.py',322),
  ('math_operators -> OP_ARITH_INTEGER_DIVIDE','math_operators',1,'p_math_operators','parser.py',323),
  ('math_operators -> OP_ARITH_MODULE','math_operators',1,'p_math_operators','parser.py',324),
  ('math_operators -> OP_ARITH_INCREMENT','math_operators',1,'p_math_operators','parser.py',325),
  ('math_operators -> OP_ARITH_DECREMENT','math_operators',1,'p_math_operators','parser.py',326),
  ('primary_expression -> variable_expression','primary_expression',1,'p_primary_expression','parser.py',334),
  ('primary_expression -> boolean_expression','primary_expression',1,'p_primary_expression','parser.py',335),
  ('primary_expression -> LIT_INT','primary_expression',1,'p_primary_expression','parser.py',336),
  ('primary_expression -> LIT_REAL','primary_expression',1,'p_primary_expression','parser.py',337),
  ('primary_expression -> LIT_STRING','primary_expression',1,'p_primary_expression','parser.py',338),
  ('variable_expression -> ID','variable_expression',1,'p_variable_expression','parser.py',350),
  ('variable_expression -> CONST','variable_expression',1,'p_variable_expression','parser.py',351),
  ('boolean_expression -> TRUE','boolean_expression',1,'p_boolean_expression','parser.py',359),
  ('boolean_expression -> FALSE','boolean_expression',1,'p_boolean_expression','parser.py',360),
  ('semicolon -> S_SEMI_COL','semicolon',1,'p_semicolon','parser.py',368),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',375),
]
