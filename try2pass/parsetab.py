
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSERT BOOLEAN BREAK CASE CATCH CLASS CONST CONTINUE DEFAULT DO DOUBLE ELSE ENUM ERROR EXTENDS FALSE FINAL FINALLY FOR ID IF IMPORT IN INT IS LIT_INT LIT_REAL LIT_STRING MAIN MULTI_COM NEW NULL OP_ARITH_ADD OP_ARITH_DECREMENT OP_ARITH_DIVIDE OP_ARITH_INCREMENT OP_ARITH_INTEGER_DIVIDE OP_ARITH_MODULE OP_ARITH_MULTIPLY OP_ARITH_SUBTRACT OP_ASSIGN_ADD OP_ASSIGN_DIV OP_ASSIGN_MULT OP_ASSIGN_SIMPLE OP_ASSIGN_SUBTRACT OP_DOT OP_EQUALITY_EQUAL OP_EQUALITY_GREATER_OR_EQUAL_THAN OP_EQUALITY_GREATER_THAN OP_EQUALITY_LESSER_OR_EQUAL_THAN OP_EQUALITY_LESSER_THAN OP_EQUALITY_NOT_EQUAL OP_LOGIC_AND OP_LOGIC_NOT OP_LOGIC_OR RETHROW RETURN SINGLE_COM STRING SUPER SWITCH S_LBRACKET S_LCURLY_BRACE S_LPAREN S_RBRACKET S_RCURLY_BRACE S_RPAREN S_SEMI_COL THIS THROW TRUE TRY VOID WHILE WITH\n    root : import_main\n    \n    import_main : import_list main\n    import_list : emptyimport_list : import_statementimport_list : import_list import_statementimport_statement : import_expression semicolon\n    main : VOID MAIN S_LPAREN S_RPAREN S_LCURLY_BRACE statement_list S_RCURLY_BRACE\n    statement_list : emptystatement_list : statementstatement_list : statement_list statement\n    statement : expression_statement\n              | selection_statement\n              | iteration_statement\n    expression_statement : declaration_expression semicolonexpression_statement : empty semicolonexpression_statement : input_expression semicolonexpression_statement : output_expression semicolonimport_expression : IMPORT LIT_STRINGdeclaration_expression : assignment_expressiondeclaration_expression : type_specifier declaration_expressiondeclaration_expression : CONST type_specifier declaration_expressionselection_statement : IF conditional_expression block_statement_listselection_statement : selection_statement ELSE IF conditional_expression block_statement_listselection_statement : selection_statement ELSE block_statement_listiteration_statement : WHILE conditional_expression block_statement_listiteration_statement : DO block_statement_list WHILE conditional_expressioniteration_statement : FOR S_LPAREN declaration_expression S_SEMI_COL logical_expression S_SEMI_COL ID OP_ARITH_INCREMENT S_RPAREN block_statement_listiteration_statement : FOR S_LPAREN declaration_expression  logical_expression ID OP_ARITH_DECREMENT S_RPAREN block_statement_listblock_statement_list : S_LCURLY_BRACE statement_list S_RCURLY_BRACEconditional_expression : S_LPAREN logical_expression S_RPARENassignment_expression : variable_expression\n    assignment_expression : assignment_expression OP_ASSIGN_SIMPLE logical_expression\n                        | assignment_expression OP_ASSIGN_MULT logical_expression\n                        | assignment_expression OP_ASSIGN_DIV logical_expression\n                        | assignment_expression OP_ASSIGN_ADD logical_expression\n                        | assignment_expression OP_ASSIGN_SUBTRACT logical_expression\n    \n    assignment_expression : assignment_expression OP_ASSIGN_SIMPLE input_expression\n                        | assignment_expression OP_ASSIGN_MULT input_expression\n                        | assignment_expression OP_ASSIGN_DIV input_expression\n                        | assignment_expression OP_ASSIGN_ADD input_expression\n                        | assignment_expression OP_ASSIGN_SUBTRACT input_expression\n    logical_expression : equality_expressionlogical_expression : logical_expression logical_operators equality_expressionequality_expression : relational_expressionequality_expression : equality_expression equality_operators relational_expressionrelational_expression : math_expressionrelational_expression : relational_expression relational_operators math_expressionmath_expression : primary_expressionmath_expression : math_expression math_operators primary_expressioninput_expression : ID OP_DOT ID S_LPAREN S_RPARENoutput_expression : ID conditional_expression\n    type_specifier : INT\n                   | BOOLEAN\n                   | STRING\n                   | DOUBLE\n    \n    logical_operators : OP_LOGIC_AND\n                      | OP_LOGIC_OR\n    \n    equality_operators : OP_EQUALITY_EQUAL\n                       | OP_EQUALITY_NOT_EQUAL\n    \n    relational_operators : OP_EQUALITY_LESSER_THAN\n                         | OP_EQUALITY_GREATER_THAN\n                         | OP_EQUALITY_LESSER_OR_EQUAL_THAN\n                         | OP_EQUALITY_GREATER_OR_EQUAL_THAN\n    \n    math_operators : OP_ARITH_ADD\n                   | OP_ARITH_SUBTRACT\n                   | OP_ARITH_MULTIPLY\n                   | OP_ARITH_DIVIDE\n                   | OP_ARITH_INTEGER_DIVIDE\n                   | OP_ARITH_MODULE\n                   | OP_ARITH_INCREMENT\n                   | OP_ARITH_DECREMENT\n    \n    primary_expression :  variable_expression\n                       |  boolean_expression\n                       |  LIT_INT\n                       |  LIT_REAL\n                       |  LIT_STRING\n    \n    variable_expression : ID\n                        | CONST\n    \n    boolean_expression : TRUE\n                       | FALSE\n    \n    semicolon : S_SEMI_COL\n    empty : '
    
_lr_action_items = {'OP_ASSIGN_MULT':([21,22,28,32,59,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,127,128,129,130,131,],[-31,-78,48,-77,-77,-80,-72,-44,-42,-73,-79,-77,-78,-74,-46,-38,-33,-76,-48,-75,-40,-35,-37,-32,-41,-36,-39,-34,-47,-45,-49,-43,-50,]),'OP_ASSIGN_SUBTRACT':([21,22,28,32,59,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,127,128,129,130,131,],[-31,-78,51,-77,-77,-80,-72,-44,-42,-73,-79,-77,-78,-74,-46,-38,-33,-76,-48,-75,-40,-35,-37,-32,-41,-36,-39,-34,-47,-45,-49,-43,-50,]),'CONST':([8,17,18,19,21,22,23,24,26,27,28,29,31,33,36,38,41,42,44,47,48,49,50,51,52,53,56,58,59,60,61,62,65,66,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,95,96,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,123,124,127,128,129,130,131,136,139,],[-81,22,-53,-12,-31,-78,22,-55,-11,-13,-19,-9,-54,-52,22,-8,22,22,-10,22,77,77,77,77,77,-17,77,-14,-77,-20,-16,-15,-24,77,-21,22,-80,-72,-44,-42,-73,-79,-77,-78,-74,-46,-38,-33,-76,-48,-75,-40,-35,-37,-32,-41,-36,-39,-34,-22,-25,77,-26,-29,-60,-63,-62,77,-61,77,-58,-59,-67,-69,-71,-65,-66,-68,-64,77,-70,-56,-57,77,-30,-23,-47,-45,-49,-43,-50,-28,-27,]),'S_RCURLY_BRACE':([8,17,19,23,26,27,29,38,44,47,53,58,61,62,65,69,95,96,100,101,123,124,136,139,],[-81,-82,-12,43,-11,-13,-9,-8,-10,-82,-17,-14,-16,-15,-24,101,-22,-25,-26,-29,-30,-23,-28,-27,]),'OP_ARITH_DECREMENT':([59,70,71,74,75,76,77,78,79,82,83,84,125,127,129,],[-77,-80,-72,-73,-79,-77,-78,-74,112,-76,-48,-75,132,112,-49,]),'OP_ARITH_SUBTRACT':([59,70,71,74,75,76,77,78,79,82,83,84,127,129,],[-77,-80,-72,-73,-79,-77,-78,-74,113,-76,-48,-75,113,-49,]),'VOID':([0,3,4,6,8,9,10,],[-82,-4,-3,12,-81,-6,-5,]),'OP_EQUALITY_LESSER_THAN':([59,70,71,72,74,75,76,77,78,79,82,83,84,127,128,129,],[-77,-80,-72,102,-73,-79,-77,-78,-74,-46,-76,-48,-75,-47,102,-49,]),'BOOLEAN':([8,17,18,19,22,23,24,26,27,29,31,33,36,38,41,42,44,47,53,58,61,62,65,69,95,96,100,101,123,124,136,139,],[-81,18,-53,-12,18,18,-55,-11,-13,-9,-54,-52,18,-8,18,18,-10,18,-17,-14,-16,-15,-24,18,-22,-25,-26,-29,-30,-23,-28,-27,]),'FALSE':([21,22,28,48,49,50,51,52,56,59,60,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,99,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,127,128,129,130,131,],[-31,-78,-19,70,70,70,70,70,70,-77,-20,70,-21,-80,-72,-44,-42,-73,-79,-77,-78,-74,-46,-38,-33,-76,-48,-75,-40,-35,-37,-32,-41,-36,-39,-34,70,-60,-63,-62,70,-61,70,-58,-59,-67,-69,-71,-65,-66,-68,-64,70,-70,-56,-57,70,-47,-45,-49,-43,-50,]),'OP_ASSIGN_DIV':([21,22,28,32,59,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,127,128,129,130,131,],[-31,-78,52,-77,-77,-80,-72,-44,-42,-73,-79,-77,-78,-74,-46,-38,-33,-76,-48,-75,-40,-35,-37,-32,-41,-36,-39,-34,-47,-45,-49,-43,-50,]),'OP_EQUALITY_NOT_EQUAL':([59,70,71,72,73,74,75,76,77,78,79,82,83,84,127,128,129,130,],[-77,-80,-72,-44,109,-73,-79,-77,-78,-74,-46,-76,-48,-75,-47,-45,-49,109,]),'OP_DOT':([32,76,],[54,54,]),'INT':([8,17,18,19,22,23,24,26,27,29,31,33,36,38,41,42,44,47,53,58,61,62,65,69,95,96,100,101,123,124,136,139,],[-81,33,-53,-12,33,33,-55,-11,-13,-9,-54,-52,33,-8,33,33,-10,33,-17,-14,-16,-15,-24,33,-22,-25,-26,-29,-30,-23,-28,-27,]),'OP_ASSIGN_ADD':([21,22,28,32,59,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,127,128,129,130,131,],[-31,-78,49,-77,-77,-80,-72,-44,-42,-73,-79,-77,-78,-74,-46,-38,-33,-76,-48,-75,-40,-35,-37,-32,-41,-36,-39,-34,-47,-45,-49,-43,-50,]),'S_RPAREN':([15,59,70,71,72,73,74,75,77,78,79,82,83,84,94,122,127,128,129,130,132,137,],[16,-77,-80,-72,-44,-42,-73,-79,-78,-74,-46,-76,-48,-75,123,131,-47,-45,-49,-43,134,138,]),'ID':([8,17,18,19,21,22,23,24,26,27,28,29,31,33,36,38,41,42,44,47,48,49,50,51,52,53,54,56,58,59,60,61,62,65,66,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,95,96,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,123,124,127,128,129,130,131,133,136,139,],[-81,32,-53,-12,-31,-78,32,-55,-11,-13,-19,-9,-54,-52,59,-8,59,59,-10,32,76,76,76,76,76,-17,93,59,-14,-77,-20,-16,-15,-24,59,-21,32,-80,-72,-44,-42,-73,-79,-77,-78,-74,-46,-38,-33,-76,-48,-75,-40,-35,-37,-32,-41,-36,-39,-34,-22,-25,125,59,-26,-29,-60,-63,-62,59,-61,59,-58,-59,-67,-69,-71,-65,-66,-68,-64,59,-70,-56,-57,59,-30,-23,-47,-45,-49,-43,-50,135,-28,-27,]),'OP_ARITH_ADD':([59,70,71,74,75,76,77,78,79,82,83,84,127,129,],[-77,-80,-72,-73,-79,-77,-78,-74,116,-76,-48,-75,116,-49,]),'OP_ARITH_DIVIDE':([59,70,71,74,75,76,77,78,79,82,83,84,127,129,],[-77,-80,-72,-73,-79,-77,-78,-74,110,-76,-48,-75,110,-49,]),'MAIN':([12,],[14,]),'LIT_INT':([21,22,28,48,49,50,51,52,56,59,60,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,99,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,127,128,129,130,131,],[-31,-78,-19,78,78,78,78,78,78,-77,-20,78,-21,-80,-72,-44,-42,-73,-79,-77,-78,-74,-46,-38,-33,-76,-48,-75,-40,-35,-37,-32,-41,-36,-39,-34,78,-60,-63,-62,78,-61,78,-58,-59,-67,-69,-71,-65,-66,-68,-64,78,-70,-56,-57,78,-47,-45,-49,-43,-50,]),'OP_EQUALITY_GREATER_OR_EQUAL_THAN':([59,70,71,72,74,75,76,77,78,79,82,83,84,127,128,129,],[-77,-80,-72,103,-73,-79,-77,-78,-74,-46,-76,-48,-75,-47,103,-49,]),'OP_ARITH_MODULE':([59,70,71,74,75,76,77,78,79,82,83,84,127,129,],[-77,-80,-72,-73,-79,-77,-78,-74,111,-76,-48,-75,111,-49,]),'OP_LOGIC_OR':([59,70,71,72,73,74,75,76,77,78,79,81,82,83,84,86,88,90,92,94,98,126,127,128,129,130,],[-77,-80,-72,-44,-42,-73,-79,-77,-78,-74,-46,120,-76,-48,-75,120,120,120,120,120,120,120,-47,-45,-49,-43,]),'FOR':([8,17,19,23,26,27,29,38,44,47,53,58,61,62,65,69,95,96,100,101,123,124,136,139,],[-81,20,-12,20,-11,-13,-9,-8,-10,20,-17,-14,-16,-15,-24,20,-22,-25,-26,-29,-30,-23,-28,-27,]),'LIT_STRING':([7,21,22,28,48,49,50,51,52,56,59,60,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,99,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,127,128,129,130,131,],[13,-31,-78,-19,82,82,82,82,82,82,-77,-20,82,-21,-80,-72,-44,-42,-73,-79,-77,-78,-74,-46,-38,-33,-76,-48,-75,-40,-35,-37,-32,-41,-36,-39,-34,82,-60,-63,-62,82,-61,82,-58,-59,-67,-69,-71,-65,-66,-68,-64,82,-70,-56,-57,82,-47,-45,-49,-43,-50,]),'OP_ASSIGN_SIMPLE':([21,22,28,32,59,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,127,128,129,130,131,],[-31,-78,50,-77,-77,-80,-72,-44,-42,-73,-79,-77,-78,-74,-46,-38,-33,-76,-48,-75,-40,-35,-37,-32,-41,-36,-39,-34,-47,-45,-49,-43,-50,]),'OP_ARITH_INTEGER_DIVIDE':([59,70,71,74,75,76,77,78,79,82,83,84,127,129,],[-77,-80,-72,-73,-79,-77,-78,-74,115,-76,-48,-75,115,-49,]),'OP_EQUALITY_EQUAL':([59,70,71,72,73,74,75,76,77,78,79,82,83,84,127,128,129,130,],[-77,-80,-72,-44,108,-73,-79,-77,-78,-74,-46,-76,-48,-75,-47,-45,-49,108,]),'DO':([8,17,19,23,26,27,29,38,44,47,53,58,61,62,65,69,95,96,100,101,123,124,136,139,],[-81,25,-12,25,-11,-13,-9,-8,-10,25,-17,-14,-16,-15,-24,25,-22,-25,-26,-29,-30,-23,-28,-27,]),'OP_ARITH_INCREMENT':([59,70,71,74,75,76,77,78,79,82,83,84,127,129,135,],[-77,-80,-72,-73,-79,-77,-78,-74,118,-76,-48,-75,118,-49,137,]),'OP_LOGIC_AND':([59,70,71,72,73,74,75,76,77,78,79,81,82,83,84,86,88,90,92,94,98,126,127,128,129,130,],[-77,-80,-72,-44,-42,-73,-79,-77,-78,-74,-46,119,-76,-48,-75,119,119,119,119,119,119,119,-47,-45,-49,-43,]),'OP_ARITH_MULTIPLY':([59,70,71,74,75,76,77,78,79,82,83,84,127,129,],[-77,-80,-72,-73,-79,-77,-78,-74,114,-76,-48,-75,114,-49,]),'STRING':([8,17,18,19,22,23,24,26,27,29,31,33,36,38,41,42,44,47,53,58,61,62,65,69,95,96,100,101,123,124,136,139,],[-81,31,-53,-12,31,31,-55,-11,-13,-9,-54,-52,31,-8,31,31,-10,31,-17,-14,-16,-15,-24,31,-22,-25,-26,-29,-30,-23,-28,-27,]),'S_LCURLY_BRACE':([16,25,40,57,63,97,123,134,138,],[17,47,47,47,47,47,-30,47,47,]),'ELSE':([19,65,95,101,124,],[40,-24,-22,-29,-23,]),'DOUBLE':([8,17,18,19,22,23,24,26,27,29,31,33,36,38,41,42,44,47,53,58,61,62,65,69,95,96,100,101,123,124,136,139,],[-81,24,-53,-12,24,24,-55,-11,-13,-9,-54,-52,24,-8,24,24,-10,24,-17,-14,-16,-15,-24,24,-22,-25,-26,-29,-30,-23,-28,-27,]),'TRUE':([21,22,28,48,49,50,51,52,56,59,60,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,99,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,127,128,129,130,131,],[-31,-78,-19,75,75,75,75,75,75,-77,-20,75,-21,-80,-72,-44,-42,-73,-79,-77,-78,-74,-46,-38,-33,-76,-48,-75,-40,-35,-37,-32,-41,-36,-39,-34,75,-60,-63,-62,75,-61,75,-58,-59,-67,-69,-71,-65,-66,-68,-64,75,-70,-56,-57,75,-47,-45,-49,-43,-50,]),'IF':([8,17,19,23,26,27,29,38,40,44,47,53,58,61,62,65,69,95,96,100,101,123,124,136,139,],[-81,34,-12,34,-11,-13,-9,-8,64,-10,34,-17,-14,-16,-15,-24,34,-22,-25,-26,-29,-30,-23,-28,-27,]),'S_LPAREN':([14,20,32,34,39,64,68,93,],[15,41,56,56,56,56,56,122,]),'$end':([1,2,11,43,],[-1,0,-2,-7,]),'S_SEMI_COL':([5,8,13,17,19,21,22,23,26,27,28,29,30,32,35,37,38,44,45,47,53,55,58,59,60,61,62,65,66,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,95,96,100,101,123,124,126,127,128,129,130,131,136,139,],[8,-81,-18,-82,-12,-31,-78,-82,-11,-13,-19,-9,8,-77,8,8,8,-10,8,-82,-17,-51,-14,-77,-20,-16,-15,-24,99,-21,-82,-80,-72,-44,-42,-73,-79,-77,-78,-74,-46,-38,-33,-76,-48,-75,-40,-35,-37,-32,-41,-36,-39,-34,-22,-25,-26,-29,-30,-23,133,-47,-45,-49,-43,-50,-28,-27,]),'IMPORT':([0,3,4,6,8,9,10,],[7,-4,-3,7,-81,-6,-5,]),'LIT_REAL':([21,22,28,48,49,50,51,52,56,59,60,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,99,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,127,128,129,130,131,],[-31,-78,-19,84,84,84,84,84,84,-77,-20,84,-21,-80,-72,-44,-42,-73,-79,-77,-78,-74,-46,-38,-33,-76,-48,-75,-40,-35,-37,-32,-41,-36,-39,-34,84,-60,-63,-62,84,-61,84,-58,-59,-67,-69,-71,-65,-66,-68,-64,84,-70,-56,-57,84,-47,-45,-49,-43,-50,]),'OP_EQUALITY_GREATER_THAN':([59,70,71,72,74,75,76,77,78,79,82,83,84,127,128,129,],[-77,-80,-72,106,-73,-79,-77,-78,-74,-46,-76,-48,-75,-47,106,-49,]),'WHILE':([8,17,19,23,26,27,29,38,44,46,47,53,58,61,62,65,69,95,96,100,101,123,124,136,139,],[-81,39,-12,39,-11,-13,-9,-8,-10,68,39,-17,-14,-16,-15,-24,39,-22,-25,-26,-29,-30,-23,-28,-27,]),'OP_EQUALITY_LESSER_OR_EQUAL_THAN':([59,70,71,72,74,75,76,77,78,79,82,83,84,127,128,129,],[-77,-80,-72,104,-73,-79,-77,-78,-74,-46,-76,-48,-75,-47,104,-49,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'selection_statement':([17,23,47,69,],[19,19,19,19,]),'variable_expression':([17,23,36,41,42,47,48,49,50,51,52,56,66,69,99,105,107,117,121,],[21,21,21,21,21,21,71,71,71,71,71,71,71,21,71,71,71,71,71,]),'logical_operators':([81,86,88,90,92,94,98,126,],[121,121,121,121,121,121,121,121,]),'import_expression':([0,6,],[5,5,]),'import_list':([0,],[6,]),'main':([6,],[11,]),'statement_list':([17,47,],[23,69,]),'relational_expression':([48,49,50,51,52,56,66,99,107,121,],[72,72,72,72,72,72,72,72,128,72,]),'type_specifier':([17,22,23,36,41,42,47,69,],[36,42,36,36,36,36,36,36,]),'iteration_statement':([17,23,47,69,],[27,27,27,27,]),'primary_expression':([48,49,50,51,52,56,66,99,105,107,117,121,],[83,83,83,83,83,83,83,83,83,83,129,83,]),'assignment_expression':([17,23,36,41,42,47,69,],[28,28,28,28,28,28,28,]),'statement':([17,23,47,69,],[29,44,29,44,]),'output_expression':([17,23,47,69,],[30,30,30,30,]),'math_operators':([79,127,],[117,117,]),'declaration_expression':([17,23,36,41,42,47,69,],[35,35,60,66,67,35,35,]),'conditional_expression':([32,34,39,64,68,],[55,57,63,97,100,]),'relational_operators':([72,128,],[105,105,]),'boolean_expression':([48,49,50,51,52,56,66,99,105,107,117,121,],[74,74,74,74,74,74,74,74,74,74,74,74,]),'import_statement':([0,6,],[3,10,]),'math_expression':([48,49,50,51,52,56,66,99,105,107,121,],[79,79,79,79,79,79,79,79,127,79,79,]),'block_statement_list':([25,40,57,63,97,134,138,],[46,65,95,96,124,136,139,]),'import_main':([0,],[1,]),'expression_statement':([17,23,47,69,],[26,26,26,26,]),'input_expression':([17,23,47,48,49,50,51,52,69,],[37,37,37,80,85,87,89,91,37,]),'logical_expression':([48,49,50,51,52,56,66,99,],[81,86,88,90,92,94,98,126,]),'empty':([0,17,23,47,69,],[4,38,45,38,45,]),'root':([0,],[2,]),'semicolon':([5,30,35,37,38,45,],[9,53,58,61,62,62,]),'equality_operators':([73,130,],[107,107,]),'equality_expression':([48,49,50,51,52,56,66,99,121,],[73,73,73,73,73,73,73,73,130,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> root","S'",1,None,None,None),
  ('root -> import_main','root',1,'p_root','parser.py',26),
  ('import_main -> import_list main','import_main',2,'p_import_main','parser.py',33),
  ('import_list -> empty','import_list',1,'p_import_list_1','parser.py',39),
  ('import_list -> import_statement','import_list',1,'p_import_list_2','parser.py',43),
  ('import_list -> import_list import_statement','import_list',2,'p_import_list_3','parser.py',47),
  ('import_statement -> import_expression semicolon','import_statement',2,'p_import_statement','parser.py',51),
  ('main -> VOID MAIN S_LPAREN S_RPAREN S_LCURLY_BRACE statement_list S_RCURLY_BRACE','main',7,'p_main','parser.py',64),
  ('statement_list -> empty','statement_list',1,'p_statement_list_1','parser.py',70),
  ('statement_list -> statement','statement_list',1,'p_statement_list_2','parser.py',74),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list_3','parser.py',78),
  ('statement -> expression_statement','statement',1,'p_statement','parser.py',84),
  ('statement -> selection_statement','statement',1,'p_statement','parser.py',85),
  ('statement -> iteration_statement','statement',1,'p_statement','parser.py',86),
  ('expression_statement -> declaration_expression semicolon','expression_statement',2,'p_expression_statement_1','parser.py',94),
  ('expression_statement -> empty semicolon','expression_statement',2,'p_expression_statement_2','parser.py',99),
  ('expression_statement -> input_expression semicolon','expression_statement',2,'p_expression_statement_3','parser.py',104),
  ('expression_statement -> output_expression semicolon','expression_statement',2,'p_expression_statement_4','parser.py',109),
  ('import_expression -> IMPORT LIT_STRING','import_expression',2,'p_import_expression','parser.py',115),
  ('declaration_expression -> assignment_expression','declaration_expression',1,'p_declaration_expression_1','parser.py',122),
  ('declaration_expression -> type_specifier declaration_expression','declaration_expression',2,'p_declaration_expression_2','parser.py',126),
  ('declaration_expression -> CONST type_specifier declaration_expression','declaration_expression',3,'p_declaration_expression_3','parser.py',130),
  ('selection_statement -> IF conditional_expression block_statement_list','selection_statement',3,'p_selection_statement_1','parser.py',136),
  ('selection_statement -> selection_statement ELSE IF conditional_expression block_statement_list','selection_statement',5,'p_selection_statement_2','parser.py',141),
  ('selection_statement -> selection_statement ELSE block_statement_list','selection_statement',3,'p_selection_statement_3','parser.py',147),
  ('iteration_statement -> WHILE conditional_expression block_statement_list','iteration_statement',3,'p_iteration_statement_1','parser.py',153),
  ('iteration_statement -> DO block_statement_list WHILE conditional_expression','iteration_statement',4,'p_iteration_statement_2','parser.py',158),
  ('iteration_statement -> FOR S_LPAREN declaration_expression S_SEMI_COL logical_expression S_SEMI_COL ID OP_ARITH_INCREMENT S_RPAREN block_statement_list','iteration_statement',10,'p_iteration_statement_3','parser.py',164),
  ('iteration_statement -> FOR S_LPAREN declaration_expression logical_expression ID OP_ARITH_DECREMENT S_RPAREN block_statement_list','iteration_statement',8,'p_iteration_statement_4','parser.py',175),
  ('block_statement_list -> S_LCURLY_BRACE statement_list S_RCURLY_BRACE','block_statement_list',3,'p_block_statement_list_1','parser.py',185),
  ('conditional_expression -> S_LPAREN logical_expression S_RPAREN','conditional_expression',3,'p_conditional_expression_1','parser.py',192),
  ('assignment_expression -> variable_expression','assignment_expression',1,'p_assignment_expression_1','parser.py',199),
  ('assignment_expression -> assignment_expression OP_ASSIGN_SIMPLE logical_expression','assignment_expression',3,'p_assignment_expression_2','parser.py',204),
  ('assignment_expression -> assignment_expression OP_ASSIGN_MULT logical_expression','assignment_expression',3,'p_assignment_expression_2','parser.py',205),
  ('assignment_expression -> assignment_expression OP_ASSIGN_DIV logical_expression','assignment_expression',3,'p_assignment_expression_2','parser.py',206),
  ('assignment_expression -> assignment_expression OP_ASSIGN_ADD logical_expression','assignment_expression',3,'p_assignment_expression_2','parser.py',207),
  ('assignment_expression -> assignment_expression OP_ASSIGN_SUBTRACT logical_expression','assignment_expression',3,'p_assignment_expression_2','parser.py',208),
  ('assignment_expression -> assignment_expression OP_ASSIGN_SIMPLE input_expression','assignment_expression',3,'p_assignment_expression_3','parser.py',215),
  ('assignment_expression -> assignment_expression OP_ASSIGN_MULT input_expression','assignment_expression',3,'p_assignment_expression_3','parser.py',216),
  ('assignment_expression -> assignment_expression OP_ASSIGN_DIV input_expression','assignment_expression',3,'p_assignment_expression_3','parser.py',217),
  ('assignment_expression -> assignment_expression OP_ASSIGN_ADD input_expression','assignment_expression',3,'p_assignment_expression_3','parser.py',218),
  ('assignment_expression -> assignment_expression OP_ASSIGN_SUBTRACT input_expression','assignment_expression',3,'p_assignment_expression_3','parser.py',219),
  ('logical_expression -> equality_expression','logical_expression',1,'p_logical_expression_1','parser.py',226),
  ('logical_expression -> logical_expression logical_operators equality_expression','logical_expression',3,'p_logical_expression_2','parser.py',230),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression_1','parser.py',235),
  ('equality_expression -> equality_expression equality_operators relational_expression','equality_expression',3,'p_equality_expression_2','parser.py',239),
  ('relational_expression -> math_expression','relational_expression',1,'p_relational_expression_1','parser.py',244),
  ('relational_expression -> relational_expression relational_operators math_expression','relational_expression',3,'p_relational_expression_2','parser.py',248),
  ('math_expression -> primary_expression','math_expression',1,'p_math_expression_1','parser.py',253),
  ('math_expression -> math_expression math_operators primary_expression','math_expression',3,'p_math_expression_2','parser.py',257),
  ('input_expression -> ID OP_DOT ID S_LPAREN S_RPAREN','input_expression',5,'p_input_expression','parser.py',262),
  ('output_expression -> ID conditional_expression','output_expression',2,'p_output_expression','parser.py',272),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','parser.py',280),
  ('type_specifier -> BOOLEAN','type_specifier',1,'p_type_specifier','parser.py',281),
  ('type_specifier -> STRING','type_specifier',1,'p_type_specifier','parser.py',282),
  ('type_specifier -> DOUBLE','type_specifier',1,'p_type_specifier','parser.py',283),
  ('logical_operators -> OP_LOGIC_AND','logical_operators',1,'p_logical_operators','parser.py',292),
  ('logical_operators -> OP_LOGIC_OR','logical_operators',1,'p_logical_operators','parser.py',293),
  ('equality_operators -> OP_EQUALITY_EQUAL','equality_operators',1,'p_equality_operators','parser.py',302),
  ('equality_operators -> OP_EQUALITY_NOT_EQUAL','equality_operators',1,'p_equality_operators','parser.py',303),
  ('relational_operators -> OP_EQUALITY_LESSER_THAN','relational_operators',1,'p_relational_operators','parser.py',312),
  ('relational_operators -> OP_EQUALITY_GREATER_THAN','relational_operators',1,'p_relational_operators','parser.py',313),
  ('relational_operators -> OP_EQUALITY_LESSER_OR_EQUAL_THAN','relational_operators',1,'p_relational_operators','parser.py',314),
  ('relational_operators -> OP_EQUALITY_GREATER_OR_EQUAL_THAN','relational_operators',1,'p_relational_operators','parser.py',315),
  ('math_operators -> OP_ARITH_ADD','math_operators',1,'p_math_operators','parser.py',324),
  ('math_operators -> OP_ARITH_SUBTRACT','math_operators',1,'p_math_operators','parser.py',325),
  ('math_operators -> OP_ARITH_MULTIPLY','math_operators',1,'p_math_operators','parser.py',326),
  ('math_operators -> OP_ARITH_DIVIDE','math_operators',1,'p_math_operators','parser.py',327),
  ('math_operators -> OP_ARITH_INTEGER_DIVIDE','math_operators',1,'p_math_operators','parser.py',328),
  ('math_operators -> OP_ARITH_MODULE','math_operators',1,'p_math_operators','parser.py',329),
  ('math_operators -> OP_ARITH_INCREMENT','math_operators',1,'p_math_operators','parser.py',330),
  ('math_operators -> OP_ARITH_DECREMENT','math_operators',1,'p_math_operators','parser.py',331),
  ('primary_expression -> variable_expression','primary_expression',1,'p_primary_expression','parser.py',339),
  ('primary_expression -> boolean_expression','primary_expression',1,'p_primary_expression','parser.py',340),
  ('primary_expression -> LIT_INT','primary_expression',1,'p_primary_expression','parser.py',341),
  ('primary_expression -> LIT_REAL','primary_expression',1,'p_primary_expression','parser.py',342),
  ('primary_expression -> LIT_STRING','primary_expression',1,'p_primary_expression','parser.py',343),
  ('variable_expression -> ID','variable_expression',1,'p_variable_expression','parser.py',355),
  ('variable_expression -> CONST','variable_expression',1,'p_variable_expression','parser.py',356),
  ('boolean_expression -> TRUE','boolean_expression',1,'p_boolean_expression','parser.py',364),
  ('boolean_expression -> FALSE','boolean_expression',1,'p_boolean_expression','parser.py',365),
  ('semicolon -> S_SEMI_COL','semicolon',1,'p_semicolon','parser.py',373),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',380),
]
