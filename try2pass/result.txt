
Test A:

Illegal character: '&' encountered
('ERROR:', '&')
('root', '->', 'import_main')
('import_main', '->', 'import_list')
('import_list', '->', 'empty')
('empty', '->', '')
('import_main', '->', 'main')
('main', '->', 'statement_list')
('statement_list', '->', 'empty')
('empty', '->', '')
None

Test B:
('root', '->', 'import_main')
('import_main', '->', 'import_list')
('import_list', '->', 'empty')
('empty', '->', '')
('import_main', '->', 'main')
('main', '->', 'statement_list')
('statement_list', '->', 'empty')
('empty', '->', '')
None

Test 0:
('root', '->', 'import_main')
('import_main', '->', 'statement_list')
('statement_list', '->', 'import_list')
('import_list', '->', 'import_statement')
('import_statement', '->', 'import_expression')
('import_expression', '->', "'dart:io'")
('import_statement', '->', ';')
('statement_list', '->', 'import_statement')
('import_statement', '->', 'import_expression')
('import_expression', '->', "'netflix:io'")
('import_statement', '->', ';')
('import_main', '->', 'main')
('main', '->', 'statement_list')
('statement_list', '->', 'empty')
('empty', '->', '')
None

Test 1:
('root', '->', 'import_main')
('import_main', '->', 'import_list')
('import_list', '->', 'empty')
('empty', '->', '')
('import_main', '->', 'main')
('main', '->', 'statement_list')
('statement_list', '->', 'statement')
('statement', '->', 'expression_statement')
('expression_statement', '->', 'declaration_expression')
('declaration_expression', '->', 'const')
('declaration_expression', '->', 'type_specifier')
('type_specifier', '->', 'int')
('declaration_expression', '->', 'declaration_expression')
('declaration_expression', '->', 'assignment_expression')
('assignment_expression', '->', 'assignment_expression')
('assignment_expression', '->', 'variable_expression')
('variable_expression', '->', 'a')
('assignment_expression', '->', '=')
('assignment_expression', '->', 'logical_expression')
('logical_expression', '->', 'equality_expression')
('equality_expression', '->', 'relational_expression')
('relational_expression', '->', 'math_expression')
('math_expression', '->', 'primary_expression')
('primary_expression', '->', '16.33')
('expression_statement', '->', '<node.Node instance at 0x7f39a52238c0>')
None

Test 2:
('ERROR:', '"hola"')
Error on grammar

Test 3:
('root', '->', 'import_main')
('import_main', '->', 'import_list')
('import_list', '->', 'import_statement')
('import_statement', '->', 'import_expression')
('import_expression', '->', "'dart:io'")
('import_statement', '->', ';')
('import_main', '->', 'main')
('main', '->', 'statement_list')
('statement_list', '->', 'statement_list')
('statement_list', '->', 'statement_list')
('statement_list', '->', 'statement')
('statement', '->', 'expression_statement')
('expression_statement', '->', 'output_expression')
('output_expression', '->', 'print')
('output_expression', '->', 'conditional_expression')
('conditional_expression', '->', '(')
('conditional_expression', '->', 'logical_expression')
('logical_expression', '->', 'equality_expression')
('equality_expression', '->', 'relational_expression')
('relational_expression', '->', 'math_expression')
('math_expression', '->', 'primary_expression')
('primary_expression', '->', '"Enter your name : "')
('conditional_expression', '->', ')')
('expression_statement', '->', '<node.Node instance at 0x7f39a52239e0>')
('statement_list', '->', 'statement')
('statement', '->', 'expression_statement')
('expression_statement', '->', 'declaration_expression')
('declaration_expression', '->', 'type_specifier')
('type_specifier', '->', 'String')
('declaration_expression', '->', 'declaration_expression')
('declaration_expression', '->', 'assignment_expression')
('assignment_expression', '->', 'assignment_expression')
('assignment_expression', '->', 'variable_expression')
('variable_expression', '->', 'name')
('assignment_expression', '->', '=')
('assignment_expression', '->', 'input_expression')
('input_expression', '->', 'stdin')
('input_expression', '->', '.')
('input_expression', '->', 'readLineSync')
('input_expression', '->', '(')
('input_expression', '->', ')')
('expression_statement', '->', '<node.Node instance at 0x7f39a5223098>')
('statement_list', '->', 'statement')
('statement', '->', 'expression_statement')
('expression_statement', '->', 'output_expression')
('output_expression', '->', 'print')
('output_expression', '->', 'conditional_expression')
('conditional_expression', '->', '(')
('conditional_expression', '->', 'logical_expression')
('logical_expression', '->', 'equality_expression')
('equality_expression', '->', 'relational_expression')
('relational_expression', '->', 'math_expression')
('math_expression', '->', 'primary_expression')
('primary_expression', '->', 'variable_expression')
('variable_expression', '->', 'name')
('conditional_expression', '->', ')')
('expression_statement', '->', '<node.Node instance at 0x7f39a52285f0>')
None

Test 4:
('root', '->', 'import_main')
('import_main', '->', 'import_list')
('import_list', '->', 'import_statement')
('import_statement', '->', 'import_expression')
('import_expression', '->', "'dart:io'")
('import_statement', '->', ';')
('import_main', '->', 'main')
('main', '->', 'statement_list')
('statement_list', '->', 'statement_list')
('statement_list', '->', 'statement_list')
('statement_list', '->', 'statement_list')
('statement_list', '->', 'statement_list')
('statement_list', '->', 'statement_list')
('statement_list', '->', 'statement_list')
('statement_list', '->', 'statement_list')
('statement_list', '->', 'statement')
('statement', '->', 'expression_statement')
('expression_statement', '->', 'output_expression')
('output_expression', '->', 'print')
('output_expression', '->', 'conditional_expression')
('conditional_expression', '->', '(')
('conditional_expression', '->', 'logical_expression')
('logical_expression', '->', 'equality_expression')
('equality_expression', '->', 'relational_expression')
('relational_expression', '->', 'math_expression')
('math_expression', '->', 'primary_expression')
('primary_expression', '->', '"What\'s your name?"')
('conditional_expression', '->', ')')
('expression_statement', '->', '<node.Node instance at 0x7f39a522b290>')
('statement_list', '->', 'statement')
('statement', '->', 'expression_statement')
('expression_statement', '->', 'declaration_expression')
('declaration_expression', '->', 'type_specifier')
('type_specifier', '->', 'String')
('declaration_expression', '->', 'declaration_expression')
('declaration_expression', '->', 'assignment_expression')
('assignment_expression', '->', 'assignment_expression')
('assignment_expression', '->', 'variable_expression')
('variable_expression', '->', 'name')
('assignment_expression', '->', '=')
('assignment_expression', '->', 'input_expression')
('input_expression', '->', 'stdin')
('input_expression', '->', '.')
('input_expression', '->', 'readLineSync')
('input_expression', '->', '(')
('input_expression', '->', ')')
('expression_statement', '->', '<node.Node instance at 0x7f39a522fdd0>')
('statement_list', '->', 'statement')
('statement', '->', 'expression_statement')
('expression_statement', '->', 'output_expression')
('output_expression', '->', 'print')
('output_expression', '->', 'conditional_expression')
('conditional_expression', '->', '(')
('conditional_expression', '->', 'logical_expression')
('logical_expression', '->', 'equality_expression')
('equality_expression', '->', 'relational_expression')
('relational_expression', '->', 'math_expression')
('math_expression', '->', 'primary_expression')
('primary_expression', '->', '"Your Name is:"')
('conditional_expression', '->', ')')
('expression_statement', '->', '<node.Node instance at 0x7f39a51f77a0>')
('statement_list', '->', 'statement')
('statement', '->', 'expression_statement')
('expression_statement', '->', 'output_expression')
('output_expression', '->', 'print')
('output_expression', '->', 'conditional_expression')
('conditional_expression', '->', '(')
('conditional_expression', '->', 'logical_expression')
('logical_expression', '->', 'equality_expression')
('equality_expression', '->', 'relational_expression')
('relational_expression', '->', 'math_expression')
('math_expression', '->', 'primary_expression')
('primary_expression', '->', 'variable_expression')
('variable_expression', '->', 'name')
('conditional_expression', '->', ')')
('expression_statement', '->', '<node.Node instance at 0x7f39a51fa200>')
('statement_list', '->', 'statement')
('statement', '->', 'expression_statement')
('expression_statement', '->', 'declaration_expression')
('declaration_expression', '->', 'type_specifier')
('type_specifier', '->', 'int')
('declaration_expression', '->', 'declaration_expression')
('declaration_expression', '->', 'assignment_expression')
('assignment_expression', '->', 'assignment_expression')
('assignment_expression', '->', 'variable_expression')
('variable_expression', '->', 'year')
('assignment_expression', '->', '=')
('assignment_expression', '->', 'logical_expression')
('logical_expression', '->', 'equality_expression')
('equality_expression', '->', 'relational_expression')
('relational_expression', '->', 'math_expression')
('math_expression', '->', 'primary_expression')
('primary_expression', '->', '1997')
('expression_statement', '->', '<node.Node instance at 0x7f39a51fadd0>')
('statement_list', '->', 'statement')
('statement', '->', 'selection_statement')
('selection_statement', '->', 'selection_statement')
('selection_statement', '->', 'if')
('selection_statement', '->', 'conditional_expression')
('conditional_expression', '->', '(')
('conditional_expression', '->', 'logical_expression')
('logical_expression', '->', 'equality_expression')
('equality_expression', '->', 'relational_expression')
('relational_expression', '->', 'relational_expression')
('relational_expression', '->', 'math_expression')
('math_expression', '->', 'primary_expression')
('primary_expression', '->', 'variable_expression')
('variable_expression', '->', 'year')
('relational_expression', '->', 'relational_operators')
('relational_operators', '->', '>=')
('relational_expression', '->', 'math_expression')
('math_expression', '->', 'primary_expression')
('primary_expression', '->', '2001')
('conditional_expression', '->', ')')
('selection_statement', '->', 'block_statement_list')
('block_statement_list', '->', '{')
('block_statement_list', '->', 'statement_list')
('statement_list', '->', 'statement')
('statement', '->', 'expression_statement')
('expression_statement', '->', 'output_expression')
('output_expression', '->', 'print')
('output_expression', '->', 'conditional_expression')
('conditional_expression', '->', '(')
('conditional_expression', '->', 'logical_expression')
('logical_expression', '->', 'equality_expression')
('equality_expression', '->', 'relational_expression')
('relational_expression', '->', 'math_expression')
('math_expression', '->', 'primary_expression')
('primary_expression', '->', "'21st century'")
('conditional_expression', '->', ')')
('expression_statement', '->', '<node.Node instance at 0x7f39a5180128>')
('block_statement_list', '->', '}')
('selection_statement', '->', 'else')
('selection_statement', '->', 'if')
('selection_statement', '->', 'conditional_expression')
('conditional_expression', '->', '(')
('conditional_expression', '->', 'logical_expression')
('logical_expression', '->', 'equality_expression')
('equality_expression', '->', 'relational_expression')
('relational_expression', '->', 'relational_expression')
('relational_expression', '->', 'math_expression')
('math_expression', '->', 'primary_expression')
('primary_expression', '->', 'variable_expression')
('variable_expression', '->', 'year')
('relational_expression', '->', 'relational_operators')
('relational_operators', '->', '>=')
('relational_expression', '->', 'math_expression')
('math_expression', '->', 'primary_expression')
('primary_expression', '->', '1901')
('conditional_expression', '->', ')')
('selection_statement', '->', 'block_statement_list')
('block_statement_list', '->', '{')
('block_statement_list', '->', 'statement_list')
('statement_list', '->', 'statement')
('statement', '->', 'expression_statement')
('expression_statement', '->', 'output_expression')
('output_expression', '->', 'print')
('output_expression', '->', 'conditional_expression')
('conditional_expression', '->', '(')
('conditional_expression', '->', 'logical_expression')
('logical_expression', '->', 'equality_expression')
('equality_expression', '->', 'relational_expression')
('relational_expression', '->', 'math_expression')
('math_expression', '->', 'primary_expression')
('primary_expression', '->', "'20th century'")
('conditional_expression', '->', ')')
('expression_statement', '->', '<node.Node instance at 0x7f39a5184710>')
('block_statement_list', '->', '}')
('statement_list', '->', 'statement')
('statement', '->', 'iteration_statement')
('iteration_statement', '->', 'for')
('iteration_statement', '->', '(')
('iteration_statement', '->', 'declaration_expression')
('declaration_expression', '->', 'type_specifier')
('type_specifier', '->', 'int')
('declaration_expression', '->', 'declaration_expression')
('declaration_expression', '->', 'assignment_expression')
('assignment_expression', '->', 'assignment_expression')
('assignment_expression', '->', 'variable_expression')
('variable_expression', '->', 'month')
('assignment_expression', '->', '=')
('assignment_expression', '->', 'logical_expression')
('logical_expression', '->', 'equality_expression')
('equality_expression', '->', 'relational_expression')
('relational_expression', '->', 'math_expression')
('math_expression', '->', 'primary_expression')
('primary_expression', '->', '1')
('iteration_statement', '->', ';')
('iteration_statement', '->', 'logical_expression')
('logical_expression', '->', 'equality_expression')
('equality_expression', '->', 'relational_expression')
('relational_expression', '->', 'relational_expression')
('relational_expression', '->', 'math_expression')
('math_expression', '->', 'primary_expression')
('primary_expression', '->', 'variable_expression')
('variable_expression', '->', 'month')
('relational_expression', '->', 'relational_operators')
('relational_operators', '->', '<=')
('relational_expression', '->', 'math_expression')
('math_expression', '->', 'primary_expression')
('primary_expression', '->', '12')
('iteration_statement', '->', ';')
('iteration_statement', '->', 'month')
('iteration_statement', '->', '++')
('iteration_statement', '->', ')')
('iteration_statement', '->', 'block_statement_list')
('block_statement_list', '->', '{')
('block_statement_list', '->', 'statement_list')
('statement_list', '->', 'statement_list')
('statement_list', '->', 'statement')
('statement', '->', 'expression_statement')
('expression_statement', '->', 'output_expression')
('output_expression', '->', 'print')
('output_expression', '->', 'conditional_expression')
('conditional_expression', '->', '(')
('conditional_expression', '->', 'logical_expression')
('logical_expression', '->', 'equality_expression')
('equality_expression', '->', 'relational_expression')
('relational_expression', '->', 'math_expression')
('math_expression', '->', 'primary_expression')
('primary_expression', '->', 'variable_expression')
('variable_expression', '->', 'month')
('conditional_expression', '->', ')')
('expression_statement', '->', '<node.Node instance at 0x7f39a518a5f0>')
('statement_list', '->', 'statement')
('statement', '->', 'selection_statement')
('selection_statement', '->', 'selection_statement')
('selection_statement', '->', 'if')
('selection_statement', '->', 'conditional_expression')
('conditional_expression', '->', '(')
('conditional_expression', '->', 'logical_expression')
('logical_expression', '->', 'equality_expression')
('equality_expression', '->', 'relational_expression')
('relational_expression', '->', 'relational_expression')
('relational_expression', '->', 'math_expression')
('math_expression', '->', 'primary_expression')
('primary_expression', '->', 'variable_expression')
('variable_expression', '->', 'month')
('relational_expression', '->', 'relational_operators')
('relational_operators', '->', '<')
('relational_expression', '->', 'math_expression')
('math_expression', '->', 'primary_expression')
('primary_expression', '->', '5')
('conditional_expression', '->', ')')
('selection_statement', '->', 'block_statement_list')
('block_statement_list', '->', '{')
('block_statement_list', '->', 'statement_list')
('statement_list', '->', 'statement')
('statement', '->', 'expression_statement')
('expression_statement', '->', 'output_expression')
('output_expression', '->', 'print')
('output_expression', '->', 'conditional_expression')
('conditional_expression', '->', '(')
('conditional_expression', '->', 'logical_expression')
('logical_expression', '->', 'equality_expression')
('equality_expression', '->', 'relational_expression')
('relational_expression', '->', 'math_expression')
('math_expression', '->', 'primary_expression')
('primary_expression', '->', '"hola"')
('conditional_expression', '->', ')')
('expression_statement', '->', '<node.Node instance at 0x7f39a518d950>')
('block_statement_list', '->', '}')
('selection_statement', '->', 'else')
('selection_statement', '->', 'block_statement_list')
('block_statement_list', '->', '{')
('block_statement_list', '->', 'statement_list')
('statement_list', '->', 'statement')
('statement', '->', 'expression_statement')
('expression_statement', '->', 'output_expression')
('output_expression', '->', 'print')
('output_expression', '->', 'conditional_expression')
('conditional_expression', '->', '(')
('conditional_expression', '->', 'logical_expression')
('logical_expression', '->', 'equality_expression')
('equality_expression', '->', 'relational_expression')
('relational_expression', '->', 'math_expression')
('math_expression', '->', 'primary_expression')
('primary_expression', '->', '"no se puede"')
('conditional_expression', '->', ')')
('expression_statement', '->', '<node.Node instance at 0x7f39a51905f0>')
('block_statement_list', '->', '}')
('block_statement_list', '->', '}')
('statement_list', '->', 'statement')
('statement', '->', 'iteration_statement')
('iteration_statement', '->', 'while')
('iteration_statement', '->', 'conditional_expression')
('conditional_expression', '->', '(')
('conditional_expression', '->', 'logical_expression')
('logical_expression', '->', 'equality_expression')
('equality_expression', '->', 'relational_expression')
('relational_expression', '->', 'relational_expression')
('relational_expression', '->', 'math_expression')
('math_expression', '->', 'primary_expression')
('primary_expression', '->', 'variable_expression')
('variable_expression', '->', 'year')
('relational_expression', '->', 'relational_operators')
('relational_operators', '->', '<')
('relational_expression', '->', 'math_expression')
('math_expression', '->', 'primary_expression')
('primary_expression', '->', '2016')
('conditional_expression', '->', ')')
('iteration_statement', '->', 'block_statement_list')
('block_statement_list', '->', '{')
('block_statement_list', '->', 'statement_list')
('statement_list', '->', 'statement')
('statement', '->', 'expression_statement')
('expression_statement', '->', 'declaration_expression')
('declaration_expression', '->', 'assignment_expression')
('assignment_expression', '->', 'assignment_expression')
('assignment_expression', '->', 'variable_expression')
('variable_expression', '->', 'year')
('assignment_expression', '->', '+=')
('assignment_expression', '->', 'logical_expression')
('logical_expression', '->', 'equality_expression')
('equality_expression', '->', 'relational_expression')
('relational_expression', '->', 'math_expression')
('math_expression', '->', 'primary_expression')
('primary_expression', '->', '1')
('expression_statement', '->', '<node.Node instance at 0x7f39a51963f8>')
('block_statement_list', '->', '}')
None

Test 5:
('ERROR:', 'String')
Error on grammar

Test 6:
('root', '->', 'import_main')
('import_main', '->', 'import_list')
('import_list', '->', 'empty')
('empty', '->', '')
('import_main', '->', 'main')
('main', '->', 'statement_list')
('statement_list', '->', 'statement')
('statement', '->', 'iteration_statement')
('iteration_statement', '->', 'for')
('iteration_statement', '->', '(')
('iteration_statement', '->', 'declaration_expression')
('declaration_expression', '->', 'type_specifier')
('type_specifier', '->', 'int')
('declaration_expression', '->', 'declaration_expression')
('declaration_expression', '->', 'assignment_expression')
('assignment_expression', '->', 'assignment_expression')
('assignment_expression', '->', 'variable_expression')
('variable_expression', '->', 'i')
('assignment_expression', '->', '=')
('assignment_expression', '->', 'logical_expression')
('logical_expression', '->', 'equality_expression')
('equality_expression', '->', 'relational_expression')
('relational_expression', '->', 'math_expression')
('math_expression', '->', 'primary_expression')
('primary_expression', '->', '1')
('iteration_statement', '->', ';')
('iteration_statement', '->', 'logical_expression')
('logical_expression', '->', 'equality_expression')
('equality_expression', '->', 'relational_expression')
('relational_expression', '->', 'relational_expression')
('relational_expression', '->', 'math_expression')
('math_expression', '->', 'primary_expression')
('primary_expression', '->', 'variable_expression')
('variable_expression', '->', 'i')
('relational_expression', '->', 'relational_operators')
('relational_operators', '->', '<=')
('relational_expression', '->', 'math_expression')
('math_expression', '->', 'primary_expression')
('primary_expression', '->', '12')
('iteration_statement', '->', ';')
('iteration_statement', '->', 'i')
('iteration_statement', '->', '++')
('iteration_statement', '->', ')')
('iteration_statement', '->', 'block_statement_list')
('block_statement_list', '->', '{')
('block_statement_list', '->', 'statement_list')
('statement_list', '->', 'statement')
('statement', '->', 'iteration_statement')
('iteration_statement', '->', 'for')
('iteration_statement', '->', '(')
('iteration_statement', '->', 'declaration_expression')
('declaration_expression', '->', 'type_specifier')
('type_specifier', '->', 'int')
('declaration_expression', '->', 'declaration_expression')
('declaration_expression', '->', 'assignment_expression')
('assignment_expression', '->', 'assignment_expression')
('assignment_expression', '->', 'variable_expression')
('variable_expression', '->', 'j')
('assignment_expression', '->', '=')
('assignment_expression', '->', 'logical_expression')
('logical_expression', '->', 'equality_expression')
('equality_expression', '->', 'relational_expression')
('relational_expression', '->', 'math_expression')
('math_expression', '->', 'primary_expression')
('primary_expression', '->', '1')
('iteration_statement', '->', ';')
('iteration_statement', '->', 'logical_expression')
('logical_expression', '->', 'equality_expression')
('equality_expression', '->', 'relational_expression')
('relational_expression', '->', 'relational_expression')
('relational_expression', '->', 'math_expression')
('math_expression', '->', 'primary_expression')
('primary_expression', '->', 'variable_expression')
('variable_expression', '->', 'j')
('relational_expression', '->', 'relational_operators')
('relational_operators', '->', '<=')
('relational_expression', '->', 'math_expression')
('math_expression', '->', 'primary_expression')
('primary_expression', '->', '12')
('iteration_statement', '->', ';')
('iteration_statement', '->', 'j')
('iteration_statement', '->', '++')
('iteration_statement', '->', ')')
('iteration_statement', '->', 'block_statement_list')
('block_statement_list', '->', '{')
('block_statement_list', '->', 'statement_list')
('statement_list', '->', 'statement')
('statement', '->', 'selection_statement')
('selection_statement', '->', 'if')
('selection_statement', '->', 'conditional_expression')
('conditional_expression', '->', '(')
('conditional_expression', '->', 'logical_expression')
('logical_expression', '->', 'equality_expression')
('equality_expression', '->', 'equality_expression')
('equality_expression', '->', 'relational_expression')
('relational_expression', '->', 'math_expression')
('math_expression', '->', 'math_expression')
('math_expression', '->', 'primary_expression')
('primary_expression', '->', 'variable_expression')
('variable_expression', '->', 'j')
('math_expression', '->', 'math_operators')
('math_operators', '->', '%')
('math_expression', '->', 'primary_expression')
('primary_expression', '->', '3')
('equality_expression', '->', 'equality_operators')
('equality_operators', '->', '==')
('equality_expression', '->', 'relational_expression')
('relational_expression', '->', 'math_expression')
('math_expression', '->', 'primary_expression')
('primary_expression', '->', '0')
('conditional_expression', '->', ')')
('selection_statement', '->', 'block_statement_list')
('block_statement_list', '->', '{')
('block_statement_list', '->', 'statement_list')
('statement_list', '->', 'statement')
('statement', '->', 'selection_statement')
('selection_statement', '->', 'selection_statement')
('selection_statement', '->', 'if')
('selection_statement', '->', 'conditional_expression')
('conditional_expression', '->', '(')
('conditional_expression', '->', 'logical_expression')
('logical_expression', '->', 'equality_expression')
('equality_expression', '->', 'equality_expression')
('equality_expression', '->', 'relational_expression')
('relational_expression', '->', 'math_expression')
('math_expression', '->', 'math_expression')
('math_expression', '->', 'primary_expression')
('primary_expression', '->', 'variable_expression')
('variable_expression', '->', 'i')
('math_expression', '->', 'math_operators')
('math_operators', '->', '%')
('math_expression', '->', 'primary_expression')
('primary_expression', '->', '6')
('equality_expression', '->', 'equality_operators')
('equality_operators', '->', '==')
('equality_expression', '->', 'relational_expression')
('relational_expression', '->', 'math_expression')
('math_expression', '->', 'primary_expression')
('primary_expression', '->', '0')
('conditional_expression', '->', ')')
('selection_statement', '->', 'block_statement_list')
('block_statement_list', '->', '{')
('block_statement_list', '->', 'statement_list')
('statement_list', '->', 'statement_list')
('statement_list', '->', 'statement')
('statement', '->', 'expression_statement')
('expression_statement', '->', 'output_expression')
('output_expression', '->', 'print')
('output_expression', '->', 'conditional_expression')
('conditional_expression', '->', '(')
('conditional_expression', '->', 'logical_expression')
('logical_expression', '->', 'equality_expression')
('equality_expression', '->', 'relational_expression')
('relational_expression', '->', 'math_expression')
('math_expression', '->', 'primary_expression')
('primary_expression', '->', 'variable_expression')
('variable_expression', '->', 'j')
('conditional_expression', '->', ')')
('expression_statement', '->', '<node.Node instance at 0x7f39a5228200>')
('statement_list', '->', 'statement')
('statement', '->', 'expression_statement')
('expression_statement', '->', 'output_expression')
('output_expression', '->', 'print')
('output_expression', '->', 'conditional_expression')
('conditional_expression', '->', '(')
('conditional_expression', '->', 'logical_expression')
('logical_expression', '->', 'equality_expression')
('equality_expression', '->', 'relational_expression')
('relational_expression', '->', 'math_expression')
('math_expression', '->', 'primary_expression')
('primary_expression', '->', 'variable_expression')
('variable_expression', '->', 'i')
('conditional_expression', '->', ')')
('expression_statement', '->', '<node.Node instance at 0x7f39a521aa28>')
('block_statement_list', '->', '}')
('selection_statement', '->', 'else')
('selection_statement', '->', 'block_statement_list')
('block_statement_list', '->', '{')
('block_statement_list', '->', 'statement_list')
('statement_list', '->', 'statement')
('statement', '->', 'expression_statement')
('expression_statement', '->', 'output_expression')
('output_expression', '->', 'print')
('output_expression', '->', 'conditional_expression')
('conditional_expression', '->', '(')
('conditional_expression', '->', 'logical_expression')
('logical_expression', '->', 'equality_expression')
('equality_expression', '->', 'relational_expression')
('relational_expression', '->', 'math_expression')
('math_expression', '->', 'primary_expression')
('primary_expression', '->', '"Nel"')
('conditional_expression', '->', ')')
('expression_statement', '->', '<node.Node instance at 0x7f39a5196e18>')
('block_statement_list', '->', '}')
('block_statement_list', '->', '}')
('block_statement_list', '->', '}')
('block_statement_list', '->', '}')
None

Test 7:
('root', '->', 'import_main')
('import_main', '->', 'import_list')
('import_list', '->', 'empty')
('empty', '->', '')
('import_main', '->', 'main')
('main', '->', 'statement_list')
('statement_list', '->', 'empty')
('empty', '->', '')
None

Test 8:
('root', '->', 'import_main')
('import_main', '->', 'import_list')
('import_list', '->', 'empty')
('empty', '->', '')
('import_main', '->', 'main')
('main', '->', 'statement_list')
('statement_list', '->', 'empty')
('empty', '->', '')
None

Test 9:
('root', '->', 'import_main')
('import_main', '->', 'import_list')
('import_list', '->', 'empty')
('empty', '->', '')
('import_main', '->', 'main')
('main', '->', 'statement_list')
('statement_list', '->', 'statement_list')
('statement_list', '->', 'statement')
('statement', '->', 'expression_statement')
('expression_statement', '->', 'declaration_expression')
('declaration_expression', '->', 'type_specifier')
('type_specifier', '->', 'String')
('declaration_expression', '->', 'declaration_expression')
('declaration_expression', '->', 'assignment_expression')
('assignment_expression', '->', 'assignment_expression')
('assignment_expression', '->', 'variable_expression')
('variable_expression', '->', 's')
('assignment_expression', '->', '=')
('assignment_expression', '->', 'logical_expression')
('logical_expression', '->', 'equality_expression')
('equality_expression', '->', 'relational_expression')
('relational_expression', '->', 'math_expression')
('math_expression', '->', 'primary_expression')
('primary_expression', '->', '"hola"')
('expression_statement', '->', '<node.Node instance at 0x7f39a522fb48>')
('statement_list', '->', 'statement')
('statement', '->', 'expression_statement')
('expression_statement', '->', 'output_expression')
('output_expression', '->', 'print')
('output_expression', '->', 'conditional_expression')
('conditional_expression', '->', '(')
('conditional_expression', '->', 'logical_expression')
('logical_expression', '->', 'equality_expression')
('equality_expression', '->', 'relational_expression')
('relational_expression', '->', 'math_expression')
('math_expression', '->', 'primary_expression')
('primary_expression', '->', '"Hola Mundo"')
('conditional_expression', '->', ')')
('expression_statement', '->', '<node.Node instance at 0x7f39a522f908>')
None

Test 10:
('root', '->', 'import_main')
('import_main', '->', 'import_list')
('import_list', '->', 'empty')
('empty', '->', '')
('import_main', '->', 'main')
('main', '->', 'statement_list')
('statement_list', '->', 'statement')
('statement', '->', 'expression_statement')
('expression_statement', '->', 'declaration_expression')
('declaration_expression', '->', 'type_specifier')
('type_specifier', '->', 'int')
('declaration_expression', '->', 'declaration_expression')
('declaration_expression', '->', 'assignment_expression')
('assignment_expression', '->', 'assignment_expression')
('assignment_expression', '->', 'variable_expression')
('variable_expression', '->', 'a')
('assignment_expression', '->', '=')
('assignment_expression', '->', 'logical_expression')
('logical_expression', '->', 'equality_expression')
('equality_expression', '->', 'relational_expression')
('relational_expression', '->', 'math_expression')
('math_expression', '->', 'primary_expression')
('primary_expression', '->', '0')
('expression_statement', '->', '<node.Node instance at 0x7f39a5194ea8>')
None

Test 11:
('ERROR:', '(')
Error on grammar

Test 12:
('ERROR:', 'void')
Error on grammar

Test 13:
Error on grammar
